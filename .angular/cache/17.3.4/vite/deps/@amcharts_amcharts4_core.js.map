{
  "version": 3,
  "sources": ["../../../../../node_modules/@amcharts/amcharts4/.internal/core/elements/Ellipse.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/elements/Image.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/elements/Line.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/elements/Polyline.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/elements/Polyarc.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/utils/Morpher.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/elements/Polygon.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/elements/Polyspline.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/elements/Slice.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/elements/Preloader.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/elements/CloseButton.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/elements/SwitchButton.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/elements/Slider.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/elements/TextLink.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/elements/Trapezoid.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/elements/Triangle.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/rendering/Smoothing.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/elements/WavedCircle.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/elements/WavedLine.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/elements/WavedRectangle.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/elements/PlayButton.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/ColorModifier.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/GradientModifier.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/LinearGradientModifier.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/elements/3d/Cone.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/rendering/filters/LightenFilter.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/elements/3d/Rectangle3D.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/elements/3d/Slice3D.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/RadialGradientModifier.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/LinePattern.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/CirclePattern.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/RectPattern.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/rendering/filters/ColorizeFilter.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/rendering/filters/DesaturateFilter.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/rendering/filters/BlurFilter.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/rendering/filters/FocusFilter.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/utils/PatternSet.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/utils/Plugin.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/elements/AmChartsLogo.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/utils/Instance.js"],
  "sourcesContent": ["/**\r\n * Ellipse module.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Circle } from \"./Circle\";\r\nimport { registry } from \"../Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Draws an ellipse\r\n * @see {@link IEllipseEvents} for a list of available events\r\n * @see {@link IEllipseAdapters} for a list of available Adapters\r\n */\r\nvar Ellipse = /** @class */ (function (_super) {\r\n    __extends(Ellipse, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Ellipse() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Ellipse\";\r\n        _this.element = _this.paper.add(\"ellipse\");\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the ellipsis.\r\n     */\r\n    Ellipse.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        this.element.attr({ \"rx\": this.radius });\r\n        this.element.attr({ \"ry\": this.radiusY });\r\n    };\r\n    Object.defineProperty(Ellipse.prototype, \"radiusY\", {\r\n        /**\r\n         * @return Vertical radius\r\n         */\r\n        get: function () {\r\n            return this.innerHeight / 2;\r\n        },\r\n        /**\r\n         * Vertical radius.\r\n         *\r\n         * It's a relative size to the `radius`.\r\n         *\r\n         * E.g. 0.8 will mean the height of the ellipsis will be 80% of it's\r\n         * horizontal radius.\r\n         *\r\n         * @param value  Vertical radius\r\n         */\r\n        set: function (value) {\r\n            this.height = value * 2;\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Ellipse.prototype, \"radius\", {\r\n        /**\r\n         * @return Horizontal radius\r\n         */\r\n        get: function () {\r\n            return this.innerWidth / 2;\r\n        },\r\n        /**\r\n         * Horizontal radius.\r\n         *\r\n         * @param value  Horizontal radius\r\n         */\r\n        set: function (value) {\r\n            this.width = value * 2;\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Ellipse;\r\n}(Circle));\r\nexport { Ellipse };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Ellipse\"] = Ellipse;\r\n", "/**\r\n * Functionality for adding images in SVG tree.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../Sprite\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $dom from \"../utils/DOM\";\r\nimport * as $type from \"../utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Used to add `<image>` elements to SVG.\r\n *\r\n * @see {@link IImageEvents} for a list of available events\r\n * @see {@link IImageAdapters} for a list of available Adapters\r\n */\r\nvar Image = /** @class */ (function (_super) {\r\n    __extends(Image, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Image() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Image\";\r\n        _this.element = _this.paper.add(\"image\");\r\n        _this.applyTheme();\r\n        _this.width = 50;\r\n        _this.height = 50;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws an `<image>` element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Image.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        if (this.href) {\r\n            var width = this.innerWidth;\r\n            var height = this.innerHeight;\r\n            if ($type.isNumber(this.widthRatio)) {\r\n                width = height * this.widthRatio;\r\n                this.width = width;\r\n            }\r\n            if ($type.isNumber(this.heightRatio)) {\r\n                height = width * this.heightRatio;\r\n                this.height = height;\r\n            }\r\n            this.element.attr({\r\n                \"width\": width,\r\n                \"height\": height\r\n            });\r\n            this.element.attrNS($dom.XLINK, \"xlink:href\", this.href);\r\n        }\r\n    };\r\n    Object.defineProperty(Image.prototype, \"href\", {\r\n        /**\r\n         * @return Image URI\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"href\");\r\n        },\r\n        /**\r\n         * An image URI.\r\n         *\r\n         * @param value  Image URI\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"href\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Image.prototype, \"widthRatio\", {\r\n        /**\r\n         * @return Ratio\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"widthRatio\");\r\n        },\r\n        /**\r\n         * Sets image `width` relatively to its `height`.\r\n         *\r\n         * If image's `height = 100` and `widthRatio = 0.5` the actual width will be\r\n         * `50`.\r\n         *\r\n         * @param value  Ratio\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"widthRatio\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Image.prototype, \"heightRatio\", {\r\n        /**\r\n         * @return Ratio\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"heightRatio\");\r\n        },\r\n        /**\r\n         * Sets image `height` relatively to its `width`.\r\n         *\r\n         * If image's `width = 100` and `heightRatio = 0.5` the actual height will be\r\n         * `50`.\r\n         *\r\n         * @param value  Ratio\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"heightRatio\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Image.prototype, \"bbox\", {\r\n        /**\r\n         * Returns bounding box (square) for this element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        get: function () {\r\n            return {\r\n                x: 0,\r\n                y: 0,\r\n                width: this.pixelWidth,\r\n                height: this.pixelHeight\r\n            };\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Image;\r\n}(Sprite));\r\nexport { Image };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Image\"] = Image;\r\n", "/**\r\n * Line drawing functionality.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../Sprite\";\r\nimport { color } from \"../utils/Color\";\r\nimport { LinearGradient } from \"../rendering/fills/LinearGradient\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $math from \"../utils/Math\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Draws a line.\r\n *\r\n * @see {@link ILineEvents} for a list of available events\r\n * @see {@link ILineAdapters} for a list of available Adapters\r\n */\r\nvar Line = /** @class */ (function (_super) {\r\n    __extends(Line, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Line() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Line\";\r\n        _this.element = _this.paper.add(\"line\");\r\n        _this.fill = color(); //\"none\";\r\n        _this.x1 = 0;\r\n        _this.y1 = 0;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the line.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Line.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        if (this.x1 == this.x2 || this.y1 == this.y2) {\r\n            this.pixelPerfect = true;\r\n        }\r\n        else {\r\n            this.pixelPerfect = false;\r\n        }\r\n        this.x1 = this.x1;\r\n        this.x2 = this.x2;\r\n        this.y1 = this.y1;\r\n        this.y2 = this.y2;\r\n    };\r\n    Object.defineProperty(Line.prototype, \"x1\", {\r\n        /**\r\n         * @return X\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"x1\");\r\n        },\r\n        /**\r\n         * X coordinate of first end.\r\n         *\r\n         * @param value X\r\n         */\r\n        set: function (value) {\r\n            if (!$type.isNumber(value)) {\r\n                value = 0;\r\n            }\r\n            var delta = 0;\r\n            if (this.pixelPerfect && this.stroke instanceof LinearGradient) {\r\n                delta = 0.00001;\r\n            }\r\n            this.setPropertyValue(\"x1\", value, true);\r\n            this.element.attr({ \"x1\": value + delta });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Line.prototype, \"x2\", {\r\n        /**\r\n         * @return X\r\n         */\r\n        get: function () {\r\n            var value = this.getPropertyValue(\"x2\");\r\n            if (!$type.isNumber(value)) {\r\n                value = this.pixelWidth;\r\n            }\r\n            return value;\r\n        },\r\n        /**\r\n         * X coordinate of second end.\r\n         *\r\n         * @param value X\r\n         */\r\n        set: function (value) {\r\n            if (!$type.isNumber(value)) {\r\n                value = 0;\r\n            }\r\n            this.setPropertyValue(\"x2\", value, true);\r\n            this.element.attr({ \"x2\": value });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Line.prototype, \"y1\", {\r\n        /**\r\n         * @return Y\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"y1\");\r\n        },\r\n        /**\r\n         * Y coordinate of first end.\r\n         *\r\n         * @param value Y\r\n         */\r\n        set: function (value) {\r\n            if (!$type.isNumber(value)) {\r\n                value = 0;\r\n            }\r\n            var delta = 0;\r\n            if (this.pixelPerfect && this.stroke instanceof LinearGradient) {\r\n                delta = 0.00001;\r\n            }\r\n            this.setPropertyValue(\"y1\", value, true);\r\n            this.element.attr({ \"y1\": value + delta });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Line.prototype, \"y2\", {\r\n        /**\r\n         * @return Y\r\n         */\r\n        get: function () {\r\n            var value = this.getPropertyValue(\"y2\");\r\n            if (!$type.isNumber(value)) {\r\n                value = this.pixelHeight;\r\n            }\r\n            return value;\r\n        },\r\n        /**\r\n         * Y coordinate of second end.\r\n         *\r\n         * @param value Y\r\n         */\r\n        set: function (value) {\r\n            if (!$type.isNumber(value)) {\r\n                value = 0;\r\n            }\r\n            this.setPropertyValue(\"y2\", value, true);\r\n            this.element.attr({ \"y2\": value });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Converts relative position along the line (0-1) into pixel coordinates.\r\n     *\r\n     * @param position  Position (0-1)\r\n     * @return Coordinates\r\n     */\r\n    Line.prototype.positionToPoint = function (position) {\r\n        var point1 = { x: this.x1, y: this.y1 };\r\n        var point2 = { x: this.x2, y: this.y2 };\r\n        var point = $math.getMidPoint(point1, point2, position);\r\n        var angle = $math.getAngle(point1, point2);\r\n        return { x: point.x, y: point.y, angle: angle };\r\n    };\r\n    return Line;\r\n}(Sprite));\r\nexport { Line };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Line\"] = Line;\r\n", "/**\r\n * Polyline module\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../Sprite\";\r\nimport { color } from \"../utils/Color\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $math from \"../utils/Math\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Draws a polyline.\r\n *\r\n * @see {@link IPolylineEvents} for a list of available events\r\n * @see {@link IPolylineAdapters} for a list of available Adapters\r\n */\r\nvar Polyline = /** @class */ (function (_super) {\r\n    __extends(Polyline, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Polyline() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * [_distance description]\r\n         *\r\n         * @todo Description\r\n         */\r\n        _this._distance = 0;\r\n        _this.className = \"Polyline\";\r\n        _this.element = _this.paper.add(\"path\");\r\n        _this.shapeRendering = \"auto\";\r\n        _this.fill = color();\r\n        _this.strokeOpacity = 1;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Creats and adds an SVG path for the arc.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Polyline.prototype.makePath = function () {\r\n        this._distance = 0;\r\n        var segments = this.segments;\r\n        if (segments && segments.length > 0) {\r\n            var path = \"\";\r\n            for (var i = 0, len = segments.length; i < len; i++) {\r\n                var points = segments[i];\r\n                if (points.length > 0) {\r\n                    path += $path.moveTo(points[0]);\r\n                    for (var p = 1; p < points.length; p++) {\r\n                        var point = points[p];\r\n                        path += $path.lineTo(point);\r\n                        this._distance += $math.getDistance(points[p - 1], point);\r\n                    }\r\n                }\r\n            }\r\n            this.path = path;\r\n        }\r\n        this._realSegments = segments;\r\n    };\r\n    Object.defineProperty(Polyline.prototype, \"segments\", {\r\n        /**\r\n         * @return Segments\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"segments\");\r\n        },\r\n        /**\r\n         * A list of segment coordinates for the multi-part line.\r\n         *\r\n         * @todo Example\r\n         * @param segments  Segments\r\n         */\r\n        set: function (segments) {\r\n            this.setPropertyValue(\"segments\", segments);\r\n            this.makePath();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Polyline.prototype, \"distance\", {\r\n        /**\r\n         * [distance description]\r\n         *\r\n         * @todo Description\r\n         * @return [description]\r\n         */\r\n        get: function () {\r\n            return this._distance;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Converts relative position along the line (0-1) into pixel coordinates.\r\n     *\r\n     * @param position  Position (0-1)\r\n     * @return Coordinates\r\n     */\r\n    Polyline.prototype.positionToPoint = function (position) {\r\n        var deltaAngle = 0;\r\n        if (position < 0) {\r\n            position = Math.abs(position);\r\n            deltaAngle = 180;\r\n        }\r\n        var segments = this._realSegments;\r\n        if (segments) {\r\n            var totalDistance = this.distance;\r\n            var currentDistance = 0;\r\n            var distanceAB = void 0;\r\n            var positionA = 0;\r\n            var positionB = 0;\r\n            var pointA = void 0;\r\n            var pointB = void 0;\r\n            for (var s = 0; s < segments.length; s++) {\r\n                var points = segments[s];\r\n                if (points.length > 1) {\r\n                    for (var p = 1; p < points.length; p++) {\r\n                        pointA = points[p - 1];\r\n                        pointB = points[p];\r\n                        positionA = currentDistance / totalDistance;\r\n                        distanceAB = $math.getDistance(pointA, pointB);\r\n                        currentDistance += distanceAB;\r\n                        positionB = currentDistance / totalDistance;\r\n                        if (positionA <= position && positionB > position) {\r\n                            s = segments.length;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                else if (points.length == 1) {\r\n                    pointA = points[0];\r\n                    pointB = points[0];\r\n                    positionA = 0;\r\n                    positionB = 1;\r\n                }\r\n            }\r\n            if (pointA && pointB) {\r\n                var positionAB = (position - positionA) / (positionB - positionA);\r\n                var midPoint = $math.getMidPoint(pointA, pointB, positionAB);\r\n                return { x: midPoint.x, y: midPoint.y, angle: deltaAngle + $math.getAngle(pointA, pointB) };\r\n            }\r\n        }\r\n        return { x: 0, y: 0, angle: 0 };\r\n    };\r\n    Object.defineProperty(Polyline.prototype, \"realSegments\", {\r\n        /**\r\n         * @ignore\r\n         */\r\n        get: function () {\r\n            return this._realSegments;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Polyline;\r\n}(Sprite));\r\nexport { Polyline };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Polyline\"] = Polyline;\r\n", "/**\r\n * Module for a multi-part arched line.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Polyline } from \"./Polyline\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Draws a multi-part arched line.\r\n *\r\n * @see {@link IPolyarcEvents} for a list of available events\r\n * @see {@link IPolyarcAdapters} for a list of available Adapters\r\n */\r\nvar Polyarc = /** @class */ (function (_super) {\r\n    __extends(Polyarc, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Polyarc() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Polyarc\";\r\n        _this.controlPointDistance = 0.5;\r\n        _this.controlPointPosition = 0.5;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Creats and adds an SVG path for the arc.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Polyarc.prototype.makePath = function () {\r\n        this._distance = 0;\r\n        var segments = this.segments;\r\n        if (segments && segments.length > 0) {\r\n            var path = \"\";\r\n            this._realSegments = [];\r\n            for (var i = 0, len = segments.length; i < len; i++) {\r\n                var points = segments[i];\r\n                var realPoints = [];\r\n                this._realSegments.push(realPoints);\r\n                if (points.length > 0) {\r\n                    path += $path.moveTo(points[0]);\r\n                    for (var p = 1; p < points.length; p++) {\r\n                        var pointA = points[p - 1];\r\n                        var pointB = points[p];\r\n                        var distanceAB = $math.getDistance(pointB, pointA);\r\n                        var cpDistance = distanceAB * this.controlPointDistance;\r\n                        var controlPointPosition = this.controlPointPosition;\r\n                        var angle = -$math.getAngle(pointA, pointB);\r\n                        var cpx = pointA.x + (pointB.x - pointA.x) * controlPointPosition * 0.5 - cpDistance * $math.sin(angle);\r\n                        var cpy = pointA.y + (pointB.y - pointA.y) * controlPointPosition * 0.5 - cpDistance * $math.cos(angle);\r\n                        var controlPoint1 = { x: cpx, y: cpy };\r\n                        var cpx2 = pointA.x + (pointB.x - pointA.x) * controlPointPosition * 1.5 - cpDistance * $math.sin(angle);\r\n                        var cpy2 = pointA.y + (pointB.y - pointA.y) * controlPointPosition * 1.5 - cpDistance * $math.cos(angle);\r\n                        var controlPoint2 = { x: cpx2, y: cpy2 };\r\n                        path += $path.cubicCurveTo(pointB, controlPoint1, controlPoint2);\r\n                        // we add a lot of points in order to get the position/angle later\r\n                        var stepCount = Math.ceil(distanceAB);\r\n                        var prevPoint = pointA;\r\n                        if (stepCount > 0) {\r\n                            for (var i_1 = 0; i_1 <= stepCount; i_1++) {\r\n                                var point = $math.getPointOnCubicCurve(pointA, pointB, controlPoint1, controlPoint2, i_1 / stepCount);\r\n                                realPoints.push(point);\r\n                                this._distance += $math.getDistance(prevPoint, point);\r\n                                prevPoint = point;\r\n                            }\r\n                        }\r\n                        else {\r\n                            realPoints.push(pointA);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.path = path;\r\n        }\r\n    };\r\n    Object.defineProperty(Polyarc.prototype, \"controlPointPosition\", {\r\n        /**\r\n         * @return Position (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"controlPointPosition\");\r\n        },\r\n        /**\r\n         * Relative position along the line the control point is. (0-1)\r\n         *\r\n         * @default 0.5\r\n         * @param value  Position (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"controlPointPosition\", value);\r\n            this.makePath();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Polyarc.prototype, \"controlPointDistance\", {\r\n        /**\r\n         * @return Distance (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"controlPointDistance\");\r\n        },\r\n        /**\r\n         * Relative distance of the control point. (0-1)\r\n         *\r\n         * Default is half the length of the line. (0.5)\r\n         *\r\n         * @default 0.5\r\n         * @param value  Distance (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"controlPointDistance\", value);\r\n            this.makePath();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Polyarc;\r\n}(Polyline));\r\nexport { Polyarc };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Polyarc\"] = Polyarc;\r\n", "/**\r\n * Morpher module contains functionality that allows morphing one polygon to\r\n * another.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"../Base\";\r\nimport { Animation, AnimationDisposer } from \"../utils/Animation\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $ease from \"../utils/Ease\";\r\nimport * as $type from \"../utils/Type\";\r\n/**\r\n * Morpher can be used to morph one polygon to some other polygon.\r\n */\r\nvar Morpher = /** @class */ (function (_super) {\r\n    __extends(Morpher, _super);\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param morphable An object to morph\r\n     */\r\n    function Morpher(morphable) {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * A storage for measurements.\r\n         */\r\n        _this._bboxes = [];\r\n        /**\r\n         * Duration of the morphing animation in milliseconds.\r\n         */\r\n        _this.morphDuration = 800;\r\n        /**\r\n         * An easing function to use for morphing animation.\r\n         *\r\n         * @see {@link Ease}\r\n         */\r\n        _this.morphEasing = $ease.cubicOut;\r\n        /**\r\n         * If set to `true`, all separate parts of the multi-part polygon will\r\n         * morph into a single circle or polygon when using built-in methods\r\n         * `morphToCircle()` or `morphToPolygon()`.\r\n         *\r\n         * Otherwise each separate part of polygon will morph to individual target\r\n         * circle or polgyon.\r\n         */\r\n        _this.morphToSingle = true;\r\n        /**\r\n         * A ratio to scale morphed object in relation to the source object.\r\n         */\r\n        _this.scaleRatio = 1;\r\n        _this.className = \"Morpher\";\r\n        _this.morphable = morphable;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Morphs a polygon to another polygon.\r\n     *\r\n     * @param toPoints  Corner points of the target shape\r\n     * @param duration  Duration in milliseconds\r\n     * @param easing    Easing function\r\n     * @return Animation\r\n     */\r\n    Morpher.prototype.morphToPolygon = function (toPoints, duration, easing) {\r\n        var points = this.morphable.currentPoints;\r\n        if (points && toPoints) {\r\n            this.sortPoints(points);\r\n            this.sortPoints(toPoints);\r\n            this._morphFromPointsReal = [];\r\n            this._morphToPointsReal = [];\r\n            if (!$type.hasValue(duration)) {\r\n                duration = this.morphDuration;\r\n            }\r\n            if (!$type.hasValue(easing)) {\r\n                easing = this.morphEasing;\r\n            }\r\n            this._morphFromPointsReal = this.normalizePoints(toPoints, points);\r\n            this._morphToPointsReal = this.normalizePoints(points, toPoints);\r\n            this.morphable.currentPoints = this._morphFromPointsReal;\r\n            var animation = new Animation(this, { property: \"morphProgress\", from: 0, to: 1 }, duration, easing);\r\n            this._disposers.push(animation);\r\n            animation.start();\r\n            return animation;\r\n        }\r\n    };\r\n    /**\r\n     * [normalizePoints description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param pointsA  Point A\r\n     * @param pointsB  Point B\r\n     * @return Normalized points\r\n     */\r\n    Morpher.prototype.normalizePoints = function (pointsA, pointsB) {\r\n        for (var i = 0, len = pointsA.length; i < len; i++) {\r\n            var surfaceA = pointsA[i][0];\r\n            var holeA = pointsA[i][1];\r\n            var bboxA = $type.getValue($math.getBBox(surfaceA));\r\n            var middleX = bboxA.x + bboxA.width;\r\n            var middleY = bboxA.y + bboxA.height;\r\n            // check if we have the same in PointsB\r\n            if (!pointsB[i]) {\r\n                pointsB[i] = [];\r\n            }\r\n            // check if we have surface in pointsB\r\n            if (surfaceA && !pointsB[i][0]) {\r\n                pointsB[i][0] = [{ x: middleX, y: middleY }, { x: middleX, y: middleY }];\r\n            }\r\n            if (pointsB[i][0]) {\r\n                pointsB[i][0] = this.addPoints(pointsB[i][0], surfaceA.length);\r\n                var distance = Infinity;\r\n                var splitAt = 0;\r\n                for (var a = 0; a < pointsB[i][0].length; a++) {\r\n                    var newDistance = $math.getDistance(pointsB[i][0][a], surfaceA[0]);\r\n                    if (newDistance < distance) {\r\n                        splitAt = a;\r\n                        distance = newDistance;\r\n                    }\r\n                }\r\n                var partA = pointsB[i][0].slice(0, splitAt);\r\n                var partB = pointsB[i][0].slice(splitAt);\r\n                pointsB[i][0] = partB.concat(partA);\r\n            }\r\n            if (holeA) {\r\n                if (!pointsB[i][1]) {\r\n                    pointsB[i][1] = [{ x: middleX, y: middleY }, { x: middleX, y: middleY }];\r\n                }\r\n                pointsB[i][1] = this.addPoints(pointsB[i][1], holeA.length);\r\n            }\r\n        }\r\n        return pointsB;\r\n    };\r\n    /**\r\n     * [sortPoints description]\r\n     *\r\n     * @ignore Exclude from doc\r\n     * @todo Description\r\n     * @param points  [description]\r\n     * @return                        common bbox of points\r\n     */\r\n    Morpher.prototype.sortPoints = function (points) {\r\n        points.sort(function (a, b) {\r\n            var bbox1 = $type.getValue($math.getBBox(a[0]));\r\n            var bbox2 = $type.getValue($math.getBBox(b[0]));\r\n            if (bbox1.width * bbox1.height > bbox2.width * bbox2.height) {\r\n                return -1;\r\n            }\r\n            else {\r\n                return 1;\r\n            }\r\n        });\r\n        var bboxes = [];\r\n        for (var i = 0, len = points.length; i < len; i++) {\r\n            var surface = points[i][0];\r\n            if (surface) {\r\n                bboxes.push($type.getValue($math.getBBox(surface)));\r\n            }\r\n        }\r\n        return $math.getCommonRectangle(bboxes);\r\n    };\r\n    /**\r\n     * Morphs polygon to a circle (it is actually a polygon which makes a circle).\r\n     *\r\n     * @param radius    Target circle radius (px)\r\n     * @param duration  Duration (ms)\r\n     * @param easing    Easing function\r\n     * @return Animation\r\n     */\r\n    Morpher.prototype.morphToCircle = function (radius, duration, easing) {\r\n        var points = this.morphable.points;\r\n        var commonBBox = this.sortPoints(points);\r\n        this._morphFromPointsReal = [];\r\n        this._morphToPointsReal = [];\r\n        if (!$type.hasValue(duration)) {\r\n            duration = this.morphDuration;\r\n        }\r\n        if (!$type.hasValue(easing)) {\r\n            easing = this.morphEasing;\r\n        }\r\n        // surface\r\n        for (var i = 0, len = points.length; i < len; i++) {\r\n            var surface = points[i][0];\r\n            var hole = points[i][1];\r\n            this._morphFromPointsReal[i] = [];\r\n            this._morphToPointsReal[i] = [];\r\n            if (surface) {\r\n                var toPoints = surface;\r\n                var fromPoints = surface;\r\n                var bbox = $type.getValue($math.getBBox(fromPoints)); // this._bboxes[i];\r\n                if (this.morphToSingle) {\r\n                    bbox = $type.getValue(commonBBox);\r\n                }\r\n                var middleX = bbox.x + bbox.width / 2;\r\n                var middleY = bbox.y + bbox.height / 2;\r\n                var realRadius = radius;\r\n                if (!$type.isNumber(realRadius)) {\r\n                    realRadius = Math.min(bbox.width / 2, bbox.height / 2);\r\n                }\r\n                toPoints = [];\r\n                // find angle for the first point\r\n                var startAngle = $math.getAngle({ x: middleX, y: middleY }, surface[0]);\r\n                var count = 100;\r\n                if (surface.length > count) {\r\n                    count = surface.length;\r\n                }\r\n                fromPoints = this.addPoints(surface, count);\r\n                count = fromPoints.length; // add Points might increase number a bit\r\n                var angle = 360 / (count - 1);\r\n                for (var a = 0; a < count; a++) {\r\n                    var realAngle = angle * a + startAngle;\r\n                    var pointOnCircle = { x: middleX + realRadius * $math.cos(realAngle), y: middleY + realRadius * $math.sin(realAngle) };\r\n                    toPoints[a] = pointOnCircle;\r\n                }\r\n                if (hole && hole.length > 0) {\r\n                    for (var i_1 = 0, hlen = hole.length; i_1 < hlen; i_1++) {\r\n                        toPoints.push({ x: middleX, y: middleY });\r\n                    }\r\n                }\r\n                this._morphFromPointsReal[i][0] = fromPoints;\r\n                this._morphToPointsReal[i][0] = toPoints;\r\n            }\r\n        }\r\n        this.morphable.currentPoints = this._morphFromPointsReal;\r\n        var animation = new Animation(this, { property: \"morphProgress\", from: 0, to: 1 }, duration, easing);\r\n        this._disposers.push(animation);\r\n        animation.start();\r\n        return animation;\r\n    };\r\n    /**\r\n     * [addPoints description]\r\n     *\r\n     * @ignore Exclude from doc\r\n     * @todo Description\r\n     * @param points         [description]\r\n     * @param mustHaveCount  [description]\r\n     * @return [description]\r\n     */\r\n    Morpher.prototype.addPoints = function (points, mustHaveCount) {\r\n        var addToSegmentCount = Math.round(mustHaveCount / points.length);\r\n        var newPoints = [];\r\n        for (var i = 0, len = points.length; i < len; i++) {\r\n            var point0 = points[i];\r\n            var point1 = void 0;\r\n            if (i == points.length - 1) {\r\n                point1 = points[0];\r\n            }\r\n            else {\r\n                point1 = points[i + 1];\r\n            }\r\n            newPoints.push(point0);\r\n            for (var p = 1; p < addToSegmentCount; p++) {\r\n                var percent = p / addToSegmentCount;\r\n                var extraPoint = { x: point0.x + (point1.x - point0.x) * percent, y: point0.y + (point1.y - point0.y) * percent };\r\n                newPoints.push(extraPoint);\r\n            }\r\n            // stop adding in case we already added more than left in original\r\n            if (newPoints.length + points.length - i == mustHaveCount) {\r\n                addToSegmentCount = 0;\r\n            }\r\n        }\r\n        if (newPoints.length < mustHaveCount && points.length > 0) {\r\n            var lastPoint = points[points.length - 1];\r\n            for (var p = newPoints.length; p < mustHaveCount; p++) {\r\n                // add same as last\r\n                newPoints.push({ x: lastPoint.x, y: lastPoint.y });\r\n            }\r\n        }\r\n        return newPoints;\r\n    };\r\n    /**\r\n     * Morphs polygon into a rectangular polygon.\r\n     *\r\n     * @param width     Width of the target rectangle (px)\r\n     * @param height    Height of the target rectangle (px)\r\n     * @param duration  Duration (ms)\r\n     * @param easing    Easing function\r\n     * @return Animation\r\n     */\r\n    Morpher.prototype.morphToRectangle = function (width, height, duration, easing) {\r\n        var points = this.morphable.points;\r\n        this.sortPoints(points);\r\n        this._morphFromPointsReal = [];\r\n        this._morphToPointsReal = [];\r\n        if (!$type.hasValue(duration)) {\r\n            duration = this.morphDuration;\r\n        }\r\n        if (!$type.hasValue(easing)) {\r\n            easing = this.morphEasing;\r\n        }\r\n        //\t\tlet biggestBBox: IRectangle = this._bboxes[this._biggestIndex];\r\n        // surface\r\n        for (var i = 0, len = points.length; i < len; i++) {\r\n            var surface = points[i][0];\r\n            var hole = points[i][1];\r\n            this._morphFromPointsReal[i] = [];\r\n            this._morphToPointsReal[i] = [];\r\n            if (surface) {\r\n                var toPoints = surface;\r\n                var fromPoints = surface;\r\n                var bbox = this._bboxes[i];\r\n                // we only work with first area. TODO: maybe we should find the biggest one?\r\n                if (this.morphToSingle) {\r\n                    //if (i != this._biggestIndex) {\r\n                    //\tbbox = { x: biggestBBox.x + biggestBBox.width / 2, y: biggestBBox.y + biggestBBox.height / 2, width: 0, height: 0 };\r\n                    //}\r\n                }\r\n                var x = bbox.x;\r\n                var y = bbox.y;\r\n                var realWidth = width;\r\n                var realHeight = height;\r\n                if (!$type.isNumber(realWidth)) {\r\n                    realWidth = bbox.width;\r\n                }\r\n                if (!$type.isNumber(realHeight)) {\r\n                    realHeight = bbox.height;\r\n                }\r\n                toPoints = [{ x: x, y: y }, { x: x + realWidth, y: y }, { x: x + realWidth, y: y + realHeight }, { x: x, y: y + realHeight }];\r\n                toPoints = this.addPoints(toPoints, surface.length);\r\n                // if polygon has less points then count, add\r\n                if (surface.length < 4) {\r\n                    for (var i_2 = surface.length; i_2 < 4; i_2++) {\r\n                        toPoints.push({ x: surface[i_2].x, y: surface[i_2].y });\r\n                    }\r\n                }\r\n                if (hole && hole.length > 0) {\r\n                    var middleX = bbox.x + bbox.width / 2;\r\n                    var middleY = bbox.y + bbox.height / 2;\r\n                    for (var i_3 = 0, hlen = hole.length; i_3 < hlen; i_3++) {\r\n                        toPoints.push({ x: middleX, y: middleY });\r\n                    }\r\n                }\r\n                this._morphFromPointsReal[i][0] = fromPoints;\r\n                this._morphToPointsReal[i][0] = toPoints;\r\n            }\r\n        }\r\n        this.morphable.currentPoints = this._morphFromPointsReal;\r\n        var animation = new Animation(this, { property: \"morphProgress\", from: 0, to: 1 }, duration, easing);\r\n        this._disposers.push(animation);\r\n        animation.start();\r\n        return animation;\r\n    };\r\n    Object.defineProperty(Morpher.prototype, \"morphProgress\", {\r\n        /**\r\n         * Returns the progress of morph transition.\r\n         *\r\n         * @return Progress (0-1)\r\n         */\r\n        get: function () {\r\n            return this._morphProgress;\r\n        },\r\n        /**\r\n         * Progress of the morph transition.\r\n         *\r\n         * Setting this will also trigger actual transformation.\r\n         *\r\n         * @param value  Progress (0-1)\r\n         */\r\n        set: function (value) {\r\n            this._morphProgress = value;\r\n            var currentPoints = [];\r\n            if (value != null) {\r\n                var fromPoints = this._morphFromPointsReal;\r\n                var toPoints = this._morphToPointsReal;\r\n                if (fromPoints != null && toPoints != null) {\r\n                    for (var i = 0, len = fromPoints.length; i < len; i++) {\r\n                        var currentArea = [];\r\n                        currentPoints.push(currentArea);\r\n                        var surfaceFrom = fromPoints[i][0];\r\n                        var holeFrom = fromPoints[i][1];\r\n                        var surfaceTo = toPoints[i][0];\r\n                        var holeTo = toPoints[i][1];\r\n                        if (surfaceFrom && surfaceFrom.length > 0 && surfaceTo && surfaceTo.length > 0) {\r\n                            var currentSurface = [];\r\n                            for (var i_4 = 0, slen = surfaceFrom.length; i_4 < slen; i_4++) {\r\n                                var point0 = surfaceFrom[i_4];\r\n                                var point1 = surfaceTo[i_4];\r\n                                var currentPoint = { x: point0.x + (point1.x * this.scaleRatio - point0.x) * value, y: point0.y + (point1.y * this.scaleRatio - point0.y) * value };\r\n                                currentSurface.push(currentPoint);\r\n                            }\r\n                            currentArea[0] = currentSurface;\r\n                        }\r\n                        if (holeFrom && holeFrom.length > 0 && holeTo && holeTo.length > 0) {\r\n                            var currentHole = [];\r\n                            for (var i_5 = 0, hlen = holeFrom.length; i_5 < hlen; i_5++) {\r\n                                var point0 = holeFrom[i_5];\r\n                                var point1 = holeTo[i_5];\r\n                                var currentPoint = { x: point0.x + (point1.x * this.scaleRatio - point0.x) * value, y: point0.y + (point1.y * this.scaleRatio - point0.y) * value };\r\n                                currentHole.push(currentPoint);\r\n                            }\r\n                            currentArea[1] = currentHole;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.morphable.currentPoints = currentPoints;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Restores the polygon to its original appearance.\r\n     *\r\n     * @param duration  Duration (ms)\r\n     * @param easing    Easing function\r\n     * @return Animation\r\n     */\r\n    Morpher.prototype.morphBack = function (duration, easing) {\r\n        this._morphToPointsReal = this._morphFromPointsReal;\r\n        this._morphFromPointsReal = this.morphable.currentPoints;\r\n        if (!$type.hasValue(duration)) {\r\n            duration = this.morphDuration;\r\n        }\r\n        if (!$type.hasValue(easing)) {\r\n            easing = this.morphEasing;\r\n        }\r\n        var animation = new Animation(this, { property: \"morphProgress\", from: 0, to: 1 }, duration, easing);\r\n        this._disposers.push(animation);\r\n        animation.start();\r\n        return animation;\r\n    };\r\n    Object.defineProperty(Morpher.prototype, \"animations\", {\r\n        /**\r\n         * Returns a list of morph animations currently being played.\r\n         *\r\n         * @return List of animations\r\n         */\r\n        get: function () {\r\n            if (!this._animations) {\r\n                this._animations = [];\r\n                this._disposers.push(new AnimationDisposer(this._animations));\r\n            }\r\n            return this._animations;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Morpher;\r\n}(BaseObject));\r\nexport { Morpher };\r\n", "/**\r\n * Polygon module.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../Sprite\";\r\nimport { Morpher } from \"../utils/Morpher\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $type from \"../utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Draws a polygon.\r\n *\r\n * @see {@link IPolygonEvents} for a list of available events\r\n * @see {@link IPolygonAdapters} for a list of available Adapters\r\n */\r\nvar Polygon = /** @class */ (function (_super) {\r\n    __extends(Polygon, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Polygon() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Polygon\";\r\n        _this.element = _this.paper.add(\"path\");\r\n        _this.shapeRendering = \"auto\";\r\n        _this._currentPoints = [];\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(Polygon.prototype, \"points\", {\r\n        /**\r\n         * @return Polygon points\r\n         */\r\n        get: function () {\r\n            var points = this.getPropertyValue(\"points\");\r\n            var path = this.path;\r\n            if (path && (!points || points.length == 0)) {\r\n                var valueStr = path.slice(1, path.length - 1);\r\n                var segments = valueStr.split(\"ZM\");\r\n                for (var s = 0; s < segments.length; s++) {\r\n                    var segment = segments[s];\r\n                    if (segment.length > 0) {\r\n                        var areaHole = segment.split(\"M\");\r\n                        var areaArr = areaHole[0];\r\n                        var holeArr = areaHole[1];\r\n                        if (areaArr && areaArr.length > 0) {\r\n                            var pointsArr = areaArr.split(\"L\");\r\n                            if (pointsArr.length > 0) {\r\n                                var area = [];\r\n                                var areaAndHole = [area];\r\n                                points.push(areaAndHole);\r\n                                for (var p = 0; p < pointsArr.length; p++) {\r\n                                    var coords = pointsArr[p].split(\",\");\r\n                                    area.push({ x: +coords[0], y: +coords[1] });\r\n                                }\r\n                                if (holeArr && holeArr.length > 0) {\r\n                                    var pointsArr_1 = holeArr.split(\"L\");\r\n                                    if (pointsArr_1.length > 0) {\r\n                                        var hole = [];\r\n                                        areaAndHole.push(hole);\r\n                                        for (var p = pointsArr_1.length - 1; p >= 0; p--) {\r\n                                            var coords = pointsArr_1[p].split(\",\");\r\n                                            hole.push({ x: +coords[0], y: +coords[1] });\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                this.setPropertyValue(\"points\", points);\r\n                this._currentPoints = points;\r\n            }\r\n            return points;\r\n        },\r\n        /**\r\n         * An array of X/Y coordinates for each elbow of the polygon.\r\n         *\r\n         * @todo Example\r\n         * @param points  Polygon points\r\n         */\r\n        set: function (points) {\r\n            this.setPropertyValue(\"points\", points, true);\r\n            this._currentPoints = points;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Polygon.prototype, \"currentPoints\", {\r\n        /**\r\n         * @return Polygon points\r\n         */\r\n        get: function () {\r\n            if ((!this._currentPoints || this._currentPoints.length == 0) && this.path) {\r\n                this._currentPoints = this.points;\r\n            }\r\n            return this._currentPoints;\r\n        },\r\n        /**\r\n         * Current points. Used when morphing the element, so that original `points`\r\n         * are not overwritten.\r\n         *\r\n         * @param points  Polygon points\r\n         */\r\n        set: function (points) {\r\n            if (this._currentPoints != points) {\r\n                this._currentPoints = points;\r\n                this.draw();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Draws the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Polygon.prototype.draw = function () {\r\n        var path = \"\";\r\n        var points = this._currentPoints;\r\n        var left;\r\n        var right;\r\n        var top;\r\n        var bottom;\r\n        if (points.length > 0) {\r\n            // separate areas\r\n            for (var i = 0, len = points.length; i < len; i++) {\r\n                // surface\r\n                var surface = points[i][0];\r\n                var hole = points[i][1];\r\n                if (surface && surface.length > 0) {\r\n                    var point = surface[0];\r\n                    path += $path.moveTo(point);\r\n                    for (var s = 0; s < surface.length; s++) {\r\n                        point = surface[s];\r\n                        path += $path.lineTo(point);\r\n                        if (!$type.isNumber(right) || (right < point.x)) {\r\n                            right = point.x;\r\n                        }\r\n                        if (!$type.isNumber(left) || (left > point.x)) {\r\n                            left = point.x;\r\n                        }\r\n                        if (!$type.isNumber(top) || (top > point.y)) {\r\n                            top = point.y;\r\n                        }\r\n                        if (!$type.isNumber(bottom) || (bottom < point.y)) {\r\n                            bottom = point.y;\r\n                        }\r\n                    }\r\n                }\r\n                // hole\r\n                if (hole && hole.length > 0) {\r\n                    var point = hole[0];\r\n                    path += $path.moveTo(point);\r\n                    for (var h = 0, hlen = hole.length; h < hlen; h++) {\r\n                        point = hole[h];\r\n                        path += $path.lineTo(point);\r\n                    }\r\n                }\r\n            }\r\n            if (path) {\r\n                path += $path.closePath();\r\n            }\r\n            this.bbox.x = left;\r\n            this.bbox.y = top;\r\n            this.bbox.width = right - left;\r\n            this.bbox.height = bottom - top;\r\n            _super.prototype.setPath.call(this, path);\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Polygon.prototype.setPath = function (value) {\r\n        if (_super.prototype.setPath.call(this, value)) {\r\n            this.points = [];\r\n            this._bbox = this.group.getBBox();\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Measures element\r\n     */\r\n    Polygon.prototype.measureElement = function () {\r\n        // Overriding to avoid extra measurement.\r\n    };\r\n    Object.defineProperty(Polygon.prototype, \"centerPoint\", {\r\n        /**\r\n         * A calculated center point for the shape.\r\n         *\r\n         * @readonly\r\n         * @return Center\r\n         */\r\n        get: function () {\r\n            return { x: this.bbox.x + this.bbox.width / 2, y: this.bbox.y + this.bbox.height / 2 };\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Polygon.prototype, \"morpher\", {\r\n        /**\r\n         * A [[Morpher]] instance that is used to morph polygon into some other\r\n         * shape.\r\n         *\r\n         * @readonly\r\n         * @return Morpher instance\r\n         */\r\n        get: function () {\r\n            if (!this._morpher) {\r\n                this._morpher = new Morpher(this);\r\n                this._disposers.push(this._morpher);\r\n            }\r\n            return this._morpher;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Polygon;\r\n}(Sprite));\r\nexport { Polygon };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Polygon\"] = Polygon;\r\n", "/**\r\n * Polyspline (smoothed line) module.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Polyline } from \"./Polyline\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Draws a polysline. (smoothed multi-sigment line)\r\n *\r\n * @see {@link IPolysplineEvents} for a list of available events\r\n * @see {@link IPolysplineAdapters} for a list of available Adapters\r\n */\r\nvar Polyspline = /** @class */ (function (_super) {\r\n    __extends(Polyspline, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Polyspline() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Polyspline\";\r\n        _this.tensionX = 0.5;\r\n        _this.tensionY = 0.5;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Creats and adds an SVG path for the arc.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Polyspline.prototype.makePath = function () {\r\n        this._distance = 0;\r\n        var segments = this.segments;\r\n        var tensionX = this.tensionX;\r\n        var tensionY = this.tensionY;\r\n        this.allPoints = [];\r\n        if (segments && segments.length > 0) {\r\n            var path = \"\";\r\n            this._realSegments = [];\r\n            for (var i = 0, len = segments.length; i < len; i++) {\r\n                var points = segments[i];\r\n                var realPoints = [];\r\n                this._realSegments.push(realPoints);\r\n                if (points.length > 0) {\r\n                    var first = points[0];\r\n                    var last = points[points.length - 1];\r\n                    var closed_1 = false;\r\n                    if ($math.round(first.x, 3) == $math.round(last.x) && $math.round(first.y) == $math.round(last.y)) {\r\n                        closed_1 = true;\r\n                    }\r\n                    path += $path.moveTo(points[0]);\r\n                    for (var p = 0; p < points.length - 1; p++) {\r\n                        var p0 = points[p - 1];\r\n                        var p1 = points[p];\r\n                        var p2 = points[p + 1];\r\n                        var p3 = points[p + 2];\r\n                        if (p === 0) {\r\n                            p0 = points[p];\r\n                        }\r\n                        else if (p == points.length - 2) {\r\n                            p3 = points[p + 1];\r\n                        }\r\n                        if (!p3) {\r\n                            p3 = p2;\r\n                        }\r\n                        if (p === 0) {\r\n                            if (closed_1) {\r\n                                p0 = points[points.length - 2];\r\n                            }\r\n                            else {\r\n                                p0 = points[i];\r\n                            }\r\n                        }\r\n                        else if (p == points.length - 2) {\r\n                            if (closed_1) {\r\n                                p3 = points[1];\r\n                            }\r\n                            else {\r\n                                p3 = points[p + 1];\r\n                            }\r\n                        }\r\n                        var controlPointA = $math.getCubicControlPointA(p0, p1, p2, p3, tensionX, tensionY);\r\n                        var controlPointB = $math.getCubicControlPointB(p0, p1, p2, p3, tensionX, tensionY);\r\n                        path += $path.cubicCurveTo(p2, controlPointA, controlPointB);\r\n                        // now split to small segments so that we could have positionToPoint later\r\n                        var stepCount = Math.ceil($math.getCubicCurveDistance(p1, p2, controlPointA, controlPointB, 20)) * 1.2;\r\n                        var prevPoint = p1;\r\n                        if (stepCount > 0) {\r\n                            // not good for curved charts\r\n                            //this.allPoints[0] = { x: points[0].x, y: points[0].y, angle: $math.getAngle(points[0], points[1]) };\r\n                            //realPoints.push(this.allPoints[0]);\r\n                            for (var s = 0; s <= stepCount; s++) {\r\n                                var point = $math.getPointOnCubicCurve(p1, p2, controlPointA, controlPointB, s / stepCount);\r\n                                if (point.x == prevPoint.x && point.y == prevPoint.y) {\r\n                                    continue;\r\n                                }\r\n                                realPoints.push(point);\r\n                                var angle = $math.round($math.getAngle(prevPoint, point), 5);\r\n                                //this.allPoints.push({ x: point.x, y: point.y, angle: angle });\r\n                                this._distance += $math.getDistance(prevPoint, point);\r\n                                this.allPoints[Math.floor(this._distance)] = { x: point.x, y: point.y, angle: angle };\r\n                                prevPoint = point;\r\n                            }\r\n                        }\r\n                        else {\r\n                            realPoints.push(p0);\r\n                        }\r\n                    }\r\n                }\r\n                var allPoints = this.allPoints;\r\n                if (allPoints.length > 1) {\r\n                    for (var i_1 = 0; i_1 < allPoints.length; i_1++) {\r\n                        if (!allPoints[i_1]) {\r\n                            if (i_1 > 1) {\r\n                                allPoints[i_1] = allPoints[i_1 - 1];\r\n                            }\r\n                            else {\r\n                                for (var k = 1; k < allPoints.length; k++) {\r\n                                    if (allPoints[k]) {\r\n                                        allPoints[i_1] = allPoints[k];\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.path = path;\r\n        }\r\n    };\r\n    /**\r\n     * Returns an index of the point that is closest to specified coordinates.\r\n     *\r\n     * @param   point  Reference point\r\n     * @return         Index\r\n     */\r\n    Polyspline.prototype.getClosestPointIndex = function (point) {\r\n        var points = this.allPoints;\r\n        var index;\r\n        var closest = Infinity;\r\n        if (points.length > 1) {\r\n            for (var p = 1; p < points.length; p++) {\r\n                var distance = $math.getDistance(point, points[p]);\r\n                if (distance < closest) {\r\n                    index = p;\r\n                    closest = distance;\r\n                }\r\n            }\r\n        }\r\n        return index;\r\n    };\r\n    Object.defineProperty(Polyspline.prototype, \"tensionX\", {\r\n        /**\r\n         * @return Tension\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"tensionX\");\r\n        },\r\n        /**\r\n         * Horizontal tension for the spline.\r\n         *\r\n         * Used by the line smoothing algorithm.\r\n         *\r\n         * @default 0.5\r\n         * @param value  Tension\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"tensionX\", value);\r\n            this.makePath();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Polyspline.prototype, \"tensionY\", {\r\n        /**\r\n         * @return Tension\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"tensionY\");\r\n        },\r\n        /**\r\n         * Vertical tension for the spline.\r\n         *\r\n         * Used by the line smoothing algorithm.\r\n         *\r\n         * @default 0.5\r\n         * @param value  Tensions\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"tensionY\", value, true);\r\n            this.makePath();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Converts relative position along the line (0-1) into pixel coordinates.\r\n     *\r\n     * @param position  Position (0-1)\r\n     * @return Coordinates\r\n     */\r\n    Polyspline.prototype.positionToPoint = function (position, extend) {\r\n        var deltaAngle = 0;\r\n        var allPoints = this.allPoints;\r\n        var len = allPoints.length;\r\n        if (!$type.isNumber(position)) {\r\n            position = 0;\r\n        }\r\n        if (len > 1) {\r\n            if (extend && len > 3) {\r\n                if (position < 0) {\r\n                    if (position < -0.01) {\r\n                        position = -0.01;\r\n                    }\r\n                    var f0 = allPoints[0];\r\n                    var f1 = allPoints[1];\r\n                    var x = f0.x - (f0.x - f1.x) * len * position;\r\n                    var y = f0.y - (f0.y - f1.y) * len * position;\r\n                    return { x: x, y: y, angle: $math.getAngle(f0, f1) };\r\n                }\r\n                else if (position > 1) {\r\n                    if (position > 1.01) {\r\n                        position = 1.01;\r\n                    }\r\n                    var f0 = allPoints[allPoints.length - 2];\r\n                    var f1 = allPoints[allPoints.length - 3];\r\n                    var x = f0.x + (f0.x - f1.x) * len * (position - 1);\r\n                    var y = f0.y + (f0.y - f1.y) * len * (position - 1);\r\n                    return { x: x, y: y, angle: $math.getAngle(f0, { x: x, y: y }) };\r\n                }\r\n                else if (position == 1) {\r\n                    var point_1 = allPoints[allPoints.length - 1];\r\n                    return { x: point_1.x, y: point_1.y, angle: point_1.angle };\r\n                }\r\n            }\r\n            else {\r\n                if (position < 0) {\r\n                    position = Math.abs(position);\r\n                    deltaAngle = 180;\r\n                }\r\n                if (position >= 1) {\r\n                    position = 0.9999999999999;\r\n                }\r\n            }\r\n            var point = allPoints[Math.floor(position * len)];\r\n            return { x: point.x, y: point.y, angle: point.angle + deltaAngle };\r\n        }\r\n        else if (len == 1) {\r\n            var point = allPoints[0];\r\n            return { x: point.x, y: point.y, angle: point.angle };\r\n        }\r\n        else {\r\n            return { x: 0, y: 0, angle: 0 };\r\n        }\r\n    };\r\n    return Polyspline;\r\n}(Polyline));\r\nexport { Polyspline };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Polyspline\"] = Polyspline;\r\n", "/**\r\n * Slice module.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../Container\";\r\nimport { Sprite } from \"../Sprite\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport { Percent } from \"../utils/Percent\";\r\nimport { RadialGradient } from \"../rendering/fills/RadialGradient\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Draws a wedged semi-circle - slice. Usually used for Pie/Donut charts.\r\n *\r\n * @see {@link ISliceEvents} for a list of available events\r\n * @see {@link ISliceAdapters} for a list of available Adapters\r\n */\r\nvar Slice = /** @class */ (function (_super) {\r\n    __extends(Slice, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Slice() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"Slice\";\r\n        // Set defaults\r\n        _this.setPropertyValue(\"cornerRadius\", 0);\r\n        _this.setPropertyValue(\"startAngle\", 0);\r\n        _this.setPercentProperty(\"innerRadius\", 0);\r\n        _this.setPercentProperty(\"radius\", 0);\r\n        _this.setPropertyValue(\"arc\", 0);\r\n        _this.setPropertyValue(\"shiftRadius\", 0);\r\n        _this.strokeOpacity = 1;\r\n        _this.setPropertyValue(\"layout\", \"none\");\r\n        // Create a slice wedge element\r\n        _this.slice = _this.createChild(Sprite);\r\n        _this.slice.isMeasured = false;\r\n        _this._disposers.push(_this.slice);\r\n        //this.element.attr({ \"stroke-linejoin\": \"round\" });\r\n        //this.element.attr({ \"stroke-linecap\": \"round\" });\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Slice.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        var radiusY = this.radiusY;\r\n        if (this.radius > 0 && radiusY == 0) {\r\n            radiusY = 0.01;\r\n        }\r\n        this.slice.path = $path.arc(this.startAngle, this.arc, this.radius, this.pixelInnerRadius, radiusY, this.cornerRadius, this.innerCornerRadius);\r\n        this.slice.invalidate();\r\n        this.shiftRadius = this.shiftRadius;\r\n        if (this.realFill instanceof RadialGradient) {\r\n            this.updateGradient(this.realFill);\r\n        }\r\n        if (this.realStroke instanceof RadialGradient) {\r\n            this.updateGradient(this.realStroke);\r\n        }\r\n    };\r\n    Slice.prototype.updateGradient = function (gradient) {\r\n        gradient.element.attr({ \"gradientUnits\": \"userSpaceOnUse\" });\r\n        gradient.element.attr({ \"r\": this.radius });\r\n        gradient.cx = 0;\r\n        gradient.cy = 0;\r\n        gradient.element.attr({ radius: this.radius });\r\n    };\r\n    Object.defineProperty(Slice.prototype, \"bbox\", {\r\n        /**\r\n         * Returns bounding box (square) for this element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        get: function () {\r\n            if (this.definedBBox) {\r\n                return this.definedBBox;\r\n            }\r\n            if (this.isMeasured) {\r\n                var innerRect = $math.getArcRect(this.startAngle, this.startAngle + this.arc, this.pixelInnerRadius);\r\n                var outerRect = $math.getArcRect(this.startAngle, this.startAngle + this.arc, this.radius);\r\n                return $math.getCommonRectangle([innerRect, outerRect]);\r\n            }\r\n            else {\r\n                return { x: 0, y: 0, width: 0, height: 0 };\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Slice.prototype, \"startAngle\", {\r\n        /**\r\n         * @return Angle (0-360)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startAngle\");\r\n        },\r\n        /**\r\n         * The angle at which left edge of the slice is drawn. (0-360)\r\n         *\r\n         * 0 is to the right of the center.\r\n         *\r\n         * @param value  Angle (0-360)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Slice.prototype, \"arc\", {\r\n        /**\r\n         * @return [description]\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"arc\");\r\n        },\r\n        /**\r\n         * [arc description]\r\n         *\r\n         * @todo Description\r\n         * @param value [description]\r\n         */\r\n        set: function (value) {\r\n            if (!$type.isNumber(value)) {\r\n                value = 0;\r\n            }\r\n            this.setPropertyValue(\"arc\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Slice.prototype, \"radius\", {\r\n        /**\r\n         * @return Radius (px)\r\n         */\r\n        get: function () {\r\n            var radius = this.getPropertyValue(\"radius\");\r\n            if (!$type.isNumber(radius)) {\r\n                radius = 0;\r\n            }\r\n            return radius;\r\n        },\r\n        /**\r\n         * Radius of the slice in pixels.\r\n         *\r\n         * @param value  Radius (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"radius\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Slice.prototype, \"radiusY\", {\r\n        /**\r\n         * @return Vertical radius (0-1)\r\n         */\r\n        get: function () {\r\n            var value = this.getPropertyValue(\"radiusY\");\r\n            if (!$type.isNumber(value)) {\r\n                value = this.radius;\r\n            }\r\n            return value;\r\n        },\r\n        /**\r\n         * Vertical radius for creating skewed slices.\r\n         *\r\n         * This is relevant to `radius`, e.g. 0.5 will set vertical radius to half\r\n         * the `radius`.\r\n         *\r\n         * @param value Vertical radius (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"radiusY\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Slice.prototype, \"innerRadius\", {\r\n        /**\r\n         * @return Radius (px or %)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"innerRadius\");\r\n        },\r\n        /**\r\n         * Inner radius of the slice for creating cut out (donut) slices.\r\n         *\r\n         * @default 0\r\n         * @param value  Radius (px or %)\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Slice.prototype, \"pixelInnerRadius\", {\r\n        /**\r\n         * @return Radius px\r\n         */\r\n        get: function () {\r\n            return $utils.relativeToValue(this.innerRadius, this.radius);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Slice.prototype, \"cornerRadius\", {\r\n        /**\r\n         * @return Radius (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"cornerRadius\");\r\n        },\r\n        /**\r\n         * Radius of slice's outer corners in pixels.\r\n         *\r\n         * @default 0\r\n         * @param value  Radius (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"cornerRadius\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Slice.prototype, \"innerCornerRadius\", {\r\n        /**\r\n         * @return Radius (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"innerCornerRadius\");\r\n        },\r\n        /**\r\n         * Radius of slice's inner corners in pixels.\r\n         *\r\n         * @default 0\r\n         * @param value  Radius (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"innerCornerRadius\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Slice.prototype, \"shiftRadius\", {\r\n        /**\r\n         * @return Radius shift\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"shiftRadius\");\r\n        },\r\n        /**\r\n         * Indicates how far (relatively to center) a slice should be moved.\r\n         *\r\n         * The value is relative to the radius of the slice. Meaning 0 no shift,\r\n         * 1 - slice shifted outside by whole of its radius.\r\n         *\r\n         * @param  value  Radius shift\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"shiftRadius\", value);\r\n            value = this.getPropertyValue(\"shiftRadius\");\r\n            this.dx = value * this.radius * this.ix;\r\n            this.dy = value * this.radiusY * this.iy;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Slice.prototype, \"ix\", {\r\n        /**\r\n         * [ix description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         * @return [description]\r\n         */\r\n        get: function () {\r\n            return $math.cos(this.middleAngle);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Slice.prototype, \"iy\", {\r\n        /**\r\n         * [iy description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         * @return [description]\r\n         */\r\n        get: function () {\r\n            return $math.sin(this.middleAngle);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Slice.prototype, \"middleAngle\", {\r\n        /**\r\n         * An angle of the slice's middle.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return Angle\r\n         */\r\n        get: function () {\r\n            return this.startAngle + this.arc / 2;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * X coordinate for the slice tooltip.\r\n     *\r\n     * @return X\r\n     */\r\n    Slice.prototype.getTooltipX = function () {\r\n        var value = this.getPropertyValue(\"tooltipX\");\r\n        if ($type.isNumber(value)) {\r\n            return value;\r\n        }\r\n        var p = 0.5;\r\n        if (value instanceof Percent) {\r\n            p = value.value;\r\n        }\r\n        var innerRadius = $utils.relativeToValue(this.innerRadius, this.radius);\r\n        return this.ix * (innerRadius + (this.radius - innerRadius) * p);\r\n    };\r\n    /**\r\n     * Y coordinate for the slice tooltip.\r\n     *\r\n     * @return Y\r\n     */\r\n    Slice.prototype.getTooltipY = function () {\r\n        var value = this.getPropertyValue(\"tooltipY\");\r\n        if ($type.isNumber(value)) {\r\n            return value;\r\n        }\r\n        var p = 0.5;\r\n        if (value instanceof Percent) {\r\n            p = value.value;\r\n        }\r\n        var innerRadius = $utils.relativeToValue(this.innerRadius, this.radius);\r\n        return this.iy * (innerRadius + (this.radius - innerRadius) * p) + this.slice.dy;\r\n    };\r\n    return Slice;\r\n}(Container));\r\nexport { Slice };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Slice\"] = Slice;\r\n", "/**\r\n * Preloader module.\r\n *\r\n * Preloader is a progress indicator.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../Container\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { Slice } from \"./Slice\";\r\nimport { Label } from \"./Label\";\r\nimport { registry } from \"../Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * A class used to draw and display progress indicator.\r\n *\r\n * @see {@link IPreloaderEvents} for a list of available events\r\n * @see {@link IPreloaderAdapters} for a list of available Adapters\r\n */\r\nvar Preloader = /** @class */ (function (_super) {\r\n    __extends(Preloader, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Preloader() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"Preloader\";\r\n        // Set dimensions\r\n        _this.width = percent(100);\r\n        _this.height = percent(100);\r\n        var interfaceColors = new InterfaceColorSet();\r\n        // Create main container\r\n        var sliceContainer = _this.createChild(Container);\r\n        sliceContainer.shouldClone = false;\r\n        // Add background (100%) slice\r\n        var backgroundSlice = sliceContainer.createChild(Slice);\r\n        backgroundSlice.shouldClone = false;\r\n        backgroundSlice.radius = 53;\r\n        backgroundSlice.arc = 360;\r\n        backgroundSlice.fill = interfaceColors.getFor(\"fill\");\r\n        backgroundSlice.fillOpacity = 0.8;\r\n        backgroundSlice.innerRadius = 42;\r\n        backgroundSlice.isMeasured = false;\r\n        _this.backgroundSlice = backgroundSlice;\r\n        // Add progress slice\r\n        var progressSlice = sliceContainer.createChild(Slice);\r\n        progressSlice.shouldClone = false;\r\n        progressSlice.radius = 50;\r\n        progressSlice.innerRadius = 45;\r\n        progressSlice.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n        progressSlice.fillOpacity = 0.2;\r\n        progressSlice.isMeasured = false;\r\n        _this.progressSlice = progressSlice;\r\n        // Add text label element\r\n        var label = sliceContainer.createChild(Label);\r\n        label.shouldClone = false;\r\n        label.horizontalCenter = \"middle\";\r\n        label.verticalCenter = \"middle\";\r\n        label.isMeasured = false;\r\n        label.fill = interfaceColors.getFor(\"text\");\r\n        label.align = \"center\";\r\n        label.valign = \"middle\";\r\n        label.textAlign = \"middle\";\r\n        label.fillOpacity = 0.4;\r\n        _this.label = label;\r\n        // Set defaults\r\n        _this.background.opacity = 1;\r\n        _this.background.fill = interfaceColors.getFor(\"background\");\r\n        _this.contentAlign = \"center\";\r\n        _this.contentValign = \"middle\";\r\n        _this.delay = 300;\r\n        // Create hidden state\r\n        var hiddenState = _this.states.create(\"hidden\");\r\n        hiddenState.properties.opacity = 0;\r\n        // Hide by default\r\n        _this.visible = false;\r\n        _this.hide(0);\r\n        _this.__disabled = true;\r\n        // Make it disposable\r\n        // @todo Maybe it's enough to just dispose `sliceContainer`?\r\n        _this._disposers.push(_this.backgroundSlice);\r\n        _this._disposers.push(_this.progressSlice);\r\n        _this._disposers.push(_this.label);\r\n        _this._disposers.push(sliceContainer);\r\n        return _this;\r\n    }\r\n    Object.defineProperty(Preloader.prototype, \"progress\", {\r\n        /**\r\n         * @return Progress (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"progress\");\r\n        },\r\n        /**\r\n         * Current preload progress. (0-1)\r\n         *\r\n         * * 0 - 0%\r\n         * * 0.5 - 50%\r\n         * * 1 - 100%\r\n         *\r\n         * Setting this to a value less than 1, will automatically reveal the\r\n         * preloader, while setting it to 1 (100%) will hide it.\r\n         *\r\n         * @param value Progress (0-1)\r\n         */\r\n        set: function (value) {\r\n            var _this = this;\r\n            this.__disabled = false;\r\n            this.validateLayout(); // show not in center without this\r\n            this.setPropertyValue(\"progress\", value);\r\n            /*if (!this.visible && value == 1) {\r\n                return;\r\n            }*/\r\n            this.progressSlice.arc = 360 * value;\r\n            if (this.label) {\r\n                this.label.text = Math.round(value * 100) + \"%\";\r\n            }\r\n            if (value >= 1) {\r\n                // Cancel the timeout\r\n                if (this._started) {\r\n                    this._started = undefined;\r\n                }\r\n                // TODO remove closure ?\r\n                registry.events.once(\"enterframe\", function () {\r\n                    var animation = _this.hide();\r\n                    if (animation && !animation.isFinished()) {\r\n                        animation.events.once(\"animationended\", function () {\r\n                            _this.__disabled = true;\r\n                        });\r\n                    }\r\n                    else {\r\n                        _this.__disabled = true;\r\n                    }\r\n                });\r\n                this.interactionsEnabled = false;\r\n                this.setPropertyValue(\"progress\", 0);\r\n            }\r\n            else if (value > 0) {\r\n                if (this.delay) {\r\n                    if (!this._started) {\r\n                        this._started = new Date().getTime();\r\n                    }\r\n                    else if ((this._started + this.delay) <= new Date().getTime()) {\r\n                        this.__disabled = false;\r\n                        this.show();\r\n                        this.interactionsEnabled = true;\r\n                    }\r\n                }\r\n                else {\r\n                    this.__disabled = false;\r\n                    this.show();\r\n                    this.interactionsEnabled = true;\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Preloader.prototype, \"delay\", {\r\n        /**\r\n         * @return Delay (ms)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"delay\");\r\n        },\r\n        /**\r\n         * Delay display of preloader by X milliseconds.\r\n         *\r\n         * When loading starts (`progress` is set to <1) and finishes (`progress` is\r\n         * set to 1) before `delay` ms, the loader is never shown.\r\n         *\r\n         * This is used to avoid brief flashing of the preload for very quick loads.\r\n         *\r\n         * @default 1000\r\n         * @param value  Delay (ms)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"delay\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Preloader;\r\n}(Container));\r\nexport { Preloader };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Preloader\"] = Preloader;\r\n", "/**\r\n * Zoom out button functionality.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Button } from \"./Button\";\r\nimport { Sprite } from \"../Sprite\";\r\nimport { registry } from \"../Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a zoom out button.\r\n *\r\n * @see {@link ICloseButtonEvents} for a list of available events\r\n * @see {@link ICloseButtonAdapters} for a list of available Adapters\r\n */\r\nvar CloseButton = /** @class */ (function (_super) {\r\n    __extends(CloseButton, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function CloseButton() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"CloseButton\";\r\n        _this.padding(8, 8, 8, 8);\r\n        _this.showSystemTooltip = true;\r\n        _this.width = 30;\r\n        _this.height = 30;\r\n        var interfaceColors = new InterfaceColorSet();\r\n        _this.cursorOverStyle = MouseCursorStyle.pointer;\r\n        var background = _this.background;\r\n        background.cornerRadius(20, 20, 20, 20);\r\n        var bgc = interfaceColors.getFor(\"background\");\r\n        background.fill = bgc;\r\n        background.stroke = interfaceColors.getFor(\"primaryButton\");\r\n        background.strokeOpacity = 1;\r\n        background.strokeWidth = 1;\r\n        var downColor = interfaceColors.getFor(\"primaryButtonActive\");\r\n        var bhs = background.states.getKey(\"hover\");\r\n        bhs.properties.strokeWidth = 3;\r\n        bhs.properties.fill = bgc;\r\n        var bds = background.states.getKey(\"down\");\r\n        bds.properties.stroke = downColor;\r\n        bds.properties.fill = bgc;\r\n        // Create an icon\r\n        var icon = new Sprite();\r\n        icon.element = _this.paper.add(\"path\");\r\n        icon.stroke = background.stroke;\r\n        _this.icon = icon;\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    CloseButton.prototype.validate = function () {\r\n        _super.prototype.validate.call(this);\r\n        var w = this.pixelWidth / 3;\r\n        var h = this.pixelHeight / 3;\r\n        var path = $path.moveTo({ x: -w / 2, y: -h / 2 });\r\n        path += $path.lineTo({ x: w / 2, y: h / 2 });\r\n        path += $path.moveTo({ x: w / 2, y: -h / 2 });\r\n        path += $path.lineTo({ x: -w / 2, y: h / 2 });\r\n        this.icon.path = path;\r\n        this.invalidateLayout();\r\n    };\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    CloseButton.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Close\");\r\n        }\r\n    };\r\n    return CloseButton;\r\n}(Button));\r\nexport { CloseButton };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CloseButton\"] = CloseButton;\r\n", "/**\r\n * Functionality for drawing simple SwitchButtons.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../Container\";\r\nimport { Label } from \"./Label\";\r\nimport { Button } from \"../elements/Button\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * SwitchButton class is capable of drawing a simple rectangular SwitchButton with\r\n * optionally rounded corners and an icon in it.\r\n *\r\n * @see {@link ISwitchButtonEvents} for a list of available events\r\n * @see {@link ISwitchButtonAdapters} for a list of available Adapters\r\n */\r\nvar SwitchButton = /** @class */ (function (_super) {\r\n    __extends(SwitchButton, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function SwitchButton() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"SwitchButton\";\r\n        _this.tooltipY = 0;\r\n        // Set defaults\r\n        _this.layout = \"horizontal\";\r\n        _this.contentAlign = \"center\";\r\n        _this.contentValign = \"middle\";\r\n        _this.padding(8, 16, 8, 16);\r\n        _this.setStateOnChildren = true;\r\n        _this.states.create(\"active\");\r\n        var interfaceColors = new InterfaceColorSet();\r\n        // Create the label element\r\n        var leftLabel = new Label();\r\n        leftLabel.fillOpacity = 0.3;\r\n        var llas = leftLabel.states.create(\"active\");\r\n        llas.properties.fillOpacity = 1;\r\n        leftLabel.isActive = true;\r\n        _this.leftLabel = leftLabel;\r\n        var button = new Button();\r\n        var circle = new Circle();\r\n        button.contentValign = \"none\";\r\n        button.padding(0, 0, 0, 0);\r\n        circle.radius = 10;\r\n        button.icon = circle;\r\n        button.icon.valign = \"middle\";\r\n        button.label = undefined;\r\n        var p100 = percent(100);\r\n        button.background.cornerRadius(p100, p100, p100, p100);\r\n        button.width = circle.radius * 3.5;\r\n        button.height = circle.radius * 2.1;\r\n        button.marginLeft = 8;\r\n        button.marginRight = 8;\r\n        button.togglable = true;\r\n        circle.dx = -circle.radius * 0.7;\r\n        circle.fill = interfaceColors.getFor(\"primaryButton\");\r\n        var hs = circle.states.create(\"hover\");\r\n        hs.properties.fill = interfaceColors.getFor(\"primaryButtonHover\");\r\n        var as = circle.states.create(\"active\");\r\n        as.properties.fill = interfaceColors.getFor(\"primaryButtonActive\");\r\n        as.properties.dx = circle.radius * 0.7;\r\n        _this.switchButton = button;\r\n        _this.events.on(\"toggled\", function () {\r\n            _this.leftLabel.isActive = !_this.isActive;\r\n            _this.rightLabel.isActive = _this.isActive;\r\n        });\r\n        // Create the label element\r\n        var rightLabel = new Label();\r\n        rightLabel.fillOpacity = 0.3;\r\n        var rlas = rightLabel.states.create(\"active\");\r\n        rlas.properties.fillOpacity = 1;\r\n        _this.rightLabel = rightLabel;\r\n        // Set up accessibility\r\n        // A Button should be always focusable\r\n        _this.role = \"button\";\r\n        _this.focusable = true;\r\n        rightLabel.valign = \"middle\";\r\n        leftLabel.valign = \"middle\";\r\n        button.valign = \"middle\";\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(SwitchButton.prototype, \"leftLabel\", {\r\n        /**\r\n         * @return Left label element\r\n         */\r\n        get: function () {\r\n            return this._leftLabel;\r\n        },\r\n        /**\r\n         * [[Label]] element to be used for left text.\r\n         *\r\n         * @param left label element\r\n         */\r\n        set: function (label) {\r\n            if (this._leftLabel) {\r\n                this.removeDispose(this._leftLabel);\r\n            }\r\n            this._leftLabel = label;\r\n            if (label) {\r\n                label.parent = this;\r\n                label.interactionsEnabled = false;\r\n                label.shouldClone = false;\r\n                this._disposers.push(this._leftLabel);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SwitchButton.prototype, \"rightLabel\", {\r\n        /**\r\n         * @return Rigth label element\r\n         */\r\n        get: function () {\r\n            return this._rightLabel;\r\n        },\r\n        /**\r\n         * [[Label]] element to be used for left text.\r\n         *\r\n         * @param rigth label element\r\n         */\r\n        set: function (label) {\r\n            if (this._rightLabel) {\r\n                this.removeDispose(this._rightLabel);\r\n            }\r\n            this._rightLabel = label;\r\n            if (label) {\r\n                label.parent = this;\r\n                label.interactionsEnabled = false;\r\n                label.shouldClone = false;\r\n                this._disposers.push(this._rightLabel);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SwitchButton.prototype, \"switch\", {\r\n        /**\r\n         * @ignore\r\n         * @deprecated Use `switchButton` instead\r\n         */\r\n        get: function () {\r\n            return this._switchButton;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SwitchButton.prototype, \"switchButton\", {\r\n        /**\r\n         * @return Button\r\n         */\r\n        get: function () {\r\n            return this._switchButton;\r\n        },\r\n        /**\r\n         * A [[Button]] element for switch.\r\n         *\r\n         * @param Button\r\n         */\r\n        set: function (button) {\r\n            if (this._switchButton) {\r\n                this.removeDispose(this._switchButton);\r\n            }\r\n            this._switchButton = button;\r\n            if (button) {\r\n                button.parent = this;\r\n                button.shouldClone = false;\r\n                this._disposers.push(this._switchButton);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies properties and other attributes.\r\n     *\r\n     * @param source  Source\r\n     */\r\n    SwitchButton.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        if (source.leftLabel) {\r\n            this.leftLabel.copyFrom(source.leftLabel);\r\n        }\r\n        if (source.rightLabel) {\r\n            this.rightLabel.copyFrom(source.rightLabel);\r\n        }\r\n        if (source.switchButton) {\r\n            this.switchButton.copyFrom(source.switchButton);\r\n        }\r\n    };\r\n    return SwitchButton;\r\n}(Container));\r\nexport { SwitchButton };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SwitchButton\"] = SwitchButton;\r\n", "/**\r\n * Slider is a scrollbar with just one selection grip.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Scrollbar } from \"../../core/elements/Scrollbar\";\r\nimport { registry } from \"../Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a slider - a version of scrollbar with just one grip.\r\n *\r\n * @see {@link ISliderEvents} for a list of available events\r\n * @see {@link ISliderAdapters} for a list of available Adapters\r\n */\r\nvar Slider = /** @class */ (function (_super) {\r\n    __extends(Slider, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Slider() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Slider\";\r\n        _this.thumb.opacity = 0;\r\n        _this.thumb.interactionsEnabled = false;\r\n        _this.endGrip.opacity = 0;\r\n        _this.endGrip.interactionsEnabled = false;\r\n        _this.startGrip.events.on(\"drag\", function () {\r\n            _this.endGrip.x = _this.startGrip.x;\r\n            _this.endGrip.y = _this.startGrip.y;\r\n        });\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(Slider.prototype, \"__end\", {\r\n        /**\r\n         * @return [description]\r\n         */\r\n        get: function () {\r\n            return this._start;\r\n        },\r\n        set: function (value) {\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Slider.prototype, \"end\", {\r\n        /**\r\n         * @return [description]\r\n         */\r\n        get: function () {\r\n            return this._start;\r\n        },\r\n        /**\r\n         * Relative position (0-1) of the end grip.\r\n         *\r\n         * @param position  Position (0-1)\r\n         */\r\n        set: function (position) {\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Slider.prototype, \"start\", {\r\n        /**\r\n         * @return Position (0-1)\r\n         */\r\n        get: function () {\r\n            return this._start;\r\n        },\r\n        /**\r\n         * Relative position (0-1) of the start grip.\r\n         *\r\n         * @param position  Position (0-1)\r\n         */\r\n        set: function (position) {\r\n            if (!this._isBusy) {\r\n                this.__start = position;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Slider;\r\n}(Scrollbar));\r\nexport { Slider };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Slider\"] = Slider;\r\n", "/**\r\n * A module that defines Text element used to indicate links.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { registry } from \"../Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a text element with a link.\r\n *\r\n * @see {@link ITextLinkEvents} for a list of available events\r\n * @see {@link ITextLinkAdapters} for a list of available Adapters\r\n */\r\nvar TextLink = /** @class */ (function (_super) {\r\n    __extends(TextLink, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function TextLink() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"TextLink\";\r\n        _this.selectable = true;\r\n        var interfaceColors = new InterfaceColorSet();\r\n        _this.fill = interfaceColors.getFor(\"primaryButton\").brighten(0.3);\r\n        var hoverState = _this.states.create(\"hover\");\r\n        hoverState.properties.fill = interfaceColors.getFor(\"primaryButtonHover\").brighten(0.3);\r\n        var downState = _this.states.create(\"down\");\r\n        downState.properties.fill = interfaceColors.getFor(\"primaryButtonDown\").brighten(0.3);\r\n        _this.cursorOverStyle = MouseCursorStyle.pointer;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return TextLink;\r\n}(Label));\r\nexport { TextLink };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TextLink\"] = TextLink;\r\n", "/**\r\n * Functionality for drawing a trapezoid.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../Sprite\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $path from \"../rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Used to draw a Trapezoid.\r\n *\r\n * @see {@link ITrapezoidEvents} for a list of available events\r\n * @see {@link ITrapezoidAdapters} for a list of available Adapters\r\n */\r\nvar Trapezoid = /** @class */ (function (_super) {\r\n    __extends(Trapezoid, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Trapezoid() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Trapezoid\";\r\n        _this.element = _this.paper.add(\"path\");\r\n        _this.topSide = percent(100);\r\n        _this.bottomSide = percent(100);\r\n        _this.leftSide = percent(100);\r\n        _this.rightSide = percent(100);\r\n        _this.isMeasured = false; // todo: add measureElement\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Trapezoid.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        var w = this.pixelWidth;\r\n        var h = this.pixelHeight;\r\n        var ts = $utils.relativeToValue(this.topSide, w);\r\n        var bs = $utils.relativeToValue(this.bottomSide, w);\r\n        var ls = $utils.relativeToValue(this.leftSide, h);\r\n        var rs = $utils.relativeToValue(this.rightSide, h);\r\n        // 1----2\r\n        // |    |\r\n        // 4----3\r\n        var x0 = (w - ts) / 2;\r\n        var y0 = (h - ls) / 2;\r\n        var x1 = w - (w - ts) / 2;\r\n        var y1 = (h - rs) / 2;\r\n        var x2 = w - (w - bs) / 2;\r\n        var y2 = h - (h - rs) / 2;\r\n        var x3 = (w - bs) / 2;\r\n        var y3 = h - (h - ls) / 2;\r\n        var mt = \"\";\r\n        var mr = \"\";\r\n        var mb = \"\";\r\n        var ml = \"\";\r\n        if ($type.hasValue(this.horizontalNeck)) {\r\n            var hn = this.horizontalNeck.value;\r\n            mt = $path.lineTo({ x: w * hn, y: Math.max(y0, y1) });\r\n            mb = $path.lineTo({ x: w * hn, y: Math.min(y2, y3) });\r\n        }\r\n        if ($type.hasValue(this.verticalNeck)) {\r\n            var vn = this.verticalNeck.value;\r\n            mr = $path.lineTo({ x: Math.min(x1, x2), y: h * vn });\r\n            ml = $path.lineTo({ x: Math.max(x0, x3), y: h * vn });\r\n        }\r\n        var path = $path.moveTo({ x: x0, y: y0 })\r\n            + mt\r\n            + $path.lineTo({ x: x1, y: y1 })\r\n            + mr\r\n            + $path.lineTo({ x: x2, y: y2 })\r\n            + mb\r\n            + $path.lineTo({ x: x3, y: y3 })\r\n            + ml;\r\n        this.path = path;\r\n    };\r\n    Object.defineProperty(Trapezoid.prototype, \"topSide\", {\r\n        /**\r\n         * @return Width\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"topSide\");\r\n        },\r\n        /**\r\n         * Wdith of the top side. Absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @default Percent(100)\r\n         * @param value  Width\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"topSide\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Trapezoid.prototype, \"bottomSide\", {\r\n        /**\r\n         * @return Width\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"bottomSide\");\r\n        },\r\n        /**\r\n         * Wdith of the bottom side. Absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @default Percent(100)\r\n         * @param value  Width\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"bottomSide\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Trapezoid.prototype, \"leftSide\", {\r\n        /**\r\n         * @return Height\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"leftSide\");\r\n        },\r\n        /**\r\n         * Height of the left side. Absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @default Percent(100)\r\n         * @param value  Height\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"leftSide\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Trapezoid.prototype, \"rightSide\", {\r\n        /**\r\n         * @return Height\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"rightSide\");\r\n        },\r\n        /**\r\n         * Height of the right side. Absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @default Percent(100)\r\n         * @param value  Height\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"rightSide\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Trapezoid.prototype, \"horizontalNeck\", {\r\n        /**\r\n         * @return Horizontal neck position\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"horizontalNeck\");\r\n        },\r\n        /**\r\n         * A relative vertical position of the \"neck\". If the top and bottom sides\r\n         * are of different width, and `horizontalNeck` is set, a choke point\r\n         * will be created at that position, creating a funnel shape.\r\n         *\r\n         * @param value  Horizontal neck position\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"horizontalNeck\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Trapezoid.prototype, \"verticalNeck\", {\r\n        /**\r\n         * @return Vertical neck position\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"verticalNeck\");\r\n        },\r\n        /**\r\n         * A relative horizontal position of the \"neck\". If the left and right sides\r\n         * are of different height, and `verticalNeck` is set, a choke point\r\n         * will be created at that position, creating a funnel shape.\r\n         *\r\n         * @param value  Vertical neck position\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"verticalNeck\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Trapezoid;\r\n}(Sprite));\r\nexport { Trapezoid };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Trapezoid\"] = Trapezoid;\r\n", "/**\r\n * Functionality for drawing triangles.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../Sprite\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $path from \"../rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Used to draw a triangle.\r\n *\r\n * @see {@link ITriangleEvents} for a list of available events\r\n * @see {@link ITriangleAdapters} for a list of available Adapters\r\n */\r\nvar Triangle = /** @class */ (function (_super) {\r\n    __extends(Triangle, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Triangle() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Triangle\";\r\n        _this.element = _this.paper.add(\"path\");\r\n        _this.direction = \"top\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Triangle.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        var w = this.pixelWidth;\r\n        var h = this.pixelHeight;\r\n        var path;\r\n        switch (this.direction) {\r\n            case \"right\":\r\n                path = $path.moveTo({ x: 0, y: 0 })\r\n                    + $path.lineTo({ x: w, y: h / 2 })\r\n                    + $path.lineTo({ x: 0, y: h })\r\n                    + $path.closePath();\r\n                break;\r\n            case \"left\":\r\n                path = $path.moveTo({ x: w, y: 0 })\r\n                    + $path.lineTo({ x: 0, y: h / 2 })\r\n                    + $path.lineTo({ x: w, y: h })\r\n                    + $path.closePath();\r\n                break;\r\n            case \"bottom\":\r\n                path = $path.moveTo({ x: 0, y: 0 })\r\n                    + $path.lineTo({ x: w, y: 0 })\r\n                    + $path.lineTo({ x: w / 2, y: h })\r\n                    + $path.closePath();\r\n                break;\r\n            case \"top\":\r\n                path = $path.moveTo({ x: w / 2, y: 0 })\r\n                    + $path.lineTo({ x: w, y: h })\r\n                    + $path.lineTo({ x: 0, y: h })\r\n                    + $path.closePath();\r\n                break;\r\n        }\r\n        this.path = path;\r\n    };\r\n    Object.defineProperty(Triangle.prototype, \"direction\", {\r\n        /**\r\n         * Returns direction of a triangle\r\n         *\r\n         * @return value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"direction\");\r\n        },\r\n        /**\r\n         * Sets direction of a triangle\r\n         *\r\n         * @param value\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"direction\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Triangle;\r\n}(Sprite));\r\nexport { Triangle };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Triangle\"] = Triangle;\r\n", "import { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { registry } from \"../Registry\";\r\nimport * as $path from \"./Path\";\r\nimport * as $array from \"../utils/Array\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $math from \"../utils/Math\";\r\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nvar Tension = /** @class */ (function () {\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param tensionX [description]\r\n     * @param tensionY [description]\r\n     */\r\n    function Tension(tensionX, tensionY) {\r\n        this._tensionX = tensionX;\r\n        this._tensionY = tensionY;\r\n    }\r\n    /**\r\n     * [smooth description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param points  [description]\r\n     * @return [description]\r\n     */\r\n    Tension.prototype.smooth = function (points) {\r\n        for (var i = points.length - 1; i > 0; i--) {\r\n            var p0 = points[i];\r\n            var p1 = points[i - 1];\r\n            if (Math.abs(p0.x - p1.x) < 0.1 && Math.abs(p0.y - p1.y) < 0.1) {\r\n                points.splice(i - 1, 1);\r\n            }\r\n        }\r\n        var tensionX = this._tensionX;\r\n        var tensionY = this._tensionY;\r\n        if (points.length < 3 || (tensionX >= 1 && tensionY >= 1)) {\r\n            return $path.polyline(points);\r\n        }\r\n        var first = points[0];\r\n        var last = points[points.length - 1];\r\n        var closed = false;\r\n        if ($math.round(first.x, 3) == $math.round(last.x) && $math.round(first.y) == $math.round(last.y)) {\r\n            closed = true;\r\n        }\r\n        // Can't moveTo here, as it wont be possible to have fill then.\r\n        var path = \"\";\r\n        for (var i = 0, len = points.length - 1; i < len; i++) {\r\n            var p0 = points[i - 1];\r\n            var p1 = points[i];\r\n            var p2 = points[i + 1];\r\n            var p3 = points[i + 2];\r\n            if (i === 0) {\r\n                if (closed) {\r\n                    p0 = points[points.length - 2];\r\n                }\r\n                else {\r\n                    p0 = points[i];\r\n                }\r\n            }\r\n            else if (i == points.length - 2) {\r\n                if (closed) {\r\n                    p3 = points[1];\r\n                }\r\n                else {\r\n                    p3 = points[i + 1];\r\n                }\r\n            }\r\n            var controlPointA = $math.getCubicControlPointA(p0, p1, p2, p3, tensionX, tensionY);\r\n            var controlPointB = $math.getCubicControlPointB(p0, p1, p2, p3, tensionX, tensionY);\r\n            path += $path.cubicCurveTo(p2, controlPointA, controlPointB);\r\n        }\r\n        return path;\r\n    };\r\n    return Tension;\r\n}());\r\nexport { Tension };\r\n/**\r\n * Returns a waved line SVG path between two points.\r\n *\r\n * @ignore Exclude from docs\r\n * @param point1            Starting point\r\n * @param point2            Ending point\r\n * @param waveLength        Wave length\r\n * @param waveHeight        Wave height\r\n * @param adjustWaveLength  Adjust wave length based on the actual line length\r\n * @return SVG path\r\n */\r\nexport function wavedLine(point1, point2, waveLength, waveHeight, tension, adjustWaveLength) {\r\n    var x1 = point1.x;\r\n    var y1 = point1.y;\r\n    var x2 = point2.x;\r\n    var y2 = point2.y;\r\n    var distance = $math.getDistance(point1, point2);\r\n    if (adjustWaveLength) {\r\n        waveLength = distance / Math.round(distance / waveLength);\r\n    }\r\n    var d = registry.getCache($utils.stringify([\"wavedLine\", point1.x, point2.x, point1.y, point2.y, waveLength, waveHeight]));\r\n    if (!d) {\r\n        if (distance > 0) {\r\n            var angle = Math.atan2(y2 - y1, x2 - x1);\r\n            var cos = Math.cos(angle);\r\n            var sin = Math.sin(angle);\r\n            var waveLengthX = waveLength * cos;\r\n            var waveLengthY = waveLength * sin;\r\n            if (waveLength <= 1 || waveHeight <= 1) {\r\n                d = $path.lineTo(point2);\r\n            }\r\n            else {\r\n                var halfWaveCount = Math.round(2 * distance / waveLength);\r\n                var points = [];\r\n                var sign_1 = 1;\r\n                if (x2 < x1) {\r\n                    sign_1 *= -1;\r\n                }\r\n                if (y2 < y1) {\r\n                    sign_1 *= -1;\r\n                }\r\n                for (var i = 0; i <= halfWaveCount; i++) {\r\n                    sign_1 *= -1;\r\n                    var x = x1 + i * waveLengthX / 2 + sign_1 * waveHeight / 2 * sin;\r\n                    var y = y1 + i * waveLengthY / 2 - sign_1 * waveHeight / 2 * cos;\r\n                    points.push({ x: x, y: y });\r\n                }\r\n                d = new Tension(tension, tension).smooth(points);\r\n            }\r\n        }\r\n        else {\r\n            d = \"\";\r\n        }\r\n        registry.setCache($utils.stringify([\"wavedLine\", point1.x, point2.x, point1.y, point2.y, waveLength, waveHeight]), d);\r\n    }\r\n    return d;\r\n}\r\nvar Monotone = /** @class */ (function () {\r\n    function Monotone(reversed, info) {\r\n        this._reversed = reversed;\r\n        this._closed = info.closed;\r\n    }\r\n    // According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations\r\n    // \"you can express cubic Hermite interpolation in terms of cubic Bézier curves\r\n    // with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1\".\r\n    Monotone.prototype._curve = function (x0, x1, y0, y1, t0, t1) {\r\n        var dx = (x1 - x0) / 3;\r\n        if (this._reversed) {\r\n            return $path.cubicCurveTo({ x: y1, y: x1 }, { x: y0 + dx * t0, y: x0 + dx }, { x: y1 - dx * t1, y: x1 - dx });\r\n        }\r\n        else {\r\n            return $path.cubicCurveTo({ x: x1, y: y1 }, { x: x0 + dx, y: y0 + dx * t0 }, { x: x1 - dx, y: y1 - dx * t1 });\r\n        }\r\n    };\r\n    Monotone.prototype.smooth = function (points) {\r\n        var _this = this;\r\n        var x0 = NaN;\r\n        var x1 = NaN;\r\n        var y0 = NaN;\r\n        var y1 = NaN;\r\n        var t0 = NaN;\r\n        var point = 0;\r\n        var output = \"\";\r\n        $array.each(points, function (_a) {\r\n            var x = _a.x, y = _a.y;\r\n            if (_this._reversed) {\r\n                var temp = x;\r\n                x = y;\r\n                y = temp;\r\n            }\r\n            var t1 = NaN;\r\n            if (!(x === x1 && y === y1)) {\r\n                switch (point) {\r\n                    case 0:\r\n                        point = 1;\r\n                        if (_this._reversed) {\r\n                            output += $path.lineTo({ x: y, y: x });\r\n                        }\r\n                        else {\r\n                            output += $path.lineTo({ x: x, y: y });\r\n                        }\r\n                        break;\r\n                    case 1:\r\n                        point = 2;\r\n                        break;\r\n                    case 2:\r\n                        point = 3;\r\n                        output += _this._curve(x0, x1, y0, y1, slope2(x0, x1, y0, y1, t1 = slope3(x0, x1, y0, y1, x, y)), t1);\r\n                        break;\r\n                    default:\r\n                        output += _this._curve(x0, x1, y0, y1, t0, t1 = slope3(x0, x1, y0, y1, x, y));\r\n                        break;\r\n                }\r\n                x0 = x1;\r\n                x1 = x;\r\n                y0 = y1;\r\n                y1 = y;\r\n                t0 = t1;\r\n            }\r\n        });\r\n        switch (point) {\r\n            case 2:\r\n                if (this._reversed) {\r\n                    output += $path.lineTo({ x: y1, y: x1 });\r\n                }\r\n                else {\r\n                    output += $path.lineTo({ x: x1, y: y1 });\r\n                }\r\n                break;\r\n            case 3:\r\n                output += this._curve(x0, x1, y0, y1, t0, slope2(x0, x1, y0, y1, t0));\r\n                break;\r\n        }\r\n        if (this._closed) {\r\n            output += $path.closePath();\r\n        }\r\n        return output;\r\n    };\r\n    return Monotone;\r\n}());\r\nexport { Monotone };\r\n// TODO move this someplace else\r\nfunction sign(x) {\r\n    return x < 0 ? -1 : 1;\r\n}\r\nfunction slope2(x0, x1, y0, y1, t) {\r\n    var h = x1 - x0;\r\n    return h ? (3 * (y1 - y0) / h - t) / 2 : t;\r\n}\r\nfunction slope3(x0, x1, y0, y1, x2, y2) {\r\n    var h0 = x1 - x0;\r\n    var h1 = x2 - x1;\r\n    var s0 = (y1 - y0) / (h0 || h1 < 0 && -0);\r\n    var s1 = (y2 - y1) / (h1 || h0 < 0 && -0);\r\n    var p = (s0 * h1 + s1 * h0) / (h0 + h1);\r\n    return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;\r\n}\r\nvar MonotoneX = /** @class */ (function (_super) {\r\n    __extends(MonotoneX, _super);\r\n    function MonotoneX(info) {\r\n        return _super.call(this, false, info) || this;\r\n    }\r\n    return MonotoneX;\r\n}(Monotone));\r\nexport { MonotoneX };\r\nvar MonotoneY = /** @class */ (function (_super) {\r\n    __extends(MonotoneY, _super);\r\n    function MonotoneY(info) {\r\n        return _super.call(this, true, info) || this;\r\n    }\r\n    return MonotoneY;\r\n}(Monotone));\r\nexport { MonotoneY };\r\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nvar Basis = /** @class */ (function () {\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param info  [description]\r\n     */\r\n    function Basis(info) {\r\n        this._closed = info.closed;\r\n    }\r\n    /**\r\n     * [smooth description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param points  [description]\r\n     * @return [description]\r\n     */\r\n    Basis.prototype.smooth = function (points) {\r\n        var _this = this;\r\n        var x0 = NaN;\r\n        var x1 = NaN;\r\n        var x2 = NaN;\r\n        var x3 = NaN;\r\n        var x4 = NaN;\r\n        var y0 = NaN;\r\n        var y1 = NaN;\r\n        var y2 = NaN;\r\n        var y3 = NaN;\r\n        var y4 = NaN;\r\n        var point = 0;\r\n        var output = \"\";\r\n        var pushCurve = function (x, y) {\r\n            output += $path.cubicCurveTo({\r\n                x: (x0 + 4 * x1 + x) / 6,\r\n                y: (y0 + 4 * y1 + y) / 6\r\n            }, {\r\n                x: (2 * x0 + x1) / 3,\r\n                y: (2 * y0 + y1) / 3\r\n            }, {\r\n                x: (x0 + 2 * x1) / 3,\r\n                y: (y0 + 2 * y1) / 3\r\n            });\r\n        };\r\n        var pushPoint = function (_a) {\r\n            var x = _a.x, y = _a.y;\r\n            switch (point) {\r\n                case 0:\r\n                    point = 1;\r\n                    if (_this._closed) {\r\n                        x2 = x;\r\n                        y2 = y;\r\n                    }\r\n                    else {\r\n                        output += $path.lineTo({ x: x, y: y });\r\n                    }\r\n                    break;\r\n                case 1:\r\n                    point = 2;\r\n                    if (_this._closed) {\r\n                        x3 = x;\r\n                        y3 = y;\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    point = 3;\r\n                    if (_this._closed) {\r\n                        x4 = x;\r\n                        y4 = y;\r\n                        output += $path.moveTo({ x: (x0 + 4 * x1 + x) / 6, y: (y0 + 4 * y1 + y) / 6 });\r\n                        break;\r\n                    }\r\n                    else {\r\n                        output += $path.lineTo({ x: (5 * x0 + x1) / 6, y: (5 * y0 + y1) / 6 });\r\n                        // fall-through\r\n                    }\r\n                default:\r\n                    pushCurve(x, y);\r\n                    break;\r\n            }\r\n            x0 = x1;\r\n            x1 = x;\r\n            y0 = y1;\r\n            y1 = y;\r\n        };\r\n        $array.each(points, pushPoint);\r\n        if (this._closed) {\r\n            switch (point) {\r\n                case 1:\r\n                    output += $path.moveTo({ x: x2, y: y2 });\r\n                    output += $path.closePath();\r\n                    break;\r\n                case 2:\r\n                    output += $path.moveTo({ x: (x2 + 2 * x3) / 3, y: (y2 + 2 * y3) / 3 });\r\n                    output += $path.lineTo({ x: (x3 + 2 * x2) / 3, y: (y3 + 2 * y2) / 3 });\r\n                    output += $path.closePath();\r\n                    break;\r\n                case 3:\r\n                    pushPoint({ x: x2, y: y2 });\r\n                    pushPoint({ x: x3, y: y3 });\r\n                    pushPoint({ x: x4, y: y4 });\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            switch (point) {\r\n                case 3:\r\n                    pushCurve(x1, y1);\r\n                // fall-through\r\n                case 2:\r\n                    output += $path.lineTo({ x: x1, y: y1 });\r\n                    break;\r\n            }\r\n            output += $path.closePath();\r\n        }\r\n        return output;\r\n    };\r\n    return Basis;\r\n}());\r\nexport { Basis };\r\n", "/**\r\n * Functionality for drawing waved circles.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Circle } from \"./Circle\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Draws a waved circle.\r\n *\r\n * @see {@link IWavedCircleEvents} for a list of available events\r\n * @see {@link IWavedCircleAdapters} for a list of available Adapters\r\n */\r\nvar WavedCircle = /** @class */ (function (_super) {\r\n    __extends(WavedCircle, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function WavedCircle() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"WavedCircle\";\r\n        _this.element = _this.paper.add(\"path\");\r\n        _this.waveLength = 16;\r\n        _this.waveHeight = 4;\r\n        _this.fill = undefined;\r\n        _this.fillOpacity = 0;\r\n        _this.tension = 0.8;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the waved line.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    WavedCircle.prototype.draw = function () {\r\n        var path = \"\";\r\n        var radius = this.pixelRadius;\r\n        if (radius > 0) {\r\n            var points = this.getPoints(radius);\r\n            path = $path.moveTo(points[0]) + new $smoothing.Tension(this.tension, this.tension).smooth(points);\r\n        }\r\n        var innerRadius = this.pixelInnerRadius;\r\n        if (innerRadius > 0) {\r\n            var points = this.getPoints(innerRadius);\r\n            points.reverse();\r\n            path += $path.moveTo(points[0]) + new $smoothing.Tension(this.tension, this.tension).smooth(points);\r\n        }\r\n        this.path = path;\r\n    };\r\n    /**\r\n     * Returns points that circle consists of.\r\n     *\r\n     * @param radius  Radius (px)\r\n     * @return Points\r\n     */\r\n    WavedCircle.prototype.getPoints = function (radius) {\r\n        var circleLength = radius * Math.PI * 2;\r\n        var halfWaveHeight = this.waveHeight / 2;\r\n        var waveLength = circleLength / Math.round(circleLength / this.waveLength);\r\n        var halfWaveLength = waveLength / 2;\r\n        var points = [];\r\n        var count = circleLength / waveLength;\r\n        for (var i = 0; i <= count; i++) {\r\n            var angle1 = (i * waveLength) / circleLength * 360;\r\n            var angle2 = (i * waveLength + halfWaveLength) / circleLength * 360;\r\n            points.push({ x: (radius - halfWaveHeight) * $math.cos(angle1), y: (radius - halfWaveHeight) * $math.sin(angle1) });\r\n            points.push({ x: (radius + halfWaveHeight) * $math.cos(angle2), y: (radius + halfWaveHeight) * $math.sin(angle2) });\r\n        }\r\n        points.pop();\r\n        return points;\r\n    };\r\n    Object.defineProperty(WavedCircle.prototype, \"innerRadius\", {\r\n        /**\r\n         * @return Inner radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"innerRadius\");\r\n        },\r\n        /**\r\n         * Inner radius of the circle in pixels (absolute) or [[Percent]] (relative).\r\n         *\r\n         * @param value  Inner radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(WavedCircle.prototype, \"pixelInnerRadius\", {\r\n        /**\r\n         * Calculated inner radius of the circle in pixels.\r\n         *\r\n         * @readonly\r\n         * @return Inner radius (px)\r\n         */\r\n        get: function () {\r\n            return $utils.relativeToValue(this.innerRadius, $math.min(this.innerWidth / 2, this.innerHeight / 2));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(WavedCircle.prototype, \"waveLength\", {\r\n        /**\r\n         * @return Wave length (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"waveLength\");\r\n        },\r\n        /**\r\n         * Wave length in pixels.\r\n         *\r\n         * @default 16\r\n         * @param value  Wave length (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"waveLength\", value);\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(WavedCircle.prototype, \"waveHeight\", {\r\n        /**\r\n         * @return Wave height (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"waveHeight\");\r\n        },\r\n        /**\r\n         * Wave height in pixels.\r\n         *\r\n         * @default 4\r\n         * @param value  Wave height (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"waveHeight\", value);\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(WavedCircle.prototype, \"tension\", {\r\n        /**\r\n         * @return Tension\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"tension\");\r\n        },\r\n        /**\r\n         * Tension of the wave.\r\n         *\r\n         * @default 0.8\r\n         * @param value  Tension\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"tension\", value);\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return WavedCircle;\r\n}(Circle));\r\nexport { WavedCircle };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"WavedCircle\"] = WavedCircle;\r\n", "/**\r\n * Functionality for drawing waved lines.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Line } from \"./Line\";\r\nimport { color } from \"../utils/Color\";\r\nimport { wavedLine } from \"../rendering/Smoothing\";\r\nimport * as $path from \"../rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Draws a waved line.\r\n *\r\n * @see {@link IWavedLineEvents} for a list of available events\r\n * @see {@link IWavedLineAdapters} for a list of available Adapters\r\n */\r\nvar WavedLine = /** @class */ (function (_super) {\r\n    __extends(WavedLine, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function WavedLine() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"WavedLine\";\r\n        _this.element = _this.paper.add(\"path\");\r\n        _this.waveLength = 16;\r\n        _this.waveHeight = 4;\r\n        _this.tension = 0.8;\r\n        _this.pixelPerfect = false;\r\n        _this.fill = color();\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the waved line.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    WavedLine.prototype.draw = function () {\r\n        //super.draw();\r\n        var p1 = { x: this.x1, y: this.y1 };\r\n        var p2 = { x: this.x2, y: this.y2 };\r\n        this.path = $path.moveTo(p1) + wavedLine(p1, p2, this.waveLength, this.waveHeight, this.tension, true);\r\n    };\r\n    Object.defineProperty(WavedLine.prototype, \"waveLength\", {\r\n        /**\r\n         * @return Wave length (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"waveLength\");\r\n        },\r\n        /**\r\n         * Wave length in pixels.\r\n         *\r\n         * @default 16\r\n         * @param value  Wave length (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"waveLength\", value);\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(WavedLine.prototype, \"waveHeight\", {\r\n        /**\r\n         * @return Wave height (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"waveHeight\");\r\n        },\r\n        /**\r\n         * Wave height in pixels.\r\n         *\r\n         * @default 4\r\n         * @param value  Wave height (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"waveHeight\", value);\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(WavedLine.prototype, \"tension\", {\r\n        /**\r\n         * @return Tension\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"tension\");\r\n        },\r\n        /**\r\n         * Tension of the wave.\r\n         *\r\n         * @default 0.8\r\n         * @param value  Tension\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"tension\", value);\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return WavedLine;\r\n}(Line));\r\nexport { WavedLine };\r\n", "/**\r\n * Functionality for drawing rectangles with waved edges.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Rectangle } from \"./Rectangle\";\r\nimport { wavedLine } from \"../rendering/Smoothing\";\r\nimport * as $path from \"../rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Draws a rectangle with waved edges.\r\n *\r\n * @see {@link IWavedRectangleEvents} for a list of available events\r\n * @see {@link IWavedRectangleAdapters} for a list of available Adapters\r\n */\r\nvar WavedRectangle = /** @class */ (function (_super) {\r\n    __extends(WavedRectangle, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function WavedRectangle() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"WavedRectangle\";\r\n        // Add path element\r\n        _this.element = _this.paper.add(\"path\");\r\n        // Set defaults\r\n        _this.waveLength = 16;\r\n        _this.waveHeight = 4;\r\n        _this.tension = 0.8;\r\n        _this.setPropertyValue(\"wavedLeft\", true);\r\n        _this.setPropertyValue(\"wavedRight\", true);\r\n        _this.setPropertyValue(\"wavedTop\", true);\r\n        _this.setPropertyValue(\"wavedBottom\", true);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the waved rectangle.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    WavedRectangle.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        var w = this.pixelWidth;\r\n        var h = this.pixelHeight;\r\n        if (w > 0 && h > 0) {\r\n            var p1 = { x: 0, y: 0 };\r\n            var p2 = { x: w, y: 0 };\r\n            var p3 = { x: w, y: h };\r\n            var p4 = { x: 0, y: h };\r\n            var waveLengthH = Math.min(w, this.waveLength);\r\n            var waveHeightH = Math.min(h, this.waveHeight);\r\n            var waveLengthV = Math.min(h, this.waveLength);\r\n            var waveHeightV = Math.min(w, this.waveHeight);\r\n            var td = \"\";\r\n            var rd = \"\";\r\n            var bd = \"\";\r\n            var ld = \"\";\r\n            if (this.wavedTop) {\r\n                td = wavedLine(p1, p2, waveLengthH, waveHeightH, this.tension, true);\r\n            }\r\n            if (this.wavedRight) {\r\n                rd = wavedLine(p2, p3, waveLengthV, waveHeightV, this.tension, true);\r\n            }\r\n            if (this.wavedBottom) {\r\n                bd = wavedLine(p3, p4, waveLengthH, waveHeightH, this.tension, true);\r\n            }\r\n            if (this.wavedLeft) {\r\n                ld = wavedLine(p4, p1, waveLengthV, waveHeightV, this.tension, true);\r\n            }\r\n            this.path = $path.moveTo(p1) + td + $path.lineTo(p2) + rd + $path.lineTo(p3) + bd + $path.lineTo(p4) + ld + \"z\";\r\n        }\r\n    };\r\n    Object.defineProperty(WavedRectangle.prototype, \"waveLength\", {\r\n        /**\r\n         * @return Wave length (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"waveLength\");\r\n        },\r\n        /**\r\n         * Wave length in pixels.\r\n         *\r\n         * @default 16\r\n         * @param value  Wave length (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"waveLength\", value);\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(WavedRectangle.prototype, \"waveHeight\", {\r\n        /**\r\n         * @return Wave height (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"waveHeight\");\r\n        },\r\n        /**\r\n         * Wave height in pixels.\r\n         *\r\n         * @default 4\r\n         * @param value  Wave height (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"waveHeight\", value);\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets which side should be waved or not. If particular side is set to\r\n     * `false`, a straight line will be drawn on that side.\r\n     *\r\n     * @param top     Top waved?\r\n     * @param right   Right side waved?\r\n     * @param bottom  Bottom Waved?\r\n     * @param left    Left side waved?\r\n     */\r\n    WavedRectangle.prototype.setWavedSides = function (top, right, bottom, left) {\r\n        this.wavedTop = top;\r\n        this.wavedRight = right;\r\n        this.wavedBottom = bottom;\r\n        this.wavedLeft = left;\r\n    };\r\n    Object.defineProperty(WavedRectangle.prototype, \"tension\", {\r\n        /**\r\n         * @return Tension\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"tension\");\r\n        },\r\n        /**\r\n         * Tension of the wave.\r\n         *\r\n         * @default 0.8\r\n         * @param value  Tension\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"tension\", value);\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(WavedRectangle.prototype, \"wavedRight\", {\r\n        /**\r\n         * @return Wave right side?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"wavedRight\");\r\n        },\r\n        /**\r\n         * Specifies if right side should be waved.\r\n         *\r\n         * @default true\r\n         * @param value Waved?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"wavedRight\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(WavedRectangle.prototype, \"wavedLeft\", {\r\n        /**\r\n         * @return Wave left side?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"wavedLeft\");\r\n        },\r\n        /**\r\n         * Specifies if left side should be waved.\r\n         *\r\n         * @default true\r\n         * @param value Waved?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"wavedLeft\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(WavedRectangle.prototype, \"wavedTop\", {\r\n        /**\r\n         * @return Wave top side?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"wavedTop\");\r\n        },\r\n        /**\r\n         * Specifies if top side should be waved.\r\n         *\r\n         * @default true\r\n         * @param value Waved?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"wavedTop\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(WavedRectangle.prototype, \"wavedBottom\", {\r\n        /**\r\n         * @return Wave bottom side?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"wavedBottom\");\r\n        },\r\n        /**\r\n         * Specifies if bottom side should be waved.\r\n         *\r\n         * @default true\r\n         * @param value Waved?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"wavedBottom\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return WavedRectangle;\r\n}(Rectangle));\r\nexport { WavedRectangle };\r\n", "/**\r\n * Play button functionality.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Button } from \"./Button\";\r\nimport { RoundedRectangle } from \"./RoundedRectangle\";\r\nimport { registry } from \"../Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { Triangle } from \"./Triangle\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a zoom out button.\r\n *\r\n * @see {@link IPlayButtonEvents} for a list of available events\r\n * @see {@link IPlayButtonAdapters} for a list of available Adapters\r\n */\r\nvar PlayButton = /** @class */ (function (_super) {\r\n    __extends(PlayButton, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PlayButton() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"PlayButton\";\r\n        _this.padding(12, 12, 12, 12);\r\n        _this.showSystemTooltip = true;\r\n        var interfaceColors = new InterfaceColorSet();\r\n        var background = _this.background;\r\n        background.cornerRadius(25, 25, 25, 25);\r\n        background.fill = interfaceColors.getFor(\"primaryButton\");\r\n        background.stroke = interfaceColors.getFor(\"primaryButtonStroke\");\r\n        background.strokeOpacity = 0;\r\n        background.states.getKey(\"hover\").properties.fill = interfaceColors.getFor(\"primaryButtonHover\");\r\n        background.states.getKey(\"down\").properties.fill = interfaceColors.getFor(\"primaryButtonActive\");\r\n        // Create a play icon\r\n        var playIcon = new Triangle();\r\n        playIcon.direction = \"right\";\r\n        playIcon.width = 9;\r\n        playIcon.height = 11;\r\n        playIcon.marginLeft = 1;\r\n        playIcon.marginRight = 1;\r\n        playIcon.horizontalCenter = \"middle\";\r\n        playIcon.verticalCenter = \"middle\";\r\n        playIcon.stroke = interfaceColors.getFor(\"primaryButtonText\");\r\n        playIcon.fill = playIcon.stroke;\r\n        _this.icon = playIcon;\r\n        // Create a play icon\r\n        var stopIcon = new RoundedRectangle();\r\n        stopIcon.width = 11;\r\n        stopIcon.height = 11;\r\n        stopIcon.horizontalCenter = \"middle\";\r\n        stopIcon.verticalCenter = \"middle\";\r\n        stopIcon.cornerRadius(0, 0, 0, 0);\r\n        stopIcon.stroke = interfaceColors.getFor(\"primaryButtonText\");\r\n        stopIcon.fill = playIcon.stroke;\r\n        _this.togglable = true;\r\n        var activeState = _this.states.create(\"active\");\r\n        activeState.transitionDuration = 0;\r\n        activeState.properties.icon = stopIcon;\r\n        _this.defaultState.transitionDuration = 0;\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    PlayButton.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Play\");\r\n        }\r\n    };\r\n    return PlayButton;\r\n}(Button));\r\nexport { PlayButton };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PlayButton\"] = PlayButton;\r\n", "import { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"../../Base\";\r\nimport { registry } from \"../../Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * A base class for color modifiers.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nvar ColorModifier = /** @class */ (function (_super) {\r\n    __extends(ColorModifier, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ColorModifier() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"ColorModifier\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Modifies color value.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Original color\r\n     * @return Modified\r\n     */\r\n    ColorModifier.prototype.modify = function (value) {\r\n        return value;\r\n    };\r\n    return ColorModifier;\r\n}(BaseObject));\r\nexport { ColorModifier };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColorModifier\"] = ColorModifier;\r\n", "import { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColorModifier } from \"./ColorModifier\";\r\nimport { registry } from \"../../Registry\";\r\nimport * as $math from \"../../utils/Math\";\r\nimport * as $type from \"../../utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * This class can be used to modify linear gradient steps, changing visual\r\n * properties like lightness, brightness, opacity of each set.\r\n *\r\n * It can also set offsets for each gradient step.\r\n *\r\n * E.g. if I want to fill a columns in a column series to be a solid fill from\r\n * top to 80% of height, then gradually fades out, I can use the following\r\n * gradient modifier as a `fillModifier`:\r\n *\r\n * ```TypeScript\r\n * let fillModifier = new am4core.GradientModifier();\r\n * fillModifier.opacities = [1, 1, 0];\r\n * fillModifier.offsets = [0, 0.8, 1];\r\n * columnSeries.columns.template.fillModifier = fillModifier;\r\n * ```\r\n * ```JavaScript\r\n * var fillModifier = new am4core.GradientModifier();\r\n * fillModifier.opacities = [1, 1, 0];\r\n * fillModifier.offsets = [0, 0.8, 1];\r\n * columnSeries.columns.template.fillModifier = fillModifier;\r\n * ```\r\n * ```JSON\r\n * \"series\": [{\r\n *   \"type\": \"ColumnSeries\",\r\n *   \"columns\": {\r\n *     \"fillModifier\": {\r\n *       \"type\": \"GradientModifier\",\r\n *       \"opacities\": [1, 1, 0],\r\n *       \"offsets\": [0, 0.8, 1]\r\n *     }\r\n *   }\r\n * }]\r\n * ```\r\n */\r\nvar GradientModifier = /** @class */ (function (_super) {\r\n    __extends(GradientModifier, _super);\r\n    /**\r\n     * Constructor.\r\n     */\r\n    function GradientModifier() {\r\n        var _this = _super.call(this) || this;\r\n        _this.lightnesses = [];\r\n        _this.brightnesses = [];\r\n        _this.opacities = [];\r\n        _this.offsets = [];\r\n        _this.className = \"GradientModifier\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(GradientModifier.prototype, \"lightnesses\", {\r\n        /**\r\n         * @return Lightness values\r\n         */\r\n        get: function () {\r\n            return this._lightnesses;\r\n        },\r\n        /**\r\n         * An array of lightness values for each step.\r\n         *\r\n         * @param value  Lightness values\r\n         */\r\n        set: function (value) {\r\n            this._lightnesses = value;\r\n            this._brightnesses = [];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(GradientModifier.prototype, \"brightnesses\", {\r\n        /**\r\n         * @return Brightness values\r\n         */\r\n        get: function () {\r\n            return this._brightnesses;\r\n        },\r\n        /**\r\n         * An array of brightness values for each step.\r\n         *\r\n         * @param value  Brightness values\r\n         */\r\n        set: function (value) {\r\n            this._brightnesses = value;\r\n            this._lightnesses = [];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(GradientModifier.prototype, \"opacities\", {\r\n        /**\r\n         * @return Opacity values\r\n         */\r\n        get: function () {\r\n            return this._opacities;\r\n        },\r\n        /**\r\n         * An array of opacity values for each step.\r\n         *\r\n         * @param value  Opacity values\r\n         */\r\n        set: function (value) {\r\n            this._opacities = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(GradientModifier.prototype, \"offsets\", {\r\n        /**\r\n         * @return Offsets\r\n         */\r\n        get: function () {\r\n            return this._offsets;\r\n        },\r\n        /**\r\n         * An array of relative position (0-1) for each step.\r\n         *\r\n         * If not set, all steps will be of equal relative length.\r\n         *\r\n         * @param value  Offsets\r\n         */\r\n        set: function (value) {\r\n            this._offsets = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Modifies the color based on step setting.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Source color\r\n     * @return A gradient that matches set modification rules\r\n     */\r\n    GradientModifier.prototype.modify = function (value) {\r\n        // Clear current gradient\r\n        this.gradient.clear();\r\n        // Get step count\r\n        var count = 0;\r\n        if (this.opacities) {\r\n            count = $math.max(count, this.opacities.length);\r\n        }\r\n        if (this.lightnesses) {\r\n            count = $math.max(count, this.lightnesses.length);\r\n        }\r\n        if (this.brightnesses) {\r\n            count = $math.max(count, this.brightnesses.length);\r\n        }\r\n        // Init step values\r\n        var opacity = 1, lightness, brightness;\r\n        // Apply steps\r\n        for (var i = 0; i < count; i++) {\r\n            // Take base color\r\n            var color = value;\r\n            // Check if there are any parameters for this step\r\n            if (this.opacities && $type.isNumber(this.opacities[i])) {\r\n                opacity = this.opacities[i];\r\n            }\r\n            if (this.lightnesses && $type.isNumber(this.lightnesses[i])) {\r\n                lightness = this.lightnesses[i];\r\n                brightness = undefined;\r\n            }\r\n            if (this.brightnesses && $type.isNumber(this.brightnesses[i])) {\r\n                brightness = this.brightnesses[i];\r\n                lightness = undefined;\r\n            }\r\n            // Check if we need to brighten/lighten color\r\n            if ($type.isNumber(brightness)) {\r\n                color = value.brighten(this.brightnesses[i]);\r\n            }\r\n            else if ($type.isNumber(lightness)) {\r\n                color = value.lighten(this.lightnesses[i]);\r\n            }\r\n            // Get offset (it's OK if it's undefined)\r\n            var offset = this.offsets[i];\r\n            // Apply step\r\n            this.gradient.addColor(color, opacity, offset);\r\n        }\r\n        return this.gradient;\r\n    };\r\n    GradientModifier.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this._offsets = source.offsets;\r\n        this._brightnesses = source.brightnesses;\r\n        this._lightnesses = source.lightnesses;\r\n        this._opacities = source.opacities;\r\n    };\r\n    return GradientModifier;\r\n}(ColorModifier));\r\nexport { GradientModifier };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GradientModifier\"] = GradientModifier;\r\n", "import { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LinearGradient } from \"./LinearGradient\";\r\nimport { GradientModifier } from \"./GradientModifier\";\r\nimport { registry } from \"../../Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * This class can be used to modify linear gradient steps, changing visual\r\n * properties like lightness, brightness, opacity of each set.\r\n *\r\n * It can also set offsets for each gradient step.\r\n *\r\n * E.g. if I want to fill a columns in a column series to be a solid fill from\r\n * top to 80% of height, then gradually fades out, I can use the following\r\n * gradient modifier as a `fillModifier`:\r\n *\r\n * ```TypeScript\r\n * let fillModifier = new am4core.LinearGradientModifier();\r\n * fillModifier.opacities = [1, 1, 0];\r\n * fillModifier.offsets = [0, 0.8, 1];\r\n * columnSeries.columns.template.fillModifier = fillModifier;\r\n * ```\r\n * ```JavaScript\r\n * var fillModifier = new am4core.LinearGradientModifier();\r\n * fillModifier.opacities = [1, 1, 0];\r\n * fillModifier.offsets = [0, 0.8, 1];\r\n * columnSeries.columns.template.fillModifier = fillModifier;\r\n * ```\r\n * ```JSON\r\n * \"series\": [{\r\n *   \"type\": \"ColumnSeries\",\r\n *   \"columns\": {\r\n *     \"fillModifier\": {\r\n *       \"type\": \"LinearGradientModifier\",\r\n *       \"opacities\": [1, 1, 0],\r\n *       \"offsets\": [0, 0.8, 1]\r\n *     }\r\n *   }\r\n * }]\r\n * ```\r\n */\r\nvar LinearGradientModifier = /** @class */ (function (_super) {\r\n    __extends(LinearGradientModifier, _super);\r\n    /**\r\n     * Constructor.\r\n     */\r\n    function LinearGradientModifier() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"LinearGradientModifier\";\r\n        _this.gradient = new LinearGradient();\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    LinearGradientModifier.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.gradient = source.gradient.clone();\r\n    };\r\n    return LinearGradientModifier;\r\n}(GradientModifier));\r\nexport { LinearGradientModifier };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LinearGradientModifier\"] = LinearGradientModifier;\r\n", "/**\r\n * Cone module.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../../Container\";\r\nimport { Sprite, visualProperties } from \"../../Sprite\";\r\nimport { Ellipse } from \"../../elements/Ellipse\";\r\nimport { LinearGradientModifier } from \"../../rendering/fills/LinearGradientModifier\";\r\nimport { percent } from \"../../utils/Percent\";\r\nimport * as $object from \"../../utils/Object\";\r\nimport * as $path from \"../../rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Builds a round cone/cylinder.\r\n *\r\n * @see {@link IConeEvents} for a list of available events\r\n * @see {@link IConeAdapters} for a list of available Adapters\r\n */\r\nvar Cone = /** @class */ (function (_super) {\r\n    __extends(Cone, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Cone() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Cone\";\r\n        _this.angle = 30;\r\n        _this.radius = percent(100);\r\n        _this.topRadius = percent(100);\r\n        _this.top = _this.createChild(Ellipse);\r\n        _this.top.shouldClone = false;\r\n        _this.bottom = _this.createChild(Ellipse);\r\n        _this.bottom.shouldClone = false;\r\n        _this.body = _this.createChild(Sprite);\r\n        _this.body.shouldClone = false;\r\n        _this.body.setElement(_this.paper.add(\"path\"));\r\n        _this.layout = \"none\";\r\n        _this.bodyFillModifier = new LinearGradientModifier();\r\n        _this.bodyFillModifier.lightnesses = [0, -0.25, 0];\r\n        _this.body.fillModifier = _this.bodyFillModifier;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Cone.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        $object.copyProperties(this, this.top, visualProperties);\r\n        $object.copyProperties(this, this.bottom, visualProperties);\r\n        $object.copyProperties(this, this.body, visualProperties);\r\n        var w = this.innerWidth;\r\n        var h = this.innerHeight;\r\n        var bottom = this.bottom;\r\n        var top = this.top;\r\n        var angle = this.angle;\r\n        var radiusBase;\r\n        var dx;\r\n        var dy;\r\n        if (this.orientation == \"horizontal\") {\r\n            radiusBase = h / 2;\r\n            bottom.y = h / 2;\r\n            bottom.x = 0;\r\n            top.y = h / 2;\r\n            top.x = w;\r\n            dx = (90 - angle) / 90;\r\n            dy = 0;\r\n            this.bodyFillModifier.gradient.rotation = 90;\r\n        }\r\n        else {\r\n            dx = 0;\r\n            dy = (90 - angle) / 90;\r\n            radiusBase = w / 2;\r\n            bottom.y = h;\r\n            bottom.x = w / 2;\r\n            top.x = w / 2;\r\n            this.bodyFillModifier.gradient.rotation = 0;\r\n        }\r\n        var radius = this.radius.value * radiusBase;\r\n        var topRadius = this.topRadius.value * radiusBase;\r\n        bottom.radius = radius - radius * dx;\r\n        bottom.radiusY = radius - radius * dy;\r\n        top.radius = topRadius - topRadius * dx;\r\n        top.radiusY = topRadius - topRadius * dy;\r\n        var path;\r\n        if (this.orientation == \"horizontal\") {\r\n            path = $path.moveTo({ x: 0, y: h / 2 - bottom.radiusY }) + $path.arcTo(-90, -180, bottom.radius, bottom.radiusY) + $path.lineTo({ x: w, y: h / 2 + top.radiusY }) + $path.arcTo(90, 180, top.radius, top.radiusY) + $path.closePath();\r\n        }\r\n        else {\r\n            path = $path.moveTo({ x: w / 2 - top.radius, y: 0 }) + $path.arcTo(180, -180, top.radius, top.radiusY) + $path.lineTo({ x: w / 2 + bottom.radius, y: h }) + $path.arcTo(0, 180, bottom.radius, bottom.radiusY) + $path.closePath();\r\n        }\r\n        this.body.path = path;\r\n    };\r\n    Object.defineProperty(Cone.prototype, \"angle\", {\r\n        /**\r\n         * @return Angle\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"angle\");\r\n        },\r\n        /**\r\n         * Angle of the point of view to the 3D element. (0-360)\r\n         *\r\n         * @default 30\r\n         * @param value  Angle\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"angle\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Cone.prototype, \"radius\", {\r\n        /**\r\n         * @return Bottom radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"radius\");\r\n        },\r\n        /**\r\n         * A relative radius of the cone's bottom (base).\r\n         *\r\n         * It is relevant to the inner width or height of the element.\r\n         *\r\n         * @default Percent(100)\r\n         * @param value  Bottom radius\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"radius\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Cone.prototype, \"topRadius\", {\r\n        /**\r\n         * @return Top radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"topRadius\");\r\n        },\r\n        /**\r\n         * A relative radius of the cone's top (tip).\r\n         *\r\n         * It is relevant to the inner width or height of the element.\r\n         *\r\n         * @default Percent(0)\r\n         * @param value  Top radius\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"topRadius\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Cone.prototype, \"orientation\", {\r\n        /**\r\n         * Orientation\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"orientation\");\r\n        },\r\n        /**\r\n         * Orientation of the cone\r\n         *\r\n         * @default \"vertical\"\r\n         * @param value  Orientation\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"orientation\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Cone;\r\n}(Container));\r\nexport { Cone };\r\n", "/**\r\n * Module for \"Lighten\" filter.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Filter } from \"./Filter\";\r\nimport { registry } from \"../../Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a \"Lighten\" filter.\r\n */\r\nvar LightenFilter = /** @class */ (function (_super) {\r\n    __extends(LightenFilter, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function LightenFilter() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"LightenFilter\";\r\n        // Create elements\r\n        // NOTE: we do not need to add each individual element to `_disposers`\r\n        // because `filterPrimitives` has an event handler which automatically adds\r\n        // anything added to it to `_disposers`\r\n        _this.feColorMatrix = _this.paper.add(\"feColorMatrix\");\r\n        _this.feColorMatrix.attr({ \"type\": \"matrix\" });\r\n        _this.filterPrimitives.push(_this.feColorMatrix);\r\n        // Set default properties\r\n        _this.lightness = 0;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(LightenFilter.prototype, \"lightness\", {\r\n        /**\r\n         * @return Lightness\r\n         */\r\n        get: function () {\r\n            return this.properties[\"lightness\"];\r\n        },\r\n        /**\r\n         * Lightness of the target colors.\r\n         *\r\n         * If `lightness` is a positive number, the filter will make all colors\r\n         * lighter.\r\n         *\r\n         * If `lightness` is negative, colors will be darkened.\r\n         *\r\n         * @param value  Lightness\r\n         */\r\n        set: function (value) {\r\n            this.properties[\"lightness\"] = value;\r\n            var v = value + 1;\r\n            this.feColorMatrix.attr({ \"values\": v + \" 0 0 0 0 0 \" + v + \" 0 0 0 0 0 \" + v + \" 0 0 0 0 0 1 0\" });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return LightenFilter;\r\n}(Filter));\r\nexport { LightenFilter };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LightenFilter\"] = LightenFilter;\r\n", "/**\r\n * Creates a 3D rectangle.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../../Container\";\r\nimport { Sprite } from \"../../Sprite\";\r\nimport * as $math from \"../../utils/Math\";\r\nimport * as $path from \"../../rendering/Path\";\r\nimport { Color, color, toColor } from \"../../utils/Color\";\r\nimport { RadialGradient } from \"../../rendering/fills/RadialGradient\";\r\nimport { LinearGradient } from \"../../rendering/fills/LinearGradient\";\r\nimport { LightenFilter } from \"../../rendering/filters/LightenFilter\";\r\nimport * as $type from \"../../utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Builds a 3D rectangle\r\n * @see {@link IRectangle3DEvents} for a list of available events\r\n * @see {@link IRectangle3DAdapters} for a list of available Adapters\r\n */\r\nvar Rectangle3D = /** @class */ (function (_super) {\r\n    __extends(Rectangle3D, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Rectangle3D() {\r\n        var _this = _super.call(this) || this;\r\n        _this.angle = 30;\r\n        _this.depth = 30;\r\n        _this.className = \"Rectangle3D\";\r\n        _this.layout = \"none\";\r\n        var sideBack = _this.createChild(Sprite);\r\n        sideBack.shouldClone = false;\r\n        sideBack.setElement(_this.paper.add(\"path\"));\r\n        sideBack.isMeasured = false;\r\n        _this.sideBack = sideBack;\r\n        _this._disposers.push(_this.sideBack);\r\n        var sideBottom = _this.createChild(Sprite);\r\n        sideBottom.shouldClone = false;\r\n        sideBottom.setElement(_this.paper.add(\"path\"));\r\n        sideBottom.isMeasured = false;\r\n        _this.sideBottom = sideBottom;\r\n        _this._disposers.push(_this.sideBottom);\r\n        var sideLeft = _this.createChild(Sprite);\r\n        sideLeft.shouldClone = false;\r\n        sideLeft.setElement(_this.paper.add(\"path\"));\r\n        sideLeft.isMeasured = false;\r\n        _this.sideLeft = sideLeft;\r\n        _this._disposers.push(_this.sideLeft);\r\n        var sideRight = _this.createChild(Sprite);\r\n        sideRight.shouldClone = false;\r\n        sideRight.setElement(_this.paper.add(\"path\"));\r\n        sideRight.isMeasured = false;\r\n        _this.sideRight = sideRight;\r\n        _this._disposers.push(_this.sideRight);\r\n        var sideTop = _this.createChild(Sprite);\r\n        sideTop.shouldClone = false;\r\n        sideTop.setElement(_this.paper.add(\"path\"));\r\n        sideTop.isMeasured = false;\r\n        _this.sideTop = sideTop;\r\n        _this._disposers.push(_this.sideTop);\r\n        var sideFront = _this.createChild(Sprite);\r\n        sideFront.shouldClone = false;\r\n        sideFront.setElement(_this.paper.add(\"path\"));\r\n        sideFront.isMeasured = false;\r\n        _this.sideFront = sideFront;\r\n        _this._disposers.push(_this.sideFront);\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Rectangle3D.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        var w = this.innerWidth;\r\n        var h = this.innerHeight;\r\n        var depth = this.depth;\r\n        var angle = this.angle;\r\n        var sin = $math.sin(angle);\r\n        var cos = $math.cos(angle);\r\n        var a = { x: 0, y: 0 };\r\n        var b = { x: w, y: 0 };\r\n        var c = { x: w, y: h };\r\n        var d = { x: 0, y: h };\r\n        var ah = { x: depth * cos, y: -depth * sin };\r\n        var bh = { x: depth * cos + w, y: -depth * sin };\r\n        var ch = { x: depth * cos + w, y: -depth * sin + h };\r\n        var dh = { x: depth * cos, y: -depth * sin + h };\r\n        this.sideFront.path = $path.moveTo(a) + $path.lineTo(b) + $path.lineTo(c) + $path.lineTo(d) + $path.closePath();\r\n        this.sideBack.path = $path.moveTo(ah) + $path.lineTo(bh) + $path.lineTo(ch) + $path.lineTo(dh) + $path.closePath();\r\n        this.sideLeft.path = $path.moveTo(a) + $path.lineTo(ah) + $path.lineTo(dh) + $path.lineTo(d) + $path.closePath();\r\n        this.sideRight.path = $path.moveTo(b) + $path.lineTo(bh) + $path.lineTo(ch) + $path.lineTo(c) + $path.closePath();\r\n        this.sideBottom.path = $path.moveTo(d) + $path.lineTo(dh) + $path.lineTo(ch) + $path.lineTo(c) + $path.closePath();\r\n        this.sideTop.path = $path.moveTo(a) + $path.lineTo(ah) + $path.lineTo(bh) + $path.lineTo(b) + $path.closePath();\r\n    };\r\n    Object.defineProperty(Rectangle3D.prototype, \"depth\", {\r\n        /**\r\n         * @return Depth (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"depth\");\r\n        },\r\n        /**\r\n         * Depth (Z dimension) of the 3D rectangle in pixels.\r\n         *\r\n         * @default 30\r\n         * @param value  Depth (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"depth\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Rectangle3D.prototype, \"angle\", {\r\n        /**\r\n         * @return Angle\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"angle\");\r\n        },\r\n        /**\r\n         * Angle of the point of view to the 3D element. (0-360)\r\n         *\r\n         * @default 30\r\n         * @param value  Angle\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"angle\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets actual `fill` property on the SVG element, including applicable color\r\n     * modifiers.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Fill\r\n     */\r\n    Rectangle3D.prototype.setFill = function (value) {\r\n        _super.prototype.setFill.call(this, value);\r\n        if (!$type.isObject(value) || \"r\" in value) {\r\n            value = toColor(value);\r\n        }\r\n        var colorStr;\r\n        if (value instanceof Color) {\r\n            colorStr = value.hex;\r\n        }\r\n        else if (value instanceof LinearGradient || value instanceof RadialGradient) {\r\n            colorStr = value.stops.getIndex(0).color.hex;\r\n        }\r\n        else {\r\n            var filter = new LightenFilter();\r\n            filter.lightness = -0.2;\r\n            this.sideBack.filters.push(filter);\r\n            var filter2 = filter.clone();\r\n            filter2.lightness = -0.4;\r\n            this.sideLeft.filters.push(filter2);\r\n            var filter3 = filter.clone();\r\n            filter3.lightness = -0.2;\r\n            this.sideRight.filters.push(filter3);\r\n            var filter4 = filter.clone();\r\n            filter4.lightness = -0.1;\r\n            this.sideTop.filters.push(filter4);\r\n            var filter5 = filter.clone();\r\n            filter5.lightness = -0.5;\r\n            this.sideBottom.filters.push(filter5);\r\n        }\r\n        if (colorStr) {\r\n            this.sideBack.fill = color(colorStr).lighten(-0.2);\r\n            this.sideLeft.fill = color(colorStr).lighten(-0.4);\r\n            this.sideRight.fill = color(colorStr).lighten(-0.2);\r\n            this.sideTop.fill = color(colorStr).lighten(-0.1);\r\n            this.sideBottom.fill = color(colorStr).lighten(-0.5);\r\n        }\r\n    };\r\n    /**\r\n     * Copies all properties and related data from a different instance of Rectangle3D.\r\n     *\r\n     * @param source Source Rectangle3D\r\n     */\r\n    Rectangle3D.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.sideBack.copyFrom(source.sideBack);\r\n        this.sideLeft.copyFrom(source.sideLeft);\r\n        this.sideRight.copyFrom(source.sideRight);\r\n        this.sideTop.copyFrom(source.sideTop);\r\n        this.sideBottom.copyFrom(source.sideBottom);\r\n    };\r\n    return Rectangle3D;\r\n}(Container));\r\nexport { Rectangle3D };\r\n", "/**\r\n * 3D slice module\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Slice } from \"../Slice\";\r\nimport { Sprite } from \"../../Sprite\";\r\nimport * as $math from \"../../utils/Math\";\r\nimport * as $path from \"../../rendering/Path\";\r\nimport * as $type from \"../../utils/Type\";\r\nimport { Color, color } from \"../../utils/Color\";\r\nimport { RadialGradient } from \"../../rendering/fills/RadialGradient\";\r\nimport { LinearGradient } from \"../../rendering/fills/LinearGradient\";\r\nimport { LightenFilter } from \"../../rendering/filters/LightenFilter\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Used to draw a 3D slice of a Pie chart.\r\n *\r\n * @see {@link ISlice3DEvents} for a list of available events\r\n * @see {@link ISlice3DAdapters} for a list of available Adapters\r\n */\r\nvar Slice3D = /** @class */ (function (_super) {\r\n    __extends(Slice3D, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Slice3D() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"Slice3D\";\r\n        _this.layout = \"none\";\r\n        // Create edge container\r\n        var edge = _this.createChild(Sprite);\r\n        _this.edge = edge;\r\n        edge.shouldClone = false;\r\n        edge.isMeasured = false;\r\n        edge.toBack();\r\n        // Set defaults\r\n        _this.angle = 30;\r\n        _this.depth = 20;\r\n        // Create side A element\r\n        var sideA = _this.createChild(Sprite);\r\n        _this.sideA = sideA;\r\n        sideA.shouldClone = false;\r\n        sideA.isMeasured = false;\r\n        //sideA.setElement(this.paper.add(\"path\"));\r\n        //sideA.strokeOpacity = 0;\r\n        // Crate side B element\r\n        var sideB = _this.createChild(Sprite);\r\n        _this.sideB = sideB;\r\n        sideB.shouldClone = false;\r\n        sideB.isMeasured = false;\r\n        //sideB.setElement(this.paper.add(\"path\"));\r\n        //sideB.strokeOpacity = 0;\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Sets actual `fill` property on the SVG element, including applicable color\r\n     * modifiers.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Fill\r\n     */\r\n    Slice3D.prototype.setFill = function (value) {\r\n        _super.prototype.setFill.call(this, value);\r\n        var colorStr;\r\n        if (value instanceof Color) {\r\n            colorStr = value.hex;\r\n        }\r\n        else if (value instanceof LinearGradient || value instanceof RadialGradient) {\r\n            colorStr = value.stops.getIndex(0).color.hex;\r\n        }\r\n        else {\r\n            var filter = new LightenFilter();\r\n            filter.lightness = -0.25;\r\n            this.edge.filters.push(filter);\r\n            this.sideA.filters.push(filter.clone());\r\n            this.sideB.filters.push(filter.clone());\r\n        }\r\n        if (colorStr) {\r\n            var edgeFill = color(colorStr).lighten(-0.25);\r\n            this.edge.fill = edgeFill;\r\n            this.sideA.fill = edgeFill;\r\n            this.sideB.fill = edgeFill;\r\n            this.edge.stroke = edgeFill;\r\n            this.sideA.stroke = edgeFill;\r\n            this.sideB.stroke = edgeFill;\r\n        }\r\n    };\r\n    /**\r\n     * Draws the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Slice3D.prototype.draw = function () {\r\n        this.cornerRadius = 0;\r\n        this.innerCornerRadius = 0;\r\n        _super.prototype.draw.call(this);\r\n        if (this.arc !== 0 && this.radius > 0 && this.depth > 0) {\r\n            this.sideB.show(0);\r\n            this.sideA.show(0);\r\n            this.edge.show(0);\r\n            var startAngle = this.startAngle;\r\n            var arc = this.arc;\r\n            var innerRadius = this.pixelInnerRadius || 0;\r\n            var radiusY = this.radiusY || 0;\r\n            //let cornerRadius = this.cornerRadius || 0;\r\n            //let innerCornerRadius = this.innerCornerRadius;\r\n            var radius = this.radius;\r\n            // this is code duplicate with $path.arc. @todo to think how to avoid it\r\n            var endAngle = startAngle + arc;\r\n            //let crSin = $math.sin($math.min(arc, 45) / 2);\r\n            //innerCornerRadius = innerCornerRadius || cornerRadius;\r\n            var innerRadiusY = (radiusY / radius) * innerRadius;\r\n            //let cornerRadiusY = (radiusY / radius) * cornerRadius;\r\n            //let innerCornerRadiusY = (radiusY / radius) * innerCornerRadius;\r\n            //cornerRadius = $math.fitToRange(cornerRadius, 0, (radius - innerRadius) / 2);\r\n            //cornerRadiusY = $math.fitToRange(cornerRadiusY, 0, (radiusY - innerRadiusY) / 2);\r\n            //innerCornerRadius = $math.fitToRange(innerCornerRadius, 0, (radius - innerRadius) / 2);\r\n            //innerCornerRadiusY = $math.fitToRange(innerCornerRadiusY, 0, (radiusY - innerRadiusY) / 2);\r\n            //cornerRadius = $math.fitToRange(cornerRadius, 0, radius * crSin);\r\n            //cornerRadiusY = $math.fitToRange(cornerRadiusY, 0, radiusY * crSin);\r\n            //innerCornerRadius = $math.fitToRange(innerCornerRadius, 0, innerRadius * crSin);\r\n            //innerCornerRadiusY = $math.fitToRange(innerCornerRadiusY, 0, innerRadiusY * crSin);\r\n            //let crAngle: number = Math.asin(cornerRadius / radius / 2) * $math.DEGREES * 2;\r\n            //let crAngleY: number = Math.asin(cornerRadiusY / radiusY / 2) * $math.DEGREES * 2;\r\n            //if (innerRadius < innerCornerRadius) {\r\n            //\tinnerRadius = innerCornerRadius;\r\n            //}\r\n            //if (innerRadiusY < innerCornerRadiusY) {\r\n            //\tinnerRadiusY = innerCornerRadiusY;\r\n            //}\r\n            //let crInnerAngle: number = Math.asin(innerCornerRadius / innerRadius / 2) * $math.DEGREES * 2;\r\n            //let crInnerAngleY: number = Math.asin(innerCornerRadiusY / innerRadiusY / 2) * $math.DEGREES * 2;\r\n            //if (!$type.isNumber(crInnerAngle)) {\r\n            //\tcrInnerAngle = 0;\r\n            //}\r\n            //if (!$type.isNumber(crInnerAngleY)) {\r\n            //\tcrInnerAngleY = 0;\r\n            //}\r\n            //let middleAngle = startAngle + arc / 2;\r\n            //let mPoint = { x: $math.round($math.cos(middleAngle) * innerRadius, 4), y: $math.round($math.sin(middleAngle) * innerRadiusY, 4) };\r\n            var a0 = { x: $math.cos(startAngle) * (innerRadius), y: $math.sin(startAngle) * (innerRadiusY) };\r\n            var b0 = { x: $math.cos(startAngle) * (radius), y: $math.sin(startAngle) * (radiusY) };\r\n            var c0 = { x: $math.cos(endAngle) * (radius), y: $math.sin(endAngle) * (radiusY) };\r\n            var d0 = { x: $math.cos(endAngle) * (innerRadius), y: $math.sin(endAngle) * (innerRadiusY) };\r\n            // end of duplicate\r\n            var h = this.depth;\r\n            var ah = { x: a0.x, y: a0.y - h };\r\n            var bh = { x: b0.x, y: b0.y - h };\r\n            var ch = { x: c0.x, y: c0.y - h };\r\n            var dh = { x: d0.x, y: d0.y - h };\r\n            var edgePath = \"\";\r\n            var count = Math.ceil(arc / 5);\r\n            var step = arc / count;\r\n            var mangle = startAngle;\r\n            var prevPoint = bh;\r\n            for (var i = 0; i < count; i++) {\r\n                mangle += step;\r\n                if (mangle > 0 && mangle < 180) {\r\n                    edgePath += $path.moveTo(prevPoint);\r\n                    var pp = { x: $math.cos(mangle) * (radius), y: $math.sin(mangle) * (radiusY) - h };\r\n                    edgePath += $path.lineTo({ x: prevPoint.x, y: prevPoint.y + h });\r\n                    edgePath += $path.arcToPoint({ x: pp.x, y: pp.y + h }, radius, radiusY, true);\r\n                    edgePath += $path.lineTo(pp);\r\n                    edgePath += $path.arcToPoint(prevPoint, radius, radiusY);\r\n                    edgePath += \"z\";\r\n                    prevPoint = pp;\r\n                }\r\n                else {\r\n                    edgePath += $path.moveTo(prevPoint);\r\n                    var pp = { x: $math.cos(mangle) * (radius), y: $math.sin(mangle) * (radiusY) - h };\r\n                    edgePath += $path.arcToPoint(pp, radius, radiusY, true);\r\n                    edgePath += $path.lineTo({ x: pp.x, y: pp.y + h });\r\n                    edgePath += $path.arcToPoint({ x: prevPoint.x, y: prevPoint.y + h }, radius, radiusY);\r\n                    edgePath += $path.lineTo(prevPoint);\r\n                    edgePath += \"z\";\r\n                    prevPoint = pp;\r\n                }\r\n            }\r\n            prevPoint = ah;\r\n            mangle = startAngle;\r\n            for (var i = 0; i < count; i++) {\r\n                mangle += step;\r\n                if (mangle > 0 && mangle < 180) {\r\n                    edgePath += $path.moveTo(prevPoint);\r\n                    var pp = { x: $math.cos(mangle) * (innerRadius), y: $math.sin(mangle) * (innerRadiusY) - h };\r\n                    edgePath += $path.lineTo({ x: prevPoint.x, y: prevPoint.y + h });\r\n                    edgePath += $path.arcToPoint({ x: pp.x, y: pp.y + h }, innerRadius, innerRadiusY, true);\r\n                    edgePath += $path.lineTo(pp);\r\n                    edgePath += $path.arcToPoint(prevPoint, innerRadius, innerRadiusY);\r\n                    edgePath += \"z\";\r\n                    prevPoint = pp;\r\n                }\r\n                else {\r\n                    edgePath += $path.moveTo(prevPoint);\r\n                    var pp = { x: $math.cos(mangle) * (innerRadius), y: $math.sin(mangle) * (innerRadiusY) - h };\r\n                    edgePath += $path.arcToPoint(pp, innerRadius, innerRadiusY, true);\r\n                    edgePath += $path.lineTo({ x: pp.x, y: pp.y + h });\r\n                    edgePath += $path.arcToPoint({ x: prevPoint.x, y: prevPoint.y + h }, innerRadius, innerRadiusY);\r\n                    edgePath += $path.lineTo(prevPoint);\r\n                    edgePath += \"z\";\r\n                    prevPoint = pp;\r\n                }\r\n            }\r\n            this.edge.path = edgePath;\r\n            /*\r\n                        a0 = { x: $math.cos(startAngle) * (innerRadius + innerCornerRadius), y: $math.sin(startAngle) * (innerRadiusY + innerCornerRadiusY) };\r\n                        b0 = { x: $math.cos(startAngle) * (radius - cornerRadius), y: $math.sin(startAngle) * (radiusY - cornerRadiusY) };\r\n                        c0 = { x: $math.cos(endAngle) * (radius - cornerRadius), y: $math.sin(endAngle) * (radiusY - cornerRadiusY) };\r\n                        d0 = { x: $math.cos(endAngle) * (innerRadius + innerCornerRadius), y: $math.sin(endAngle) * (innerRadiusY + innerCornerRadiusY) };\r\n                        // end of duplicate\r\n            \r\n                        ah = { x: a0.x, y: a0.y - h };\r\n                        bh = { x: b0.x, y: b0.y - h };\r\n                        ch = { x: c0.x, y: c0.y - h };\r\n                        dh = { x: d0.x, y: d0.y - h };\r\n            */\r\n            this.sideA.path = $path.moveTo(a0) + $path.lineTo(b0) + $path.lineTo(bh) + $path.lineTo(ah) + $path.closePath();\r\n            this.sideB.path = $path.moveTo(c0) + $path.lineTo(d0) + $path.lineTo(dh) + $path.lineTo(ch) + $path.closePath();\r\n            if (this.startAngle < 90) {\r\n                this.sideA.toBack();\r\n            }\r\n            else {\r\n                this.sideA.toFront();\r\n            }\r\n            if (this.startAngle + this.arc > 90) {\r\n                this.sideB.toBack();\r\n            }\r\n            else {\r\n                this.sideB.toFront();\r\n            }\r\n            this.slice.dy = -h;\r\n        }\r\n        else {\r\n            this.sideA.hide(0);\r\n            this.sideB.hide(0);\r\n            this.edge.hide(0);\r\n        }\r\n    };\r\n    Object.defineProperty(Slice3D.prototype, \"depth\", {\r\n        /**\r\n         * @return Depth (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"depth\");\r\n        },\r\n        /**\r\n         * Depth (height) of the 3D slice in pixels.\r\n         *\r\n         * @default 20\r\n         * @param depth  Depth (px)\r\n         */\r\n        set: function (depth) {\r\n            this.setPropertyValue(\"depth\", depth, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Slice3D.prototype, \"angle\", {\r\n        /**\r\n         * @return Angle\r\n         */\r\n        get: function () {\r\n            var angle = this.getPropertyValue(\"angle\");\r\n            if (!$type.isNumber(angle)) {\r\n                angle = 0;\r\n            }\r\n            return angle;\r\n        },\r\n        /**\r\n         * Angle of the point of view to the 3D element. (0-360)\r\n         *\r\n         * @default 30\r\n         * @param value  Angle\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"angle\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Slice3D.prototype, \"radiusY\", {\r\n        /**\r\n         * @return Vertical radius (0-1)\r\n         */\r\n        get: function () {\r\n            var radiusY = this.getPropertyValue(\"radiusY\");\r\n            if (!$type.isNumber(radiusY)) {\r\n                radiusY = this.radius - this.radius * this.angle / 90;\r\n            }\r\n            return radiusY;\r\n        },\r\n        /**\r\n         * Vertical radius for creating skewed slices.\r\n         *\r\n         * This is relevant to `radius`, e.g. 0.5 will set vertical radius to half\r\n         * the `radius`.\r\n         *\r\n         * @param value Vertical radius (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"radiusY\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies all properties and related data from a different instance of Axis.\r\n     *\r\n     * @param source Source Axis\r\n     */\r\n    Slice3D.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.edge.copyFrom(source.edge);\r\n        this.sideA.copyFrom(source.sideA);\r\n        this.sideB.copyFrom(source.sideB);\r\n    };\r\n    return Slice3D;\r\n}(Slice));\r\nexport { Slice3D };\r\n", "import { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadialGradient } from \"./RadialGradient\";\r\nimport { GradientModifier } from \"./GradientModifier\";\r\nimport { registry } from \"../../Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * This class can be used to modify radial gradient steps, changing visual\r\n * properties like lightness, brightness, opacity of each set.\r\n *\r\n * It can also set offsets for each gradient step.\r\n *\r\n * E.g. if I want to fill a columns in a column series to be a solid fill from\r\n * top to 80% of height, then gradually fades out, I can use the following\r\n * gradient modifier as a `fillModifier`:\r\n *\r\n * ```TypeScript\r\n * let fillModifier = new am4core.LinearGradientModifier();\r\n * fillModifier.opacities = [1, 1, 0];\r\n * fillModifier.offsets = [0, 0.8, 1];\r\n * columnSeries.columns.template.fillModifier = fillModifier;\r\n * ```\r\n * ```JavaScript\r\n * var fillModifier = new am4core.LinearGradientModifier();\r\n * fillModifier.opacities = [1, 1, 0];\r\n * fillModifier.offsets = [0, 0.8, 1];\r\n * columnSeries.columns.template.fillModifier = fillModifier;\r\n * ```\r\n * ```JSON\r\n * \"series\": [{\r\n *   \"type\": \"ColumnSeries\",\r\n *   \"columns\": {\r\n *     \"fillModifier\": {\r\n *       \"type\": \"LinearGradientModifier\",\r\n *       \"opacities\": [1, 1, 0],\r\n *       \"offsets\": [0, 0.8, 1]\r\n *     }\r\n *   }\r\n * }]\r\n * ```\r\n */\r\nvar RadialGradientModifier = /** @class */ (function (_super) {\r\n    __extends(RadialGradientModifier, _super);\r\n    /**\r\n     * Constructor.\r\n     */\r\n    function RadialGradientModifier() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"RadialGradientModifier\";\r\n        _this.gradient = new RadialGradient();\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    RadialGradientModifier.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.gradient = source.gradient.clone();\r\n    };\r\n    return RadialGradientModifier;\r\n}(GradientModifier));\r\nexport { RadialGradientModifier };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadialGradientModifier\"] = RadialGradientModifier;\r\n", "import { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Pattern } from \"./Pattern\";\r\nimport { registry } from \"../../Registry\";\r\nimport * as $path from \"../../rendering/Path\";\r\n;\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Line pattern.\r\n */\r\nvar LinePattern = /** @class */ (function (_super) {\r\n    __extends(LinePattern, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function LinePattern() {\r\n        var _this = _super.call(this) || this;\r\n        _this.properties[\"gap\"] = 0;\r\n        _this._line = _this.paper.add(\"path\");\r\n        _this.addElement(_this._line);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the pattern.\r\n     */\r\n    LinePattern.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        if (Math.round(this.rotation / 90) != this.rotation / 90) {\r\n            this.properties[\"shapeRendering\"] = \"auto\";\r\n        }\r\n        if (this._line) {\r\n            var w = this.width;\r\n            var h = this.height;\r\n            var path = \"\";\r\n            if (!this.gap) {\r\n                if (Math.round(this.rotation / 90) != this.rotation / 90) {\r\n                    path = $path.moveTo({ x: -w, y: h / 2 }) + $path.lineTo({ x: w * 2, y: h / 2 });\r\n                    this.properties[\"rotationX\"] = this.width / 2;\r\n                    this.properties[\"rotationY\"] = this.height / 2;\r\n                }\r\n                else {\r\n                    path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: w, y: 0 });\r\n                }\r\n            }\r\n            else {\r\n                var step = this.gap + this.strokeWidth;\r\n                var count = this.height / step;\r\n                for (var i = -count / 2; i < count * 1.5; i++) {\r\n                    if (Math.round(this.rotation / 90) != this.rotation / 90) {\r\n                        path += $path.moveTo({ x: -w, y: (i + 0.5) * step }) + $path.lineTo({ x: w * 2, y: (i + 0.5) * step });\r\n                        this.properties[\"rotationX\"] = this.width / 2;\r\n                        this.properties[\"rotationY\"] = this.height / 2;\r\n                    }\r\n                    else {\r\n                        path += $path.moveTo({ x: -w, y: i * step }) + $path.lineTo({ x: w * 2, y: i * step });\r\n                    }\r\n                }\r\n            }\r\n            this._line.attr({ \"d\": path });\r\n        }\r\n    };\r\n    Object.defineProperty(LinePattern.prototype, \"gap\", {\r\n        /**\r\n         * @return gap\r\n         */\r\n        get: function () {\r\n            return this.properties[\"gap\"];\r\n        },\r\n        /**\r\n         * Number of pixels between pattern lines.\r\n         *\r\n         * The pattern will automatically draw required number of lines to fill\r\n         * pattern area maintaining `gap` distance between them.\r\n         *\r\n         * 0 (zero) means only single line will be drawn.\r\n         *\r\n         * @default 0\r\n         * @since 4.7.7\r\n         */\r\n        set: function (value) {\r\n            this.properties[\"gap\"] = value;\r\n            this.draw();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return LinePattern;\r\n}(Pattern));\r\nexport { LinePattern };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LinePattern\"] = LinePattern;\r\n", "/**\r\n * Rectangular pattern module.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Pattern } from \"./Pattern\";\r\nimport { registry } from \"../../Registry\";\r\n;\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Circular pattern\r\n */\r\nvar CirclePattern = /** @class */ (function (_super) {\r\n    __extends(CirclePattern, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function CirclePattern() {\r\n        var _this = _super.call(this) || this;\r\n        _this.properties[\"radius\"] = 2;\r\n        _this._circle = _this.paper.add(\"circle\");\r\n        _this.addElement(_this._circle);\r\n        _this.shapeRendering = \"auto\";\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the circle element.\r\n     */\r\n    CirclePattern.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        if (this._circle) {\r\n            this._circle.attr({ \"r\": this.radius, \"cx\": this.width / 2, \"cy\": this.height / 2 });\r\n        }\r\n    };\r\n    Object.defineProperty(CirclePattern.prototype, \"radius\", {\r\n        /**\r\n         * @return Radius (px)\r\n         */\r\n        get: function () {\r\n            return this.properties[\"radius\"];\r\n        },\r\n        /**\r\n         * Circle radius in pixels.\r\n         *\r\n         * @param value Radius (px)\r\n         */\r\n        set: function (value) {\r\n            this.properties[\"radius\"] = value;\r\n            this.draw();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return CirclePattern;\r\n}(Pattern));\r\nexport { CirclePattern };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CirclePattern\"] = CirclePattern;\r\n", "/**\r\n * Rectangular pattern module.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Pattern } from \"./Pattern\";\r\nimport { registry } from \"../../Registry\";\r\n;\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Rectangular pattern\r\n */\r\nvar RectPattern = /** @class */ (function (_super) {\r\n    __extends(RectPattern, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function RectPattern() {\r\n        var _this = _super.call(this) || this;\r\n        _this.rectHeight = 1;\r\n        _this.rectWidth = 1;\r\n        _this._rect = _this.paper.add(\"rect\");\r\n        _this.addElement(_this._rect);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the rectangular element.\r\n     */\r\n    RectPattern.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        this.properties[\"rotationX\"] = this.width / 2;\r\n        this.properties[\"rotationY\"] = this.height / 2;\r\n        if (this._rect) {\r\n            this._rect.attr({ \"width\": this.rectWidth, \"height\": this.rectHeight, \"x\": (this.width - this.rectWidth) / 2, \"y\": (this.height - this.rectHeight) / 2 });\r\n        }\r\n    };\r\n    Object.defineProperty(RectPattern.prototype, \"rectWidth\", {\r\n        /**\r\n         * @return Width (px)\r\n         */\r\n        get: function () {\r\n            return this.properties[\"rectWidth\"];\r\n        },\r\n        /**\r\n         * Rectangle width in pixels.\r\n         *\r\n         * @param value Width (px)\r\n         */\r\n        set: function (value) {\r\n            this.properties[\"rectWidth\"] = value;\r\n            this.draw();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RectPattern.prototype, \"rectHeight\", {\r\n        /**\r\n         * @return Height (px)\r\n         */\r\n        get: function () {\r\n            return this.properties[\"rectHeight\"];\r\n        },\r\n        /**\r\n         * Rectangle height in pixels.\r\n         *\r\n         * @param value Height (px)\r\n         */\r\n        set: function (value) {\r\n            this.properties[\"rectHeight\"] = value;\r\n            this.draw();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return RectPattern;\r\n}(Pattern));\r\nexport { RectPattern };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RectPattern\"] = RectPattern;\r\n", "/**\r\n * Module for \"Colorize\" filter.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Filter } from \"./Filter\";\r\nimport { registry } from \"../../Registry\";\r\n;\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a \"Colorize\" filter.\r\n */\r\nvar ColorizeFilter = /** @class */ (function (_super) {\r\n    __extends(ColorizeFilter, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ColorizeFilter() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"ColorizeFilter\";\r\n        // Create elements\r\n        // NOTE: we do not need to add each individual element to `_disposers`\r\n        // because `filterPrimitives` has an event handler which automatically adds\r\n        // anything added to it to `_disposers`\r\n        _this.feColorMatrix = _this.paper.add(\"feColorMatrix\");\r\n        _this.feColorMatrix.attr({ \"type\": \"matrix\" });\r\n        //this.feColorMatrix.setAttribute(\"in\", \"SourceAlpha\");\r\n        _this.filterPrimitives.push(_this.feColorMatrix);\r\n        // Set default properties\r\n        _this.intensity = 1;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * (Re)applies colors to the already existing filter by modifying filyer's\r\n     * color matrix element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    ColorizeFilter.prototype.applyFilter = function () {\r\n        var i = this.intensity;\r\n        var ii = 1 - i;\r\n        var r;\r\n        var g;\r\n        var b;\r\n        var color = this.color;\r\n        if (color && color.rgb) {\r\n            r = color.rgb.r / 255 * i;\r\n            g = color.rgb.g / 255 * i;\r\n            b = color.rgb.b / 255 * i;\r\n        }\r\n        else {\r\n            r = 0;\r\n            g = 0;\r\n            b = 0;\r\n        }\r\n        this.feColorMatrix.attr({ \"values\": ii + \" 0 0 0 \" + r + \" 0 \" + ii + \" 0 0 \" + g + \" 0 0 \" + ii + \" 0 \" + b + \" 0 0 0 1 0\" });\r\n    };\r\n    Object.defineProperty(ColorizeFilter.prototype, \"color\", {\r\n        /**\r\n         * @return Color\r\n         */\r\n        get: function () {\r\n            return this.properties[\"color\"];\r\n        },\r\n        /**\r\n         * Target color to apply to the element.\r\n         *\r\n         * Depending on the `intensity`, all colors of the target element will steer\r\n         * towards this color.\r\n         *\r\n         * E.g. setting to `am4core.color(\"greener\")` will make all colors greener.\r\n         *\r\n         * @param value  Color\r\n         */\r\n        set: function (value) {\r\n            this.properties[\"color\"] = value;\r\n            this.applyFilter();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ColorizeFilter.prototype, \"intensity\", {\r\n        /**\r\n         * @return Intensity (0-1)\r\n         */\r\n        get: function () {\r\n            return this.properties.intensity;\r\n        },\r\n        /**\r\n         * Intensity of the color (0-1).\r\n         *\r\n         * The bigger the number the more of a `color` target's colors will become.\r\n         *\r\n         * 0 means the colors will remain as they are.\r\n         * 1 means all colors will become the target `color`.\r\n         *\r\n         * @default 1\r\n         * @param value  Intensity (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.properties.intensity = value;\r\n            this.applyFilter();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return ColorizeFilter;\r\n}(Filter));\r\nexport { ColorizeFilter };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColorizeFilter\"] = ColorizeFilter;\r\n", "/**\r\n * Module for \"Desaturate\" filter.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Filter } from \"./Filter\";\r\nimport { registry } from \"../../Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creats a \"Desaturate\" filter\r\n */\r\nvar DesaturateFilter = /** @class */ (function (_super) {\r\n    __extends(DesaturateFilter, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function DesaturateFilter() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"DesaturateFilter\";\r\n        // Create elements\r\n        // NOTE: we do not need to add each individual element to `_disposers`\r\n        // because `filterPrimitives` has an event handler which automatically adds\r\n        // anything added to it to `_disposers`\r\n        _this.feColorMatrix = _this.paper.add(\"feColorMatrix\");\r\n        _this.feColorMatrix.attr({ \"type\": \"saturate\" });\r\n        _this.filterPrimitives.push(_this.feColorMatrix);\r\n        // Set default properties\r\n        _this.width = 120;\r\n        _this.height = 120;\r\n        _this.saturation = 0;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(DesaturateFilter.prototype, \"saturation\", {\r\n        /**\r\n         * @return Saturation (0-1)\r\n         */\r\n        get: function () {\r\n            return this.properties[\"saturation\"];\r\n        },\r\n        /**\r\n         * Saturation.\r\n         *\r\n         * 0 - completely desaturated.\r\n         * 1 - fully saturated (gray).\r\n         *\r\n         * @param value  Saturation (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.properties[\"saturation\"] = value;\r\n            this.feColorMatrix.attr({ \"values\": value.toString() });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return DesaturateFilter;\r\n}(Filter));\r\nexport { DesaturateFilter };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DesaturateFilter\"] = DesaturateFilter;\r\n", "/**\r\n * Module for \"Blur\" filter.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Filter } from \"./Filter\";\r\nimport { registry } from \"../../Registry\";\r\n;\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a \"Blur\" filter.\r\n */\r\nvar BlurFilter = /** @class */ (function (_super) {\r\n    __extends(BlurFilter, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function BlurFilter() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"BlurFilter\";\r\n        // Create elements\r\n        // NOTE: we do not need to add each individual element to `_disposers`\r\n        // because `filterPrimitives` has an event handler which automatically adds\r\n        // anything added to it to `_disposers`\r\n        _this.feGaussianBlur = _this.paper.add(\"feGaussianBlur\");\r\n        _this.feGaussianBlur.attr({ \"result\": \"blurOut\", \"in\": \"SourceGraphic\" });\r\n        _this.filterPrimitives.push(_this.feGaussianBlur);\r\n        // Set default properties\r\n        _this.width = 200;\r\n        _this.height = 200;\r\n        _this.blur = 1.5;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(BlurFilter.prototype, \"blur\", {\r\n        /**\r\n         * @return Blur\r\n         */\r\n        get: function () {\r\n            return this.properties.blur;\r\n        },\r\n        /**\r\n         * Blur value.\r\n         *\r\n         * The bigger the value, the blurrier the target element will become.\r\n         *\r\n         * @default 1.5\r\n         * @param value Blur\r\n         */\r\n        set: function (value) {\r\n            this.properties.blur = value;\r\n            this.feGaussianBlur.attr({ \"stdDeviation\": value / this.scale });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return BlurFilter;\r\n}(Filter));\r\nexport { BlurFilter };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"BlurFilter\"] = BlurFilter;\r\n", "/**\r\n * Module for \"Focus\" filter.\r\n */\r\nimport { __extends } from \"tslib\";\r\nimport { Filter } from \"./Filter\";\r\nimport { InterfaceColorSet } from \"../../utils/InterfaceColorSet\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a \"Focus\" filter.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/accessibility/} more about accessibility\r\n * @see {@link https://www.amcharts.com/docs/v4/tutorials/changing-appearance-of-focused-items/} cusomizing focus appearance\r\n */\r\nvar FocusFilter = /** @class */ (function (_super) {\r\n    __extends(FocusFilter, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function FocusFilter() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"FocusFilter\";\r\n        // Create elements\r\n        // NOTE: we do not need to add each individual element to `_disposers`\r\n        // because `filterPrimitives` has an event handler which automatically adds\r\n        // anything added to it to `_disposers`\r\n        _this.feFlood = _this.paper.add(\"feFlood\");\r\n        _this.feFlood.attr({ \"flood-color\": new InterfaceColorSet().getFor(\"primaryButtonHover\"), \"result\": \"base\" });\r\n        _this.filterPrimitives.push(_this.feFlood);\r\n        _this.feMorphology = _this.paper.add(\"feMorphology\");\r\n        _this.feMorphology.attr({ \"result\": \"bigger\", \"in\": \"SourceGraphic\", \"operator\": \"dilate\", \"radius\": \"2\" });\r\n        _this.filterPrimitives.push(_this.feMorphology);\r\n        _this.feColorMatrix = _this.paper.add(\"feColorMatrix\");\r\n        _this.feColorMatrix.attr({ \"result\": \"mask\", \"in\": \"bigger\", \"type\": \"matrix\", \"values\": \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0\" });\r\n        _this.filterPrimitives.push(_this.feColorMatrix);\r\n        _this.feComposite = _this.paper.add(\"feComposite\");\r\n        _this.feComposite.attr({ \"result\": \"drop\", \"in\": \"base\", \"in2\": \"mask\", \"operator\": \"in\" });\r\n        _this.filterPrimitives.push(_this.feComposite);\r\n        _this.feBlend = _this.paper.add(\"feBlend\");\r\n        _this.feBlend.attr({ \"in\": \"SourceGraphic\", \"in2\": \"drop\", \"mode\": \"normal\" });\r\n        _this.filterPrimitives.push(_this.feBlend);\r\n        // Set default properties\r\n        _this.width = 130;\r\n        _this.height = 130;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(FocusFilter.prototype, \"stroke\", {\r\n        /**\r\n         * @return Color\r\n         */\r\n        get: function () {\r\n            return this.properties[\"stroke\"];\r\n        },\r\n        /**\r\n         * Stroke (outline) color.\r\n         *\r\n         * @param value  Color\r\n         */\r\n        set: function (value) {\r\n            this.properties[\"stroke\"] = value;\r\n            this.feFlood.attr({ \"flood-color\": value });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FocusFilter.prototype, \"strokeWidth\", {\r\n        /**\r\n         * @return Outline thickness (px)\r\n         */\r\n        get: function () {\r\n            return this.properties[\"strokeWidth\"];\r\n        },\r\n        /**\r\n         * Stroke (outline) thickness in pixels.\r\n         *\r\n         * @param value  Outline thickness (px)\r\n         */\r\n        set: function (value) {\r\n            this.properties[\"strokeWidth\"] = value;\r\n            this.feMorphology.attr({ \"radius\": value });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FocusFilter.prototype, \"opacity\", {\r\n        /**\r\n         * @return Outline opacity (0-1)\r\n         */\r\n        get: function () {\r\n            return this.properties[\"opacity\"];\r\n        },\r\n        /**\r\n         * Opacity of the outline. (0-1)\r\n         *\r\n         * @param value  Outline opacity (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.properties[\"opacity\"] = value;\r\n            this.feColorMatrix.attr({ \"values\": \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \" + value + \" 0\" });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets filter's target element.\r\n     *\r\n     * In addition it also disables built-in focus outline on element this\r\n     * filter is applied to.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Element filter is being attached to\r\n     */\r\n    FocusFilter.prototype.setSprite = function (value) {\r\n        if (this._sprite && this._sprite != value) {\r\n            this._sprite.group.removeStyle(\"outline\");\r\n        }\r\n        value.group.addStyle({\r\n            \"outline\": \"none\"\r\n        });\r\n        _super.prototype.setSprite.call(this, value);\r\n    };\r\n    return FocusFilter;\r\n}(Filter));\r\nexport { FocusFilter };\r\n", "/**\r\n * This module contains PatternSet object definition\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"../Base\";\r\nimport { Color } from \"./Color\";\r\nimport { InterfaceColorSet } from \"./InterfaceColorSet\";\r\nimport { LinePattern } from \"../rendering/fills/LinePattern\";\r\nimport { RectPattern } from \"../rendering/fills/RectPattern\";\r\nimport { CirclePattern } from \"../rendering/fills/CirclePattern\";\r\nimport { registry } from \"../Registry\";\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines an interable list of distinctive patterns that can be used in\r\n * conjunction to colors to generate various fill patterns.\r\n *\r\n * @important\r\n * @since 4.7.5\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/colors/} for color-related info\r\n */\r\nvar PatternSet = /** @class */ (function (_super) {\r\n    __extends(PatternSet, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PatternSet() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Holds the list of the colors in this set. (preset or auto-generated)\r\n         */\r\n        _this._list = [];\r\n        /**\r\n         * Current step.\r\n         */\r\n        _this._currentStep = 0;\r\n        /**\r\n         * If set to non-zero value, the PatternSet will start iterating patterns from\r\n         * that particular index, not the first pattern in the list.\r\n         */\r\n        _this._startIndex = 0;\r\n        /**\r\n         * Current pass in cycle. Once all patterns in the list are iterated,\r\n         * iteration restarts from beginning and currentPass is incremented.\r\n         */\r\n        _this._currentPass = 0;\r\n        /**\r\n         * A base color. If there are no colors pre-set in the color list, ColorSet\r\n         * will use this color as a base when generating new ones, applying\r\n         * `stepOptions` and `passOptions` to this base color.\r\n         */\r\n        _this.baseColor = new Color({\r\n            r: 103,\r\n            g: 183,\r\n            b: 220\r\n        });\r\n        _this.className = \"PatternSet\";\r\n        // Set base color to be used for pattern elements\r\n        var interfaceColors = new InterfaceColorSet();\r\n        // Set default patterns\r\n        _this.list = [\r\n            _this.getLinePattern(1000, 45, 1, 6),\r\n            _this.getRectPattern(10, 0, 4),\r\n            _this.getLinePattern(1000, -45, 1, 6),\r\n            _this.getCirclePattern(11, 2, true),\r\n            _this.getLinePattern(6, 90, 1),\r\n            _this.getRectPattern(12, 45, 6, true),\r\n            _this.getLinePattern(6, 0, 1),\r\n            _this.getRectPattern(7, 0, 4),\r\n            _this.getLinePattern(1000, 45, 2, 3, \"4,2\"),\r\n            _this.getCirclePattern(9, 3, false),\r\n            _this.getLinePattern(1000, -45, 2, 3, \"4,2\"),\r\n            _this.getRectPattern(10, 45, Math.sqrt(50)),\r\n            _this.getLinePattern(1000, -45, 2, 1),\r\n            _this.getRectPattern(10, 0, 9),\r\n            _this.getLinePattern(1000, 45, 2, 1),\r\n            _this.getLinePattern(1000, 0, 3, 1),\r\n            _this.getRectPattern(10, 45, 10),\r\n            _this.getLinePattern(1000, 90, 3, 1)\r\n        ];\r\n        _this.baseColor = interfaceColors.getFor(\"stroke\");\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    PatternSet.prototype.getLinePattern = function (size, rotation, thickness, gap, strokeDashArray) {\r\n        var pattern = new LinePattern();\r\n        pattern.width = size;\r\n        pattern.height = size;\r\n        pattern.stroke = this.baseColor;\r\n        pattern.gap = gap;\r\n        pattern.strokeDasharray = strokeDashArray;\r\n        pattern.strokeWidth = thickness;\r\n        pattern.rotation = rotation;\r\n        return pattern;\r\n    };\r\n    PatternSet.prototype.getRectPattern = function (size, rotation, thickness, outline) {\r\n        var pattern = new RectPattern();\r\n        pattern.width = size;\r\n        pattern.height = size;\r\n        pattern.rectWidth = thickness;\r\n        pattern.rectHeight = thickness;\r\n        if (outline) {\r\n            pattern.stroke = this.baseColor;\r\n            pattern.strokeWidth = 1;\r\n            pattern.fillOpacity = 0;\r\n        }\r\n        else {\r\n            pattern.fill = this.baseColor;\r\n            pattern.strokeWidth = 0;\r\n        }\r\n        if (rotation != 0) {\r\n            pattern.shapeRendering = \"auto\";\r\n        }\r\n        pattern.rotation = rotation;\r\n        return pattern;\r\n    };\r\n    PatternSet.prototype.getCirclePattern = function (size, radius, outline) {\r\n        var pattern = new CirclePattern();\r\n        pattern.width = size;\r\n        pattern.height = size;\r\n        pattern.shapeRendering = \"auto\";\r\n        pattern.radius = radius;\r\n        if (outline) {\r\n            pattern.stroke = this.baseColor;\r\n            pattern.strokeWidth = 1;\r\n            pattern.fillOpacity = 0;\r\n        }\r\n        else {\r\n            pattern.fill = this.baseColor;\r\n            pattern.strokeWidth = 0;\r\n        }\r\n        return pattern;\r\n    };\r\n    Object.defineProperty(PatternSet.prototype, \"list\", {\r\n        /**\r\n         * @return Pattern list\r\n         */\r\n        get: function () {\r\n            return this._list;\r\n        },\r\n        /**\r\n         * List of pre-defined patterns to be used in set.\r\n         *\r\n         * @param value Pattern list\r\n         */\r\n        set: function (value) {\r\n            this._list = value;\r\n            this.reset();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns the next pattern in list.\r\n     *\r\n     * @return Pattern\r\n     */\r\n    PatternSet.prototype.next = function () {\r\n        var pattern = this.getIndex(this.currentStep);\r\n        this._currentStep++;\r\n        return pattern;\r\n    };\r\n    /**\r\n     * Returns a color at specific index in the list.\r\n     *\r\n     * @param  i  Index\r\n     * @return Pattern\r\n     */\r\n    PatternSet.prototype.getIndex = function (i) {\r\n        var pattern;\r\n        while (this.list.length <= i) {\r\n            this.generatePatterns();\r\n        }\r\n        pattern = this.list[i];\r\n        return pattern.clone();\r\n    };\r\n    /**\r\n     * Generates a new set of patterns.\r\n     */\r\n    PatternSet.prototype.generatePatterns = function () {\r\n        var count = this.list.length / (this._currentPass + 1);\r\n        this._currentPass++;\r\n        for (var i = 0; i < count; i++) {\r\n            this.list.push(this.list[i].clone());\r\n        }\r\n    };\r\n    /**\r\n     * Resets internal iterator.\r\n     *\r\n     * Calling `next()` after this will return the very first color in the color\r\n     * list, even if it was already returned before.\r\n     */\r\n    PatternSet.prototype.reset = function () {\r\n        this._currentStep = this._startIndex;\r\n    };\r\n    Object.defineProperty(PatternSet.prototype, \"currentStep\", {\r\n        /**\r\n         * @return Step\r\n         */\r\n        get: function () {\r\n            return this._currentStep;\r\n        },\r\n        /**\r\n         * Sets current color iteration. You can use this property to skip some\r\n         * colors from iteration. E.g. setting it to `10` will skip first ten\r\n         * colors.\r\n         *\r\n         * Please note that the number is zero-based.\r\n         *\r\n         * @param value  Step\r\n         */\r\n        set: function (value) {\r\n            this._currentStep = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PatternSet.prototype, \"startIndex\", {\r\n        /**\r\n         * @return Index\r\n         */\r\n        get: function () {\r\n            return this._startIndex;\r\n        },\r\n        /**\r\n         * If set to non-zero value, the ColorSet will start iterating colors from\r\n         * that particular index, not the first color in the list.\r\n         *\r\n         * @default 0\r\n         * @param  value  Index\r\n         */\r\n        set: function (value) {\r\n            this._startIndex = value;\r\n            this.reset();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param config  Config\r\n     */\r\n    PatternSet.prototype.processConfig = function (config) {\r\n        // if (config) {\r\n        // \t// Set up axis ranges\r\n        // \tif ($type.hasValue(config.list) && $type.isArray(config.list)) {\r\n        // \t\tfor (let i = 0, len = config.list.length; i < len; i++) {\r\n        // \t\t\tif (!(config.list[i] instanceof Color)) {\r\n        // \t\t\t\tconfig.list[i] = color(config.list[i]);\r\n        // \t\t\t}\r\n        // \t\t}\r\n        // \t}\r\n        // }\r\n        _super.prototype.processConfig.call(this, config);\r\n    };\r\n    return PatternSet;\r\n}(BaseObject));\r\nexport { PatternSet };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PatternSet\"] = PatternSet;\r\n", "/**\r\n * A plugin base class.\r\n */\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * This is a base class that provides core functionality for plugins.\r\n *\r\n * The easiest way to start off with a new plugin is to extend this class.\r\n *\r\n * It will provide all the mandatory functionality, such as disposers.\r\n *\r\n * @since 4.2.2\r\n */\r\nvar Plugin = /** @class */ (function () {\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Plugin() {\r\n        /**\r\n         * Is this object disposed?\r\n         */\r\n        this._disposed = false;\r\n        /**\r\n         * List of IDisposer which will be disposed when the BaseObject is disposed.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        this._disposers = [];\r\n        // Nothing to do here\r\n    }\r\n    /**\r\n     * Decorates series with required events and adapters used to hijack its\r\n     * data.\r\n     */\r\n    Plugin.prototype.init = function () {\r\n        // Does nothing\r\n        // Override it\r\n    };\r\n    /**\r\n     * Returns if this element is already disposed.\r\n     *\r\n     * @return Is disposed?\r\n     */\r\n    Plugin.prototype.isDisposed = function () {\r\n        return this._disposed;\r\n    };\r\n    /**\r\n     * Disposes this object and related stuff.\r\n     */\r\n    Plugin.prototype.dispose = function () {\r\n        if (!this._disposed) {\r\n            this._disposed = true;\r\n            var a = this._disposers;\r\n            this._disposers = null;\r\n            while (a.length !== 0) {\r\n                var disposer = a.shift();\r\n                disposer.dispose();\r\n            }\r\n        }\r\n    };\r\n    return Plugin;\r\n}());\r\nexport { Plugin };\r\n", "/**\r\n * AmChartsLogo module.\r\n *\r\n * AmChartsLogo shows amCharts logo for non-commercial users of a library.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../Container\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { Polyspline } from \"./Polyspline\";\r\nimport { color } from \"../utils/Color\";\r\nimport { LinearGradient } from \"../rendering/fills/LinearGradient\";\r\nimport { DesaturateFilter } from \"../rendering/filters/DesaturateFilter\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * A class used to draw and display progress indicator.\r\n *\r\n * @see {@link IAmChartsLogoEvents} for a list of available events\r\n * @see {@link IAmChartsLogoAdapters} for a list of available Adapters\r\n * @ignore Exclude from docs\r\n */\r\nvar AmChartsLogo = /** @class */ (function (_super) {\r\n    __extends(AmChartsLogo, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function AmChartsLogo() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"AmChartsLogo\";\r\n        _this.valign = \"bottom\";\r\n        var d = 0.3;\r\n        _this.opacity = 0.3;\r\n        _this.defaultState.properties.opacity = 0.4;\r\n        _this.url = \"https://www.amcharts.com/\";\r\n        _this.urlTarget = \"_blank\";\r\n        _this.showSystemTooltip = true;\r\n        _this.readerTitle = \"Chart created using amCharts library\";\r\n        _this.width = 220 * d;\r\n        _this.height = 70 * d;\r\n        _this.background.opacity = 0;\r\n        var aColor = color(\"#474758\");\r\n        if (new InterfaceColorSet().getFor(\"background\").alternative.hex == \"#ffffff\") {\r\n            aColor = color(\"#ffffff\");\r\n        }\r\n        var aGradient = new LinearGradient();\r\n        aGradient.addColor(aColor);\r\n        aGradient.addColor(aColor, 1, 0.75);\r\n        aGradient.addColor(color(\"#3cabff\"), 1, 0.755);\r\n        aGradient.rotation = -10;\r\n        var aStroke = aGradient;\r\n        var m = _this.createChild(Polyspline);\r\n        m.shouldClone = false;\r\n        m.isMeasured = false;\r\n        m.segments = [[{ x: 50 * d, y: 50 * d }, { x: 90 * d, y: 50 * d }, { x: 120 * d, y: 20 * d }, { x: 135 * d, y: 35 * d }, { x: 150 * d, y: 20 * d }, { x: 180 * d, y: 50 * d }, { x: 200 * d, y: 50 * d }]];\r\n        m.strokeWidth = 6 * d;\r\n        m.tensionX = 0.8;\r\n        m.tensionY = 1;\r\n        m.stroke = color(\"#3cabff\");\r\n        var a = _this.createChild(Polyspline);\r\n        a.shouldClone = false;\r\n        a.isMeasured = false;\r\n        a.segments = [[{ x: 20 * d, y: 50 * d }, { x: 50 * d, y: 50 * d }, { x: 90 * d, y: 12 * d }, { x: 133 * d, y: 50 * d }, { x: 170 * d, y: 50 * d }, { x: 200 * d, y: 50 * d }]];\r\n        a.strokeWidth = 6 * d;\r\n        a.tensionX = 0.75;\r\n        a.tensionY = 1;\r\n        a.stroke = aStroke;\r\n        _this._disposers.push(a);\r\n        var desaturateFilter = new DesaturateFilter();\r\n        _this.filters.push(desaturateFilter);\r\n        var desaturateFilterHover = new DesaturateFilter();\r\n        desaturateFilterHover.saturation = 1;\r\n        var hoverState = _this.states.create(\"hover\");\r\n        hoverState.properties.opacity = 1;\r\n        hoverState.filters.push(desaturateFilterHover);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return AmChartsLogo;\r\n}(Container));\r\nexport { AmChartsLogo };\r\n", "import { __read, __spread } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { system } from \"../System\";\r\nimport { registry } from \"../Registry\";\r\nimport { Container } from \"../Container\";\r\nimport { Component } from \"../Component\";\r\nimport { Paper } from \"../rendering/Paper\";\r\nimport { SVGContainer, svgContainers } from \"../rendering/SVGContainer\";\r\nimport { FocusFilter } from \"../rendering/filters/FocusFilter\";\r\nimport { Preloader } from \"../elements/Preloader\";\r\nimport { AmChartsLogo } from \"../elements/AmChartsLogo\";\r\nimport { Tooltip } from \"../elements/Tooltip\";\r\nimport { Disposer, MultiDisposer } from \"../utils/Disposer\";\r\nimport { percent } from \"./Percent\";\r\nimport { options } from \"../Options\";\r\nimport * as $array from \"./Array\";\r\nimport * as $type from \"./Type\";\r\nimport * as $dom from \"./DOM\";\r\nimport * as $utils from \"./Utils\";\r\nimport * as $log from \"./Log\";\r\n/**\r\n * ============================================================================\r\n * INSTANTIATION FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates all HTML and SVG containers needed for the chart instance, as well\r\n * as the new [[Sprite]] (as specified in `classType` parameter).\r\n *\r\n * @param htmlElement  A container to creat elements in\r\n * @param classType    A class definition of the new element to create\r\n * @return Newly-created Sprite object\r\n */\r\nfunction createChild(htmlElement, classType) {\r\n    var htmlContainer = $dom.getElement(htmlElement);\r\n    // If there's no container available yet, we create a fake one\r\n    var tmpContainer = false;\r\n    if (!htmlContainer) {\r\n        htmlContainer = document.createElement(\"div\");\r\n        htmlContainer.style.width = \"200px\";\r\n        htmlContainer.style.height = \"200px\";\r\n        htmlContainer.style.top = \"0\";\r\n        htmlContainer.style.left = \"0\";\r\n        htmlContainer.style.visibility = \"hidden\";\r\n        htmlContainer.style.position = \"absolute\";\r\n        document.body.appendChild(htmlContainer);\r\n        tmpContainer = true;\r\n    }\r\n    if (htmlContainer) {\r\n        htmlContainer.innerHTML = \"\";\r\n        //htmlContainer.style.overflow = \"hidden\";\r\n        var svgDiv_1 = new SVGContainer(htmlContainer);\r\n        var paper = new Paper(svgDiv_1.SVGContainer, \"svg-\" + (svgContainers.length - 1));\r\n        // the approach with masks is chosen because overflow:visible is set on SVG element in order tooltips could go outside\r\n        // svg area - this is often needed when working with small charts.\r\n        // main container which holds content container and tooltips container\r\n        var container_1 = new Container();\r\n        container_1.htmlContainer = htmlContainer;\r\n        container_1.svgContainer = svgDiv_1;\r\n        container_1.width = percent(100);\r\n        container_1.height = percent(100);\r\n        container_1.background.fillOpacity = 0;\r\n        container_1.paper = paper;\r\n        paper.append(container_1.group);\r\n        // Set up moving to proper element container if it's not yet ready at call time\r\n        if (tmpContainer) {\r\n            $dom.ready(function () {\r\n                container_1.moveHtmlContainer(htmlElement);\r\n            });\r\n        }\r\n        // this is set from parent container, but this one doesn't have, so do it manually.\r\n        container_1.relativeWidth = 1;\r\n        container_1.relativeHeight = 1;\r\n        svgDiv_1.container = container_1;\r\n        // creating classType instance\r\n        var sprite_1 = container_1.createChild(classType);\r\n        sprite_1.topParent = container_1;\r\n        var uid = sprite_1.uid;\r\n        registry.invalidSprites[uid] = [];\r\n        registry.invalidDatas[uid] = [];\r\n        registry.invalidPositions[uid] = [];\r\n        registry.invalidLayouts[uid] = [];\r\n        container_1.baseId = uid;\r\n        sprite_1.isBaseSprite = true;\r\n        sprite_1.focusFilter = new FocusFilter();\r\n        registry.baseSprites.push(sprite_1);\r\n        registry.baseSpritesByUid[uid] = sprite_1;\r\n        sprite_1.maskRectangle = { x: 0, y: 0, width: Math.max(svgDiv_1.width || 0, 0), height: Math.max(svgDiv_1.height || 0, 0) };\r\n        // this solves issues with display:none, as all children are measured as 0x0\r\n        container_1.events.on(\"maxsizechanged\", function (event) {\r\n            if (event.previousWidth == 0 || event.previousHeight == 0) {\r\n                container_1.deepInvalidate();\r\n            }\r\n            if (sprite_1.maskRectangle) {\r\n                sprite_1.maskRectangle = { x: 0, y: 0, width: Math.max(svgDiv_1.width || 0, 0), height: Math.max(svgDiv_1.height || 0, 0) };\r\n            }\r\n        });\r\n        var loopTimer_1 = null;\r\n        // Checks to see whether the chart was properly disposed or not\r\n        var loop_1 = function () {\r\n            if (!sprite_1.isDisposed()) {\r\n                if ($dom.getRoot(sprite_1.dom) == null) {\r\n                    if (options.autoDispose) {\r\n                        container_1.htmlContainer = undefined;\r\n                        svgDiv_1.htmlElement = undefined;\r\n                        sprite_1.dispose();\r\n                    }\r\n                    else {\r\n                        $log.warn(\"Chart was not disposed\", sprite_1.uid);\r\n                    }\r\n                    loopTimer_1 = null;\r\n                }\r\n                else {\r\n                    loopTimer_1 = window.setTimeout(loop_1, 1000);\r\n                }\r\n            }\r\n            else {\r\n                loopTimer_1 = null;\r\n            }\r\n        };\r\n        loop_1();\r\n        sprite_1.addDisposer(new Disposer(function () {\r\n            if (loopTimer_1 !== null) {\r\n                clearTimeout(loopTimer_1);\r\n            }\r\n            $array.remove(registry.baseSprites, sprite_1);\r\n            registry.baseSpritesByUid[sprite_1.uid] = undefined;\r\n        }));\r\n        // TODO figure out a better way of doing this\r\n        sprite_1.addDisposer(container_1);\r\n        // tooltip container\r\n        var tooltipContainer_1 = container_1.createChild(Container);\r\n        tooltipContainer_1.topParent = container_1;\r\n        tooltipContainer_1.width = percent(100);\r\n        tooltipContainer_1.height = percent(100);\r\n        tooltipContainer_1.isMeasured = false;\r\n        container_1.tooltipContainer = tooltipContainer_1;\r\n        sprite_1.tooltip = new Tooltip();\r\n        sprite_1.tooltip.hide(0);\r\n        sprite_1.tooltip.setBounds({ x: 0, y: 0, width: tooltipContainer_1.maxWidth, height: tooltipContainer_1.maxHeight });\r\n        tooltipContainer_1.events.on(\"maxsizechanged\", function () {\r\n            $type.getValue(sprite_1.tooltip).setBounds({ x: 0, y: 0, width: tooltipContainer_1.maxWidth, height: tooltipContainer_1.maxHeight });\r\n        }, undefined, false);\r\n        //@todo: maybe we don't need to create one by default but only on request?\r\n        var preloader_1 = new Preloader();\r\n        preloader_1.events.on(\"inited\", function () {\r\n            preloader_1.__disabled = true;\r\n        }, undefined, false);\r\n        container_1.preloader = preloader_1;\r\n        //if (!options.commercialLicense) {\r\n        if (sprite_1 instanceof Container && !sprite_1.hasLicense()) {\r\n            var logo_1 = tooltipContainer_1.createChild(AmChartsLogo);\r\n            tooltipContainer_1.events.on(\"maxsizechanged\", function (ev) {\r\n                if ((tooltipContainer_1.maxWidth <= 100) || (tooltipContainer_1.maxHeight <= 50)) {\r\n                    logo_1.hide();\r\n                }\r\n                else if (logo_1.isHidden || logo_1.isHiding) {\r\n                    logo_1.show();\r\n                }\r\n            }, undefined, false);\r\n            sprite_1.logo = logo_1;\r\n            logo_1.align = \"left\";\r\n            logo_1.valign = \"bottom\";\r\n        }\r\n        $utils.used(sprite_1.numberFormatter); // need to create one.\r\n        // Set this as an autonomouse instance\r\n        // Controls like Preloader, Export will use this.\r\n        container_1.isStandaloneInstance = true;\r\n        if (options.onlyShowOnViewport) {\r\n            if (!$dom.isElementInViewport(htmlContainer, options.viewportTarget)) {\r\n                sprite_1.__disabled = true;\r\n                sprite_1.tooltipContainer.__disabled = true;\r\n                var disposers = [\r\n                    $dom.addEventListener(window, \"DOMContentLoaded\", function () { viewPortHandler(sprite_1); }),\r\n                    $dom.addEventListener(window, \"load\", function () { viewPortHandler(sprite_1); }),\r\n                    $dom.addEventListener(window, \"resize\", function () { viewPortHandler(sprite_1); }),\r\n                    $dom.addEventListener(window, \"scroll\", function () { viewPortHandler(sprite_1); })\r\n                ];\r\n                if (options.viewportTarget) {\r\n                    var targets = $type.isArray(options.viewportTarget) ? options.viewportTarget : options.viewportTarget ? [options.viewportTarget] : [];\r\n                    for (var i = 0; i < targets.length; i++) {\r\n                        var target = targets[i];\r\n                        disposers.push($dom.addEventListener(target, \"resize\", function () { viewPortHandler(sprite_1); }));\r\n                        disposers.push($dom.addEventListener(target, \"scroll\", function () { viewPortHandler(sprite_1); }));\r\n                    }\r\n                }\r\n                var disposer = new MultiDisposer(disposers);\r\n                sprite_1.addDisposer(disposer);\r\n                sprite_1.vpDisposer = disposer;\r\n            }\r\n            else if (options.queue) {\r\n                addToQueue(sprite_1);\r\n            }\r\n        }\r\n        else if (options.queue) {\r\n            addToQueue(sprite_1);\r\n        }\r\n        return sprite_1;\r\n    }\r\n    else {\r\n        system.log(\"html container not found\");\r\n        throw new Error(\"html container not found\");\r\n    }\r\n}\r\n/**\r\n * Disposes all of the currently active charts.\r\n */\r\nexport function disposeAllCharts() {\r\n    while (registry.baseSprites.length !== 0) {\r\n        registry.baseSprites.pop().dispose();\r\n    }\r\n}\r\nexport function addToQueue(sprite) {\r\n    if (registry.queue.indexOf(sprite) == -1) {\r\n        sprite.__disabled = true;\r\n        sprite.tooltipContainer.__disabled = true;\r\n        sprite.events.disableType(\"appeared\");\r\n        if (registry.queue.length == 0) {\r\n            registry.events.once(\"exitframe\", function () {\r\n                queueHandler(sprite);\r\n            });\r\n            system.requestFrame();\r\n        }\r\n        sprite.addDisposer(new Disposer(function () {\r\n            removeFromQueue(sprite);\r\n        }));\r\n        registry.queue.push(sprite);\r\n    }\r\n}\r\nexport function removeFromQueue(sprite) {\r\n    var index = registry.queue.indexOf(sprite);\r\n    if (index >= 0) {\r\n        registry.queue.splice(registry.queue.indexOf(sprite), 1);\r\n        var nextSprite = registry.queue[index];\r\n        if (nextSprite) {\r\n            queueHandler(nextSprite);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Checks whether the chart was not initialized fully due to setting\r\n * of `onlyShowOnViewport`. If it hasn't and is now in the viewport\r\n * the chart will be initialized.\r\n *\r\n * @since 4.9.12\r\n * @param  sprite  Top-level chart object\r\n */\r\nexport function viewPortHandler(sprite) {\r\n    if (sprite.__disabled && $dom.isElementInViewport(sprite.htmlContainer, options.viewportTarget)) {\r\n        if (sprite.vpDisposer) {\r\n            sprite.vpDisposer.dispose();\r\n        }\r\n        addToQueue(sprite);\r\n    }\r\n}\r\nexport function queueHandler(sprite) {\r\n    if (sprite && sprite.tooltipContainer) {\r\n        sprite.__disabled = false;\r\n        sprite.tooltipContainer.__disabled = false;\r\n        sprite.events.enableType(\"appeared\");\r\n        sprite.dispatch(\"removedfromqueue\");\r\n        if (sprite.showOnInit) {\r\n            sprite.events.on(\"appeared\", function () {\r\n                removeFromQueue(sprite);\r\n            });\r\n        }\r\n        if (sprite.vpDisposer) {\r\n            sprite.vpDisposer.dispose();\r\n        }\r\n        if (sprite instanceof Container) {\r\n            sprite.invalidateLabels();\r\n        }\r\n        if (sprite.tooltipContainer) {\r\n            sprite.tooltipContainer.invalidateLayout();\r\n        }\r\n        if (sprite instanceof Component) {\r\n            sprite.invalidateData();\r\n            sprite.reinit();\r\n            sprite.events.once(\"datavalidated\", function () {\r\n                if (sprite.showOnInit) {\r\n                    sprite.appear();\r\n                }\r\n                else {\r\n                    removeFromQueue(sprite);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            sprite.reinit();\r\n            sprite.events.once(\"inited\", function () {\r\n                removeFromQueue(sprite);\r\n            });\r\n            if (sprite.showOnInit) {\r\n                sprite.appear();\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * A shortcut to creating a chart instance.\r\n *\r\n * The first argument is either a reference to or an id of a DOM element to be\r\n * used as a container for the chart.\r\n *\r\n * The second argument is the type reference of the chart type. (for plain\r\n * JavaScript users this can also be a string indicating chart type)\r\n *\r\n * ```TypeScript\r\n * let chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n * ```\r\n * ```JavaScript\r\n * // Can pass in chart type reference like this:\r\n * var chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // ... or chart class type as a string:\r\n * var chart = am4core.create(\"chartdiv\", \"PieChart\");\r\n * ```\r\n *\r\n * @param htmlElement  Reference or id of the target container element\r\n * @param classType    Class type of the target chart type\r\n * @return Chart instance\r\n */\r\nexport function create(htmlElement, classType) {\r\n    // This is a nasty hack for the benefit of vanilla JS users, who do not\r\n    // enjoy benefits of type-check anyway.\r\n    // We're allowing passing in a name of the class rather than type reference\r\n    // itself.\r\n    var classError;\r\n    if ($type.isString(classType)) {\r\n        if ($type.hasValue(registry.registeredClasses[classType])) {\r\n            classType = registry.registeredClasses[classType];\r\n        }\r\n        else {\r\n            classType = registry.registeredClasses[\"Container\"];\r\n            classError = new Error(\"Class [\" + classType + \"] is not loaded.\");\r\n        }\r\n    }\r\n    // Create the chart\r\n    var chart = createChild(htmlElement, classType);\r\n    // Error?\r\n    if (classError) {\r\n        chart.raiseCriticalError(classError);\r\n    }\r\n    return chart;\r\n}\r\n/**\r\n * A shortcut to creating a chart from a config object.\r\n *\r\n * Example:\r\n *\r\n * ```TypeScript\r\n * let chart am4core.createFromConfig({ ... }, \"chartdiv\", am4charts.XYChart );\r\n * ```\r\n * ```JavaScript\r\n * var chart am4core.createFromConfig({ ... }, \"chartdiv\", \"XYChart\" );\r\n * ```\r\n *\r\n * If `chartType` parameter is not supplied it must be set in a config object,\r\n * via reference to chart type, e.g.:\r\n *\r\n * ```TypeScript\r\n * {\r\n *   \"type\": am4charts.XYChart,\r\n *   // ...\r\n * }\r\n * ```\r\n * ```JavaScript\r\n * {\r\n *   \"type\": am4charts.XYChart,\r\n *   // ...\r\n * }\r\n * ```\r\n *\r\n * Or via string: (if you are using JavaScript)\r\n *\r\n * ```TypeScript\r\n * {\r\n *   \"type\": \"XYChart\",\r\n *   // ...\r\n * }\r\n * ```\r\n * ```JavaScript\r\n * {\r\n *   \"type\": \"XYChart\",\r\n *   // ...\r\n * }\r\n * ```\r\n *\r\n * A `container` can either be a reference to an HTML container to put chart\r\n * in, or it's unique id.\r\n *\r\n * If `container` is not specified, it must be included in the config object:\r\n *\r\n * ```TypeScript\r\n * {\r\n *   \"type\": \"XYChart\",\r\n *   \"container\": \"chartdiv\",\r\n *   // ...\r\n * }\r\n * ```\r\n * ```JavaScript\r\n * {\r\n *   \"type\": \"XYChart\",\r\n *   \"container\": \"chartdiv\",\r\n *   // ...\r\n * }\r\n * ```\r\n *\r\n * @param config       Config object in property/value pairs\r\n * @param htmlElement  Container reference or ID\r\n * @param objectType   Chart type\r\n * @return A newly created chart instance\r\n * @todo Throw exception if type is not correct\r\n */\r\nexport function createFromConfig(config, htmlElement, classType) {\r\n    // Extract chart type from config if necessary\r\n    if (!$type.hasValue(classType)) {\r\n        classType = config.type;\r\n        delete config.type;\r\n    }\r\n    // Extract element from config if necessary\r\n    if (!$type.hasValue(htmlElement)) {\r\n        htmlElement = config.container;\r\n        delete config.container;\r\n    }\r\n    // Check if we need to extract actual type reference\r\n    var finalType;\r\n    var classError;\r\n    if ($type.isString(classType) && $type.hasValue(registry.registeredClasses[classType])) {\r\n        finalType = registry.registeredClasses[classType];\r\n    }\r\n    else if (typeof classType !== \"function\") {\r\n        finalType = Container;\r\n        classError = new Error(\"Class [\" + classType + \"] is not loaded.\");\r\n    }\r\n    else {\r\n        finalType = classType;\r\n    }\r\n    // Create the chart\r\n    var chart = createChild(htmlElement, finalType);\r\n    // Set config\r\n    if (classError) {\r\n        chart.raiseCriticalError(classError);\r\n    }\r\n    else {\r\n        chart.config = config;\r\n    }\r\n    return chart;\r\n}\r\n/**\r\n * Useful in creating real queues form mult-chart creation.\r\n *\r\n * Accepts a reference to a function which crates and returns actual chart\r\n * object.\r\n *\r\n * It returns a `Promise` which you can use to catch chart instance once it's\r\n * created.\r\n *\r\n * ```TypeScript\r\n * am4core.createDeferred(function(div) {\r\n *   // Create first chart\r\n *   let chart = am4core.create(div, am4charts.XYChart);\r\n *   // ...\r\n *   return chart;\r\n * }, \"chartdiv1\").then(chart) {\r\n *   // `chart` variable holds an instance of the chart\r\n *   console.log(\"Chart ready\", chart);\r\n * }\r\n *\r\n * am4core.createDeferred(function(div) {\r\n *   // Create second chart\r\n *   let chart = am4core.create(div, am4charts.PieChart);\r\n *   // ...\r\n *   return chart;\r\n * }, \"chartdiv2\").then(chart) {\r\n *   // `chart` variable holds an instance of the chart\r\n *   console.log(\"Chart ready\", chart);\r\n * }\r\n * ```\r\n * ```JavaScript\r\n * am4core.createDeferred(function(div) {\r\n *   // Create first chart\r\n *   var chart = am4core.create(div, am4charts.XYChart);\r\n *   // ...\r\n *   return chart;\r\n * }, \"chartdiv1\").then(chart) {\r\n *   // `chart` variable holds an instance of the chart\r\n *   console.log(\"Chart ready\", chart);\r\n * }\r\n *\r\n * am4core.createDeferred(function(div) {\r\n *   // Create second chart\r\n *   var chart = am4core.create(div, am4charts.PieChart);\r\n *   // ...\r\n *   return chart;\r\n * }, \"chartdiv2\").then(chart) {\r\n *   // `chart` variable holds an instance of the chart\r\n *   console.log(\"Chart ready\", chart);\r\n * }\r\n * ```\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/performance/#Deferred_daisy_chained_instantiation} for more information\r\n * @since 4.10.0\r\n * @param  callback  Callback function that creates chart\r\n * @param  scope     Scope to call callback in\r\n * @param  ...rest   Parameters to pass into callback\r\n * @return           Promise with chart instance\r\n */\r\nexport function createDeferred(callback, scope) {\r\n    var rest = [];\r\n    for (var _i = 2; _i < arguments.length; _i++) {\r\n        rest[_i - 2] = arguments[_i];\r\n    }\r\n    return new Promise(function (resolve, reject) {\r\n        registry.deferred.push({\r\n            scope: scope,\r\n            callback: callback,\r\n            args: rest,\r\n            resolve: resolve\r\n        });\r\n        if (registry.deferred.length == 1) {\r\n            processNextDeferred();\r\n        }\r\n    });\r\n}\r\nfunction processNextDeferred() {\r\n    var _a;\r\n    var next = registry.deferred[0];\r\n    if (next) {\r\n        var sprite_2 = (_a = next.callback).call.apply(_a, __spread([next.scope], next.args));\r\n        sprite_2.events.on(\"ready\", function () {\r\n            next.resolve(sprite_2);\r\n            registry.deferred.shift();\r\n            if (options.deferredDelay) {\r\n                setTimeout(processNextDeferred, options.deferredDelay);\r\n            }\r\n            else {\r\n                processNextDeferred();\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * Applies a theme to System, and subsequently all chart instances created\r\n * from that point forward.\r\n *\r\n * amCharts supports multiple themes. Calling `useTheme` multiple times will\r\n * make the System apply multiple themes, rather than overwrite previously\r\n * set one.\r\n *\r\n * This enables combining features from multiple themes on the same chart.\r\n * E.g.:\r\n *\r\n * ```TypeScript\r\n * am4core.useTheme(am4themes.material);\r\n * am4core.useTheme(am4themes.animated);\r\n * ```\r\n * ```JavaScript\r\n * am4core.useTheme(am4themes.material);\r\n * am4core.useTheme(am4themes.animated);\r\n * ```\r\n *\r\n * The above will apply both the Material color and animation options to all\r\n * charts created.\r\n *\r\n * @param value  A reference to a theme\r\n */\r\nexport function useTheme(value) {\r\n    if (registry.themes.indexOf(value) === -1) {\r\n        registry.themes.push(value);\r\n    }\r\n}\r\n/**\r\n * Removes a theme from \"active themes\" list, so it won't get applied to any\r\n * charts created subsequently.\r\n *\r\n * @param value  A reference to a theme\r\n */\r\nexport function unuseTheme(value) {\r\n    $array.remove(registry.themes, value);\r\n}\r\n/**\r\n * Removes all \"active\" themes. Any charts created subsequently will not have\r\n * any theme applied to them.\r\n */\r\nexport function unuseAllThemes() {\r\n    registry.themes = [];\r\n}\r\n/**\r\n * Adds a license, e.g.:\r\n *\r\n * ```TypeScript\r\n * am4core.addLicense(\"xxxxxxxx\");\r\n * ```\r\n * ```JavaScript\r\n * am4core.addLicense(\"xxxxxxxx\");\r\n * ```\r\n *\r\n * Multiple licenses can be added to cover for multiple products.\r\n *\r\n * @since 4.5.16\r\n * @param  license  License key\r\n */\r\nexport function addLicense(license) {\r\n    options.licenses.push(license);\r\n}\r\n"],
  "mappings": "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",
  "names": ["Ellipse", "Image", "Line", "Polyline", "Polyarc", "Morpher", "percent", "Polygon", "Polyspline", "Slice", "Preloader", "CloseButton", "SwitchButton", "Slider", "TextLink", "Trapezoid", "Triangle", "Tension", "cos", "sin", "Monotone", "MonotoneX", "MonotoneY", "Basis", "WavedCircle", "WavedLine", "WavedRectangle", "PlayButton", "ColorModifier", "GradientModifier", "color", "LinearGradientModifier", "Cone", "LightenFilter", "Rectangle3D", "sin", "cos", "Slice3D", "arc", "RadialGradientModifier", "LinePattern", "CirclePattern", "RectPattern", "ColorizeFilter", "color", "DesaturateFilter", "BlurFilter", "FocusFilter", "PatternSet", "Plugin", "AmChartsLogo"]
}
