{
  "version": 3,
  "sources": ["../../../../../node_modules/@amcharts/amcharts4/.internal/core/utils/Percent.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/utils/Math.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/utils/Array.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/utils/Disposer.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/utils/AsyncPending.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/utils/EventDispatcher.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/utils/Object.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/utils/Iterator.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/utils/String.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/utils/Dictionary.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/utils/Cache.js", "../../../../../node_modules/@amcharts/amcharts4/.internal/core/Registry.js"],
  "sourcesContent": ["/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Represents a relative value (percent).\r\n *\r\n * The Percent object, can be instantiated using two ways:\r\n *\r\n * * Via `new Percent(X)`.\r\n * * Via `am4core.percent(X)`.\r\n *\r\n * `Percent` type objects can be used in a number of dual-measuring or\r\n * positioning properties, like `width`. E.g.:\r\n *\r\n * ```TypeScript\r\n * chart.paddingRight = new Percent(10);\r\n * // or\r\n * chart.paddingRight = am4core.percent(10);\r\n * ```\r\n * ```JavaScript\r\n * chart.paddingRight = new Percent(10);\r\n * // or\r\n * chart.paddingRight = am4core.percent(10);\r\n * ```\r\n * ```JSON\r\n * {\r\n *   // ...\r\n *   \"paddingRight\": \"10%\"\r\n * }\r\n * ```\r\n */\r\nvar Percent = /** @class */ (function () {\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param percent  Percent value\r\n     */\r\n    function Percent(percent) {\r\n        this._value = percent;\r\n    }\r\n    Object.defineProperty(Percent.prototype, \"value\", {\r\n        /**\r\n         * Relative value.\r\n         *\r\n         * E.g. 100% is 1, 50% is 0.5, etc.\r\n         *\r\n         * This is useful to apply transformations to other values. E.g.:\r\n         *\r\n         * ```TypeScript\r\n         * let value = 256;\r\n         * let percent = new am4core.Percent(50);\r\n         * console.log(value * percent.value); // outputs 128\r\n         * ```\r\n         * ```JavaScript\r\n         * var value = 256;\r\n         * var percent = new am4core.Percent(50);\r\n         * console.log(value * percent.value); // outputs 128\r\n         * ```\r\n         *\r\n         * Alternatively, you can use `am4core.percent()` helper function:\r\n         *\r\n         * ```TypeScript\r\n         * let value = 256;\r\n         * let percent = am4core.percent(50);\r\n         * console.log(value * percent.value); // outputs 128\r\n         * ```\r\n         * ```JavaScript\r\n         * var value = 256;\r\n         * var percent = am4core.percent(50);\r\n         * console.log(value * percent.value); // outputs 128\r\n         * ```\r\n         *\r\n         * @readonly\r\n         * @return Relative value\r\n         */\r\n        get: function () {\r\n            return this._value / 100;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Percent.prototype, \"percent\", {\r\n        /**\r\n         * Value in percent.\r\n         *\r\n         * @return Percent\r\n         */\r\n        get: function () {\r\n            return this._value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Percent.prototype.toString = function () {\r\n        return \"\" + this._value + \"%\";\r\n    };\r\n    return Percent;\r\n}());\r\nexport { Percent };\r\n/**\r\n * Converts numeric percent value to a proper [[Percent]] object.\r\n *\r\n * ```TypeScript\r\n * pieSeries.radius = am4core.percent(80);\r\n * ```\r\n * ```JavaScript\r\n * pieSeries.radius = am4core.percent(80);\r\n * ```\r\n *\r\n * @param value  Percent\r\n * @return Percent object\r\n */\r\nexport function percent(value) {\r\n    return new Percent(value);\r\n}\r\n/**\r\n * Checks if value is a [[Percent]] object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param value  Input value\r\n * @return Is percent?\r\n */\r\nexport function isPercent(value) {\r\n    return value instanceof Percent;\r\n}\r\n", "/**\r\n * A collection of utility functions for various type checks and conversion\r\n * @todo Review unused functions for removal\r\n * @hidden\r\n */\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { percent, isPercent } from \"./Percent\";\r\n/**\r\n * ============================================================================\r\n * TYPE CHECK\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Returns `true` if value is not a number (NaN).\r\n *\r\n * @param value Input value\r\n * @return Is NaN?\r\n * @deprecated Is not used anywhere. JS built-in isNaN is used everywhere. Maybe we don't need this, or if we do, then we should use it everywhere\r\n */\r\nexport function isNaN(value) {\r\n    return Number(value) !== value;\r\n}\r\n/**\r\n * Returns a type of the value.\r\n *\r\n * @param value  Input value\r\n * @return Type of the value\r\n */\r\nexport function getType(value) {\r\n    return ({}).toString.call(value);\r\n}\r\n/**\r\n * Returns a default value if the passed in value is empty.\r\n *\r\n * @param value     Input value\r\n * @param optional  Default value\r\n * @return Value or default value whichever is available\r\n * @deprecated Not used anywhere\r\n */\r\nexport function getDefault(value, optional) {\r\n    return value || optional;\r\n}\r\n/**\r\n * Checks if the passed in value is a string.\r\n *\r\n * @param value  Value\r\n * @return Is string?\r\n * @throws {Error}\r\n * @deprecated Not used anywhere\r\n */\r\nexport function checkString(value) {\r\n    if (typeof value === \"string\") {\r\n        return true;\r\n    }\r\n    else {\r\n        throw new Error(\"Expected a string but got \" + getType(value));\r\n    }\r\n}\r\n/**\r\n * Checks if the passed in value is a boolean.\r\n *\r\n * @param value  Value\r\n * @return Is boolean?\r\n * @throws {Error}\r\n * @deprecated Not used anywhere\r\n */\r\nexport function checkBoolean(value) {\r\n    if (typeof value === \"boolean\") {\r\n        return true;\r\n    }\r\n    else {\r\n        throw new Error(\"Expected a boolean but got \" + getType(value));\r\n    }\r\n}\r\n/**\r\n * Checks if the passed in value is a number.\r\n *\r\n * @param value  Value\r\n * @return Is number?\r\n * @throws {Error}\r\n */\r\nexport function checkNumber(value) {\r\n    if (typeof value === \"number\") {\r\n        if (isNaN(value)) {\r\n            throw new Error(\"Expected a number but got NaN\");\r\n        }\r\n    }\r\n    else {\r\n        throw new Error(\"Expected a number but got \" + getType(value));\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Checks if the passed in value is an object.\r\n *\r\n * @param value  Value\r\n * @return Is object?\r\n * @throws {Error}\r\n * @todo Is the input type correct?\r\n * @deprecated Not used anywhere\r\n */\r\nexport function checkObject(value) {\r\n    var t = getType(value);\r\n    if (t === \"[object Object]\") {\r\n        return true;\r\n    }\r\n    else {\r\n        throw new Error(\"Expected an object but got \" + t);\r\n    }\r\n}\r\n/**\r\n * Checks if the passed in value is an array.\r\n *\r\n * @param value  Value\r\n * @return Is array?\r\n * @throws {Error}\r\n * @deprecated Not used anywhere\r\n */\r\nexport function checkArray(value) {\r\n    if (Array.isArray(value)) {\r\n        return true;\r\n    }\r\n    else {\r\n        throw new Error(\"Expected an array but got \" + getType(value));\r\n    }\r\n}\r\n/**\r\n * Checks if the passed in value is a Date object.\r\n *\r\n * @param value  Value\r\n * @return Is Date object?\r\n * @throws {Error}\r\n * @deprecated Not used anywhere\r\n */\r\nexport function checkDate(value) {\r\n    var t = getType(value);\r\n    if (t === \"[object Date]\") {\r\n        return true;\r\n    }\r\n    else {\r\n        throw new Error(\"Expected a date but got \" + t);\r\n    }\r\n}\r\n/**\r\n * ============================================================================\r\n * TYPE CASTING\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Casts string or a number into string.\r\n *\r\n * @param value  Input\r\n * @return String value\r\n * @deprecated Not used anywhere\r\n */\r\nexport function castString(value) {\r\n    if (typeof value === \"string\") {\r\n        return value;\r\n    }\r\n    else if (typeof value === \"number\") {\r\n        return \"\" + value;\r\n    }\r\n    else {\r\n        throw new Error(\"Expected a string or number but got \" + getType(value));\r\n    }\r\n}\r\n/**\r\n * Casts string or a number into a number.\r\n *\r\n * @param value   Input value\r\n * @return Number  value\r\n * @throws {Error}\r\n */\r\nexport function castNumber(value) {\r\n    if (typeof value === \"string\") {\r\n        var number = +value;\r\n        if (isNaN(number)) {\r\n            throw new Error(\"Cannot cast string \" + JSON.stringify(value) + \" to a number\");\r\n        }\r\n        else {\r\n            return number;\r\n        }\r\n    }\r\n    else if (typeof value === \"number\") {\r\n        if (isNaN(value)) {\r\n            throw new Error(\"Expected a number but got NaN\");\r\n        }\r\n        else {\r\n            return value;\r\n        }\r\n    }\r\n    else {\r\n        var t = getType(value);\r\n        if (t === \"[object Date]\") {\r\n            return value.getTime();\r\n        }\r\n        else {\r\n            throw new Error(\"Expected a string, number, or date but got \" + t);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Casts number, string or Date into a Date object.\r\n *\r\n * @param value  Input value\r\n * @return Date object\r\n * @deprecated Not used anywhere\r\n * @throws {Error}\r\n * @hidden\r\n * @deprecated\r\n */\r\n/*export function castDate(value: string | number | Date, formatter?: DateFormatter): Date {\r\n    if (typeof value === \"string\") {\r\n        if (formatter) {\r\n            return formatter.parse(value);\r\n        }\r\n        return new Date(value);\r\n\r\n    } else if (typeof value === \"number\") {\r\n        return new Date(value);\r\n\r\n    } else {\r\n        const t = getType(value);\r\n\r\n        if (t === \"[object Date]\") {\r\n            return value;\r\n\r\n        } else {\r\n            throw new Error(\"Expected a string, number, or date but got \" + t);\r\n        }\r\n    }\r\n}*/\r\n/**\r\n * ============================================================================\r\n * QUICK CONVERSION\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Converts any value into `boolean`.\r\n *\r\n * @param value  Source value\r\n * @return `true` or `false`\r\n */\r\nexport function toBoolean(value) {\r\n    return value ? true : false;\r\n}\r\n/**\r\n * Converts any value into a `number`.\r\n *\r\n * @param value  Source value\r\n * @return Number representation of value\r\n */\r\nexport function toNumber(value) {\r\n    if (hasValue(value) && !isNumber(value)) {\r\n        var converted = Number(value);\r\n        if (isNaN(converted) && isString(value) && value != \"\") {\r\n            return toNumber(value.replace(/[^0-9.\\-]+/g, ''));\r\n        }\r\n        return converted;\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * Converts any value into a string (text).\r\n *\r\n * @param value  Source value\r\n * @return String representation of the input\r\n */\r\nexport function toText(value) {\r\n    if (hasValue(value) && !isString(value)) {\r\n        if (isNumber(value)) {\r\n            return castString(value);\r\n        }\r\n        else if (isObject(value)) {\r\n            return value.toString();\r\n        }\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * Converts any value to a number or [[Percent]].\r\n *\r\n * If the parameter is a string and contains \"%\", it will\r\n * convert it into a [[Percent]].\r\n *\r\n * Otherwise, it will convert into a number.\r\n *\r\n * @param value  Number or percent\r\n * @return Percent object\r\n */\r\nexport function toNumberOrPercent(value) {\r\n    if (!hasValue(value) || isNumber(value) || isPercent(value)) {\r\n        return value;\r\n    }\r\n    if (isString(value) && value.indexOf(\"%\") != -1) {\r\n        return percent(toNumber(value));\r\n    }\r\n    return toNumber(value);\r\n}\r\n/**\r\n * Checks if a variable has a value.\r\n *\r\n * @param a  Input value\r\n * @returns                        Has value?\r\n */\r\nexport function hasValue(a) {\r\n    return a != null;\r\n}\r\n/**\r\n * Returns a value or throws an {Error} exception if the variable has not\r\n * value.\r\n *\r\n * @param a  Input value\r\n * @returns                        Value\r\n */\r\nexport function getValue(a) {\r\n    if (hasValue(a)) {\r\n        return a;\r\n    }\r\n    else {\r\n        throw new Error(\"Value doesn't exist\");\r\n    }\r\n}\r\n/**\r\n * Returns a value, or returns the default value if it doesn't have a value.\r\n *\r\n * @param a  Input value\r\n * @returns                        Value\r\n */\r\nexport function getValueDefault(a, defaultValue) {\r\n    if (hasValue(a)) {\r\n        return a;\r\n    }\r\n    else {\r\n        return defaultValue;\r\n    }\r\n}\r\n/**\r\n * ============================================================================\r\n * TYPE CHECK\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Checks if parameter is `Date`.\r\n *\r\n * @param value  Input value\r\n * @return Is Date?\r\n */\r\nexport function isDate(value) {\r\n    return getType(value) === \"[object Date]\";\r\n}\r\n/**\r\n * Checks if parameter is `string`.\r\n *\r\n * @param value  Input value\r\n * @return Is string?\r\n */\r\nexport function isString(value) {\r\n    return typeof value === \"string\";\r\n}\r\n/**\r\n * Checks if parameter is `number`.\r\n *\r\n * @param value  Input value\r\n * @return Is number?\r\n */\r\nexport function isNumber(value) {\r\n    return typeof value === \"number\" && Number(value) == value;\r\n}\r\n/**\r\n * Checks if parameter is `object`.\r\n *\r\n * @param value  Input value\r\n * @return Is object?\r\n */\r\nexport function isObject(value) {\r\n    return typeof value === \"object\" && value != null;\r\n}\r\n/**\r\n * Checks if parameter is `Array`.\r\n *\r\n * @param value  Input value\r\n * @return Is Array?\r\n */\r\nexport function isArray(value) {\r\n    return Array.isArray(value);\r\n}\r\n", "/**\r\n * A collection of Math-related functions\r\n *\r\n * @todo Comment trigonometric functions?\r\n */\r\nimport * as $type from \"./Type\";\r\n/**\r\n * ============================================================================\r\n * CONSTANTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nexport var PI = Math.PI;\r\nexport var HALFPI = PI / 2;\r\nexport var RADIANS = PI / 180;\r\nexport var DEGREES = 180 / PI;\r\n/**\r\n * Converts any value and fits it into a specific value range.\r\n *\r\n * @param value  Source value\r\n * @param min    Minimum allowable value\r\n * @param max    Maximum allowable value\r\n * @return Number\r\n */\r\nexport function toNumberRange(value, min, max) {\r\n    if ($type.hasValue(value)) {\r\n        value = $type.toNumber(value);\r\n        return fitToRange(value, min, max);\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * Rounds the numeric value to whole number or specific precision of set.\r\n *\r\n * @param value      Value\r\n * @param precision  Precision (number of decimal points)\r\n * @param floor  In case value ends with 0.5 and precision is 0, we might need to floor the value instead of ceiling it.\r\n * @return Rounded value\r\n */\r\nexport function round(value, precision, floor) {\r\n    if (!$type.isNumber(precision) || precision <= 0) {\r\n        var rounded = Math.round(value);\r\n        if (floor) {\r\n            if (rounded - value == 0.5) {\r\n                rounded--;\r\n            }\r\n        }\r\n        return rounded;\r\n    }\r\n    else {\r\n        var d = Math.pow(10, precision);\r\n        return Math.round(value * d) / d;\r\n    }\r\n}\r\n/**\r\n * Ceils the numeric value to whole number or specific precision of set.\r\n *\r\n * @param value      Value\r\n * @param precision  Precision (number of decimal points)\r\n * @return Rounded value\r\n */\r\nexport function ceil(value, precision) {\r\n    if (!$type.isNumber(precision) || precision <= 0) {\r\n        return Math.ceil(value);\r\n    }\r\n    else {\r\n        var d = Math.pow(10, precision);\r\n        return Math.ceil(value * d) / d;\r\n    }\r\n}\r\n/**\r\n * Stretches `t` so that it will always be between `from` and `to`.\r\n *\r\n * @param t     Number from 0 to 1\r\n * @param from  Lowest possible value\r\n * @param to    Highest possible value\r\n * @return Adjusted value\r\n */\r\nexport function stretch(t, from, to) {\r\n    return (t * (to - from)) + from;\r\n}\r\n/**\r\n * Adjust numeric value so it fits to specific value range.\r\n *\r\n * @param value     Value\r\n * @param minValue  Lowest possible value\r\n * @param maxValue  Highest possible value\r\n * @return Adjusted value\r\n */\r\nexport function fitToRange(value, minValue, maxValue) {\r\n    if ($type.isNumber(minValue)) {\r\n        if ($type.isNumber(maxValue) && maxValue < minValue) {\r\n            var temp = maxValue;\r\n            maxValue = minValue;\r\n            minValue = temp;\r\n        }\r\n        if (value < minValue) {\r\n            value = minValue;\r\n        }\r\n    }\r\n    if ($type.isNumber(maxValue)) {\r\n        if (value > maxValue) {\r\n            value = maxValue;\r\n        }\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * Returns sine of a number.\r\n *\r\n * @param value  Value\r\n * @return Sine\r\n */\r\nexport function sin(value) {\r\n    return round(Math.sin(RADIANS * value), 10);\r\n}\r\n/**\r\n * Returns tan of a number.\r\n *\r\n * @param value  Value\r\n * @return Sine\r\n */\r\nexport function tan(value) {\r\n    return round(Math.tan(RADIANS * value), 10);\r\n}\r\n/**\r\n * Returns cosine of a number.\r\n *\r\n * @param value  Value\r\n * @return Cosine\r\n */\r\nexport function cos(value) {\r\n    return round(Math.cos(RADIANS * value), 10);\r\n}\r\nexport function max(left, right) {\r\n    if ($type.isNumber(left)) {\r\n        if ($type.isNumber(right)) {\r\n            if (right > left) {\r\n                return right;\r\n            }\r\n            else {\r\n                return left;\r\n            }\r\n        }\r\n        else {\r\n            return left;\r\n        }\r\n    }\r\n    else if ($type.isNumber(right)) {\r\n        return right;\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\nexport function min(left, right) {\r\n    if ($type.isNumber(left)) {\r\n        if ($type.isNumber(right)) {\r\n            if (right < left) {\r\n                return right;\r\n            }\r\n            else {\r\n                return left;\r\n            }\r\n        }\r\n        else {\r\n            return left;\r\n        }\r\n    }\r\n    else if ($type.isNumber(right)) {\r\n        return right;\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Returns the closest value from the array of values to the reference value.\r\n *\r\n * @param values  Array of values\r\n * @param value   Reference value\r\n * @return Closes value from the array\r\n */\r\nexport function closest(values, referenceValue) {\r\n    return values.reduce(function (prev, curr) {\r\n        return (Math.abs(curr - referenceValue) < Math.abs(prev - referenceValue) ? curr : prev);\r\n    });\r\n}\r\n/**\r\n * Checks whether two ranges of values intersect.\r\n *\r\n * @param range1  Range 1\r\n * @param range2  Range 2\r\n * @return Any intersecting numbers?\r\n */\r\nexport function intersect(range1, range2) {\r\n    var start1 = $type.getValue(range1.start);\r\n    var start2 = $type.getValue(range2.start);\r\n    var end1 = $type.getValue(range1.end);\r\n    var end2 = $type.getValue(range2.end);\r\n    return Math.max(start1, start2) <= Math.min(end1, end2);\r\n}\r\n/**\r\n * Inverts the range of values.\r\n *\r\n * @param range  Range\r\n */\r\nexport function invertRange(range) {\r\n    var start = $type.getValue(range.start);\r\n    var end = $type.getValue(range.end);\r\n    return { start: 1 - end, end: 1 - start };\r\n}\r\n/**\r\n * Returns an intersection range between two ranges of values.\r\n *\r\n * @param range1  Range 1\r\n * @param range2  Range 2\r\n * @return Intersecting value range\r\n */\r\nexport function intersection(range1, range2) {\r\n    var start1 = $type.getValue(range1.start);\r\n    var start2 = $type.getValue(range2.start);\r\n    var end1 = $type.getValue(range1.end);\r\n    var end2 = $type.getValue(range2.end);\r\n    var startMax = Math.max(start1, start2);\r\n    var endMin = Math.min(end1, end2);\r\n    if (endMin < startMax) {\r\n        return undefined;\r\n    }\r\n    else {\r\n        return { start: startMax, end: endMin };\r\n    }\r\n}\r\n/**\r\n * Returns pixel \"distance\" between two points.\r\n *\r\n * If second point is not specified, distance from {x:0, y:0} point is\r\n * calculated.\r\n *\r\n * @param point1  Point 1\r\n * @param point2  Point 2\r\n * @return Distance in relative pixels\r\n */\r\nexport function getDistance(point1, point2) {\r\n    if (!point1) {\r\n        return 0;\r\n    }\r\n    if (!point2) {\r\n        point2 = { x: 0, y: 0 };\r\n    }\r\n    return Math.sqrt(Math.pow(Math.abs(point1.x - point2.x), 2) + Math.pow(Math.abs(point1.y - point2.y), 2));\r\n}\r\n/**\r\n * Returns pixel \"horizontal distance\" between two points.\r\n *\r\n * If second point is not specified, distance from {x:0, y:0} point is\r\n * calculated.\r\n *\r\n * @param point1  Point 1\r\n * @param point2  Point 2\r\n * @return Distance in relative pixels\r\n */\r\nexport function getHorizontalDistance(point1, point2) {\r\n    if (!point1) {\r\n        return 0;\r\n    }\r\n    if (!point2) {\r\n        point2 = { x: 0, y: 0 };\r\n    }\r\n    return Math.abs(point1.x - point2.x);\r\n}\r\n/**\r\n * Returns pixel \"vertical distance\" between two points.\r\n *\r\n * If second point is not specified, distance from {x:0, y:0} point is\r\n * calculated.\r\n *\r\n * @param point1  Point 1\r\n * @param point2  Point 2\r\n * @return Distance in relative pixels\r\n */\r\nexport function getVerticalDistance(point1, point2) {\r\n    if (!point1) {\r\n        return 0;\r\n    }\r\n    if (!point2) {\r\n        point2 = { x: 0, y: 0 };\r\n    }\r\n    return Math.abs(point1.y - point2.y);\r\n}\r\n/**\r\n * Returns approximate pixel \"distance\" between two points of cubic curve\r\n *\r\n * If second point is not specified, distance from {x:0, y:0} point is\r\n * calculated.\r\n *\r\n * @param point1  Point 1\r\n * @param point2  Point 2\r\n * @param controlPointA  Control Point 1\r\n * @param controlPointB  Control Point 2\r\n * @param stepCount  number of steps (the more, the more accurate result)\r\n * @return Distance in relative pixels\r\n */\r\nexport function getCubicCurveDistance(point1, point2, controlPointA, controlPointB, stepCount) {\r\n    if (!point1) {\r\n        return 0;\r\n    }\r\n    if (!point2) {\r\n        point2 = { x: 0, y: 0 };\r\n    }\r\n    var distance = 0;\r\n    var prevPoint = point1;\r\n    if (stepCount > 0) {\r\n        for (var s = 0; s <= stepCount; s++) {\r\n            var point = getPointOnCubicCurve(point1, point2, controlPointA, controlPointB, s / stepCount);\r\n            distance += getDistance(prevPoint, point);\r\n            prevPoint = point;\r\n        }\r\n    }\r\n    return distance;\r\n}\r\n/**\r\n * Returns scale based on original and end position of the two points.\r\n *\r\n * @param point1       Current position of point 1\r\n * @param startPoint1  Start position of point 1\r\n * @param point2       Current position of point 1\r\n * @param startPoint2  Start position of point 2\r\n * @return Scale        Calculated scale\r\n */\r\nexport function getScale(point1, startPoint1, point2, startPoint2) {\r\n    var initialDistance = getDistance(startPoint1, startPoint2);\r\n    var currentDistance = getDistance(point1, point2);\r\n    return Math.abs(currentDistance / initialDistance);\r\n}\r\n/**\r\n * Returns an exact mid point between two points.\r\n *\r\n * @param point1     Position of point 1\r\n * @param point2     Position of point 2\r\n * @return Mid point  Position of mid-point\r\n */\r\nexport function getMidPoint(point1, point2, position) {\r\n    if (!$type.isNumber(position)) {\r\n        position = 0.5;\r\n    }\r\n    return {\r\n        \"x\": (point1.x + (point2.x - point1.x) * position),\r\n        \"y\": (point1.y + (point2.y - point1.y) * position)\r\n    };\r\n}\r\n/**\r\n * Returns difference in angles between starting and ending position of two\r\n * vectors.\r\n *\r\n * @param point1       Current position of point 1\r\n * @param startPoint1  Start position of point 1\r\n * @param point2       Current position of point 1\r\n * @param startPoint2  Start position of point 2\r\n * @return Angle difference in degrees\r\n */\r\nexport function getRotation(point1, startPoint1, point2, startPoint2) {\r\n    // Get start and end angles\r\n    var startAngle = getAngle(startPoint1, startPoint2);\r\n    var angle = getAngle(point1, point2);\r\n    // Calculate angle\r\n    var diff = startAngle - angle;\r\n    if (diff < 0) {\r\n        diff += 360;\r\n    }\r\n    return diff;\r\n}\r\n/**\r\n * Calculates angle of the vector based on two or one point.\r\n *\r\n * @param point1  Point 1\r\n * @param point2  Point 2\r\n * @return Angle in degrees\r\n */\r\nexport function getAngle(point1, point2) {\r\n    if (!point2) {\r\n        point2 = { x: point1.x * 2, y: point1.y * 2 };\r\n    }\r\n    var diffX = point2.x - point1.x;\r\n    var diffY = point2.y - point1.y;\r\n    var angle = Math.atan2(diffY, diffX) * DEGREES;\r\n    if (angle < 0) {\r\n        angle += 360;\r\n    }\r\n    return normalizeAngle(angle);\r\n}\r\n/**\r\n * Returns the shift in coordinates of the center when item is rotated, moved\r\n * and scaled at the same time.\r\n *\r\n * @param center       Current center\r\n * @param point1       Frst reference point\r\n * @param startPoint1  Original position of the first reference point\r\n * @param point2       Second reference point\r\n * @param startPoint2  Original position of the first reference point\r\n * @return Shift in center point coordinates\r\n */\r\nexport function getCenterShift(center, point1, startPoint1, point2, startPoint2) {\r\n    // Get angle\r\n    var angle = getRotation(point1, startPoint1, point2, startPoint2) - 90;\r\n    if (angle < 0) {\r\n        angle += 360;\r\n    }\r\n    // Get distance between new position\r\n    var distance = getDistance(point1, point2);\r\n    // Calculate new X\r\n    var x = Math.cos(angle) / distance + point1.x;\r\n    var y = Math.cos(angle) / distance + point1.y;\r\n    var shift = {\r\n        \"x\": x - center.x,\r\n        \"y\": y - center.y\r\n    };\r\n    return shift;\r\n}\r\n/**\r\n * Converts an array of points into a bounding box rectangle.\r\n *\r\n * Array can contain any number of points.\r\n *\r\n * @param points  Points\r\n * @return Bounding box rectangle\r\n */\r\nexport function getBBox(points) {\r\n    if (points) {\r\n        var length_1 = points.length;\r\n        if (length_1 !== 0) {\r\n            var left = void 0;\r\n            var right = void 0;\r\n            var top_1;\r\n            var bottom = void 0;\r\n            for (var i = 0; i < length_1; i++) {\r\n                var point = points[i];\r\n                if (!$type.isNumber(right) || (point.x > right)) {\r\n                    right = point.x;\r\n                }\r\n                if (!$type.isNumber(left) || (point.x < left)) {\r\n                    left = point.x;\r\n                }\r\n                if (!$type.isNumber(top_1) || (point.y < top_1)) {\r\n                    top_1 = point.y;\r\n                }\r\n                if (!$type.isNumber(bottom) || (point.y > bottom)) {\r\n                    bottom = point.y;\r\n                }\r\n            }\r\n            return { x: left, y: top_1, width: right - left, height: bottom - top_1 };\r\n        }\r\n    }\r\n    return { x: 0, y: 0, width: 0, height: 0 };\r\n}\r\n/**\r\n * Returns a [[IRectangle]] object representing a common rectangle that fits\r\n * all passed in rectangles in it.\r\n *\r\n * @param rectangles  An array of rectangles\r\n * @return Common rectangle\r\n */\r\nexport function getCommonRectangle(rectangles) {\r\n    var length = rectangles.length;\r\n    if (length !== 0) {\r\n        var minX = void 0;\r\n        var minY = void 0;\r\n        var maxX = void 0;\r\n        var maxY = void 0;\r\n        for (var i = 0; i < length; i++) {\r\n            var rectangle = rectangles[i];\r\n            minX = min(rectangle.x, minX);\r\n            minY = min(rectangle.y, minY);\r\n            maxX = max(rectangle.x + rectangle.width, maxX);\r\n            maxY = max(rectangle.y + rectangle.height, maxY);\r\n        }\r\n        return { x: minX, y: minY, width: maxX - minX, height: maxY - minY };\r\n    }\r\n}\r\n/**\r\n * [getPointOnQuadraticCurve description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param pointA        [description]\r\n * @param pointB        [description]\r\n * @param controlPoint  [description]\r\n * @param position      [description]\r\n * @return [description]\r\n */\r\nexport function getPointOnQuadraticCurve(pointA, pointB, controlPoint, position) {\r\n    var x = (1 - position) * (1 - position) * pointA.x + 2 * (1 - position) * position * controlPoint.x + position * position * pointB.x;\r\n    var y = (1 - position) * (1 - position) * pointA.y + 2 * (1 - position) * position * controlPoint.y + position * position * pointB.y;\r\n    return { x: x, y: y };\r\n}\r\n/**\r\n * [getPointOnCubicCurve description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param pointA         [description]\r\n * @param pointB         [description]\r\n * @param controlPointA  [description]\r\n * @param controlPointB  [description]\r\n * @param position       [description]\r\n * @return [description]\r\n */\r\nexport function getPointOnCubicCurve(pointA, pointB, controlPointA, controlPointB, position) {\r\n    var point = { x: 0, y: 0 };\r\n    var mt1 = 1 - position;\r\n    var mt2 = mt1 * mt1;\r\n    var mt3 = mt2 * mt1;\r\n    point.x = pointA.x * mt3 + controlPointA.x * 3 * mt2 * position + controlPointB.x * 3 * mt1 * position * position + pointB.x * position * position * position;\r\n    point.y = pointA.y * mt3 + controlPointA.y * 3 * mt2 * position + controlPointB.y * 3 * mt1 * position * position + pointB.y * position * position * position;\r\n    return point;\r\n}\r\n/**\r\n * [getCubicControlPointA description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param p0        [description]\r\n * @param p1        [description]\r\n * @param p2        [description]\r\n * @param p3        [description]\r\n * @param tensionX  [description]\r\n * @param tensionY  [description]\r\n * @return [description]\r\n */\r\nexport function getCubicControlPointA(p0, p1, p2, p3, tensionX, tensionY) {\r\n    tensionX = adjustTension(tensionX);\r\n    tensionY = adjustTension(tensionY);\r\n    return { x: ((-p0.x + p1.x / tensionX + p2.x) * tensionX), y: ((-p0.y + p1.y / tensionY + p2.y) * tensionY) };\r\n}\r\n/**\r\n * [getCubicControlPointB description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param p0        [description]\r\n * @param p1        [description]\r\n * @param p2        [description]\r\n * @param p3        [description]\r\n * @param tensionX  [description]\r\n * @param tensionY  [description]\r\n * @return [description]\r\n */\r\nexport function getCubicControlPointB(p0, p1, p2, p3, tensionX, tensionY) {\r\n    tensionX = adjustTension(tensionX);\r\n    tensionY = adjustTension(tensionY);\r\n    return { x: ((p1.x + p2.x / tensionX - p3.x) * tensionX), y: ((p1.y + p2.y / tensionY - p3.y) * tensionY) };\r\n}\r\n/**\r\n * [adjustTension description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param tension  [description]\r\n * @return [description]\r\n */\r\nexport function adjustTension(tension) {\r\n    return 1 - tension + 0.00001;\r\n}\r\n/**\r\n * [normalizeAngle description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param value  [description]\r\n * @return [description]\r\n */\r\nexport function normalizeAngle(value) {\r\n    if (value == 360) {\r\n        return 360;\r\n    }\r\n    return value % 360;\r\n}\r\n/**\r\n * [normalizeAngleToRange description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @todo review this with various angles, can be tested on radar chart with custom start/end angles\r\n * @param value       [description]\r\n * @param startAngle  [description]\r\n * @param endAngle    [description]\r\n * @return [description]\r\n */\r\nexport function fitAngleToRange(value, startAngle, endAngle) {\r\n    if (startAngle > endAngle) {\r\n        var temp = startAngle;\r\n        startAngle = endAngle;\r\n        endAngle = temp;\r\n    }\r\n    value = normalizeAngle(value);\r\n    var count = (startAngle - normalizeAngle(startAngle)) / 360;\r\n    if (value < startAngle) {\r\n        value += 360 * (count + 1);\r\n    }\r\n    var maxEnd = startAngle + (endAngle - startAngle) / 2 + 180;\r\n    var maxStart = startAngle + (endAngle - startAngle) / 2 - 180;\r\n    if (value > endAngle) {\r\n        if (value - 360 > startAngle) {\r\n            value -= 360;\r\n        }\r\n        else {\r\n            if (value < maxEnd) {\r\n                value = endAngle;\r\n            }\r\n            else {\r\n                value = startAngle;\r\n            }\r\n        }\r\n    }\r\n    if (value < startAngle) {\r\n        if (value > maxStart) {\r\n            value = startAngle;\r\n        }\r\n        else {\r\n            value = endAngle;\r\n        }\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * Returns [[IRectangle]] of an arc in relative values, assuming that the\r\n * center is at the circle center.\r\n *\r\n * Used to find out max radius of an arc.\r\n *\r\n * @ignore Exclude from docs\r\n * @param startAngle  Start angle\r\n * @param endAngle    End angle\r\n * @param radius    \t Relative radius\r\n * @return Rectangle\r\n */\r\nexport function getArcRect(startAngle, endAngle, radius) {\r\n    var minX = Number.MAX_VALUE;\r\n    var minY = Number.MAX_VALUE;\r\n    var maxX = -Number.MAX_VALUE;\r\n    var maxY = -Number.MAX_VALUE;\r\n    var bpoints = [];\r\n    if (!$type.isNumber(radius)) {\r\n        radius = 1;\r\n    }\r\n    bpoints.push(getArcPoint(radius, startAngle));\r\n    bpoints.push(getArcPoint(radius, endAngle));\r\n    var fromAngle = Math.min(Math.floor(startAngle / 90) * 90, Math.floor(endAngle / 90) * 90);\r\n    var toAngle = Math.max(Math.ceil(startAngle / 90) * 90, Math.ceil(endAngle / 90) * 90);\r\n    for (var angle = fromAngle; angle <= toAngle; angle += 90) {\r\n        if (angle >= startAngle && angle <= endAngle) {\r\n            bpoints.push(getArcPoint(radius, angle));\r\n        }\r\n    }\r\n    for (var i = 0; i < bpoints.length; i++) {\r\n        var pt = bpoints[i];\r\n        if (pt.x < minX) {\r\n            minX = pt.x;\r\n        }\r\n        if (pt.y < minY) {\r\n            minY = pt.y;\r\n        }\r\n        if (pt.x > maxX) {\r\n            maxX = pt.x;\r\n        }\r\n        if (pt.y > maxY) {\r\n            maxY = pt.y;\r\n        }\r\n    }\r\n    return ({ x: minX, y: minY, width: maxX - minX, height: maxY - minY });\r\n}\r\n/**\r\n * Returns point on arc\r\n *\r\n * @param center point\r\n * @param radius\r\n * @param arc\r\n * @return {boolean}\r\n */\r\nexport function getArcPoint(radius, arc) {\r\n    return ({ x: radius * cos(arc), y: radius * sin(arc) });\r\n}\r\n/**\r\n * Returns true if a point is within rectangle\r\n *\r\n * @param point\r\n * @param rectangle\r\n * @return {boolean}\r\n */\r\nexport function isInRectangle(point, rectangle) {\r\n    if (point.x >= rectangle.x && point.x <= rectangle.x + rectangle.width && point.y >= rectangle.y && point.y <= rectangle.y + rectangle.height) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nexport function getLineIntersection(pointA1, pointA2, pointB1, pointB2) {\r\n    var x = ((pointA1.x * pointA2.y - pointA2.x * pointA1.y) * (pointB1.x - pointB2.x) - (pointA1.x - pointA2.x) * (pointB1.x * pointB2.y - pointB1.y * pointB2.x)) / ((pointA1.x - pointA2.x) * (pointB1.y - pointB2.y) - (pointA1.y - pointA2.y) * (pointB1.x - pointB2.x));\r\n    var y = ((pointA1.x * pointA2.y - pointA2.x * pointA1.y) * (pointB1.y - pointB2.y) - (pointA1.y - pointA2.y) * (pointB1.x * pointB2.y - pointB1.y * pointB2.x)) / ((pointA1.x - pointA2.x) * (pointB1.y - pointB2.y) - (pointA1.y - pointA2.y) * (pointB1.x - pointB2.x));\r\n    return { x: x, y: y };\r\n}\r\n", "import * as $math from \"./Math\";\r\nimport * as $type from \"./Type\";\r\n/**\r\n * ============================================================================\r\n * UTILITY FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Searches `array` for `value`.\r\n *\r\n * Returns -1 if not found.\r\n *\r\n * @param array  Source array\r\n * @param value  Value to search\r\n * @returns Index\r\n */\r\nexport function indexOf(array, value) {\r\n    var length = array.length;\r\n    for (var i = 0; i < length; ++i) {\r\n        // TODO handle NaN\r\n        if (array[i] === value) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n/**\r\n * Calls `test` for each element in `array`.\r\n *\r\n * If `test` returns `true` then it immediately returns `true`.\r\n *\r\n * If `test` returns `false` for all of the elements in `array` then it returns `false`.\r\n *\r\n * @param array  Source array\r\n * @param test   Function which is called on each element\r\n * @returns Whether `test` returned true or not\r\n */\r\nexport function any(array, test) {\r\n    var length = array.length;\r\n    for (var i = 0; i < length; ++i) {\r\n        if (test(array[i])) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Calls `fn` function for every member of array and returns a new array out\r\n * of all outputs.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n * @returns New array\r\n */\r\nexport function map(array, fn) {\r\n    var length = array.length;\r\n    var output = new Array(length);\r\n    for (var i = 0; i < length; ++i) {\r\n        output[i] = fn(array[i], i);\r\n    }\r\n    return output;\r\n}\r\n/**\r\n * Iterates through all items in array and calls `fn` function for each of\r\n * them.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\r\nexport function each(array, fn) {\r\n    var length = array.length;\r\n    for (var i = 0; i < length; ++i) {\r\n        fn(array[i], i);\r\n    }\r\n}\r\n/**\r\n * Iterates through all items in array in reverse order and calls `fn` function for each of\r\n * them.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\r\nexport function eachReverse(array, fn) {\r\n    var i = array.length;\r\n    while (i--) {\r\n        fn(array[i], i);\r\n    }\r\n}\r\n/**\r\n * Iterates through all items in array and calls `fn` function for each of\r\n * them.\r\n *\r\n * If `fn` call evaluates to `false`, further iteration is cancelled.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\r\nexport function eachContinue(array, fn) {\r\n    var length = array.length;\r\n    for (var i = 0; i < length; ++i) {\r\n        if (!fn(array[i], i)) {\r\n            break;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Shifts an item at `index` towards beginning of the array.\r\n *\r\n * @param array  Source array\r\n * @param index  Target element index\r\n */\r\nexport function shiftLeft(array, index) {\r\n    var length = array.length;\r\n    for (var i = index; i < length; ++i) {\r\n        array[i - index] = array[i];\r\n    }\r\n    array.length = length - index;\r\n}\r\n/**\r\n * Returns the last item of the array.\r\n *\r\n * @param array  Source array\r\n * @returns Last item\r\n */\r\nexport function last(array) {\r\n    var length = array.length;\r\n    return length ? array[length - 1] : undefined;\r\n}\r\n/**\r\n * Returns the first item of the array.\r\n *\r\n * @param array  Source array\r\n * @returns Last item\r\n */\r\nexport function first(array) {\r\n    return array[0];\r\n}\r\n/**\r\n * Inserts `element` into `array` at `index`.\r\n *\r\n * Caps `index` to be between `0` and `array.length`\r\n *\r\n * @param array    Source array\r\n * @param element  Item to insert\r\n * @param array    Index to insert item at\r\n */\r\nexport function insert(array, element, index) {\r\n    //if (array) {\r\n    index = $math.fitToRange(index, 0, array.length);\r\n    array.splice(index, 0, element);\r\n    //}\r\n}\r\n/**\r\n * Removes all copies of `element` from `array` (if they exist) and then\r\n * inserts `element` at `index`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item\r\n * @param array    Index to move item to\r\n */\r\nexport function setIndex(array, element, index) {\r\n    remove(array, element);\r\n    insert(array, element, index);\r\n}\r\n/**\r\n * Pushes all of the elements from `input` into `array`.\r\n *\r\n * @param array  Output array\r\n * @param input  Input array\r\n */\r\nexport function pushAll(array, input) {\r\n    var length = input.length;\r\n    for (var i = 0; i < length; ++i) {\r\n        array.push(input[i]);\r\n    }\r\n}\r\n/**\r\n * Removes `element` from `array`.\r\n *\r\n * If there are multiple copies of `element`, they are all removed.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to remove\r\n */\r\nexport function remove(array, element) {\r\n    var found = false;\r\n    var index = array.indexOf(element);\r\n    if (index !== -1) {\r\n        found = true;\r\n        array.splice(index, 1);\r\n        var length_1 = array.length;\r\n        while (index < length_1) {\r\n            // TODO handle NaN\r\n            if (array[index] === element) {\r\n                array.splice(index, 1);\r\n                --length_1;\r\n            }\r\n            else {\r\n                ++index;\r\n            }\r\n        }\r\n    }\r\n    return found;\r\n}\r\n/**\r\n * Adds an `element` to `array`.\r\n *\r\n * If array already contains and item like this, it is removed before adding\r\n * it again.\r\n *\r\n * Optionally `toIndex` can be specified to add element at specific index.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to add\r\n * @param array    Index to move item to\r\n */\r\nexport function move(array, element, toIndex) {\r\n    // @todo this implementation must be the same as the List.moveValue method\r\n    // @todo don't do anything if the desired index is the same as the current index\r\n    var index = indexOf(array, element);\r\n    // @todo remove all old values rather than only the first ?\r\n    if (index !== -1) {\r\n        removeIndex(array, index);\r\n    }\r\n    if (toIndex == null) {\r\n        array.push(element);\r\n    }\r\n    else {\r\n        insertIndex(array, toIndex, element);\r\n    }\r\n}\r\n/**\r\n * Inserts `element` into `array` at `index`.\r\n *\r\n * If `index` is not provided, it will insert `element` at the end of `array`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to add\r\n * @param array    Index to add item at\r\n */\r\nexport function add(array, element, index) {\r\n    // Append to the end if index is not set\r\n    if (!$type.isNumber(index)) {\r\n        array.push(element);\r\n    }\r\n    // Add to the beginning of array if index is 0\r\n    else if (index === 0) {\r\n        array.unshift(element);\r\n    }\r\n    // Add to indicated place if index is set\r\n    else {\r\n        array.splice(index, 0, element);\r\n    }\r\n}\r\n/**\r\n * Removes `element` from `array` (if it exists) and then inserts `element` at\r\n * `index`.\r\n *\r\n * If `index` is not provided, it will insert `element` at the end of `array`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to remove\r\n * @param array    Index to move item to\r\n */\r\nexport function replace(array, element, index) {\r\n    // check if exists\r\n    var ind = array.indexOf(element);\r\n    // remove if exists\r\n    if (ind !== -1) {\r\n        array.splice(ind, 1);\r\n    }\r\n    // add to end if index is not set\r\n    if (!$type.isNumber(index)) {\r\n        array.push(element);\r\n    }\r\n    // add to indicated place if index is set\r\n    else {\r\n        array.splice(index, 0, element);\r\n    }\r\n}\r\n/**\r\n * Wraps `input` in an array, if it isn't already an array.\r\n *\r\n * @param input  Source value\r\n * @return An array\r\n */\r\nexport function toArray(input) {\r\n    if (Array.isArray(input)) {\r\n        return input;\r\n    }\r\n    else {\r\n        return [input];\r\n    }\r\n}\r\n/**\r\n * Returns `true` if `element` exists in `array`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to search for\r\n * @returns Item in array?\r\n */\r\nexport function has(array, element) {\r\n    return indexOf(array, element) !== -1;\r\n}\r\n/**\r\n * Returns a shallow copy of `array`.\r\n *\r\n * @param array  Source array\r\n * @returns Copy of the array\r\n */\r\nexport function copy(array) {\r\n    var length = array.length;\r\n    // It's faster to create the array with a pre-defined length\r\n    var output = new Array(length);\r\n    for (var i = 0; i < length; ++i) {\r\n        // Because the array has a pre-defined length, we have to assign rather than push\r\n        // This is also faster than pushing\r\n        output[i] = array[i];\r\n    }\r\n    return output;\r\n}\r\n/**\r\n * Returns a copy of `array` which contains all the elements between `start`\r\n * and `end`. (including `start` and excluding `end`)\r\n *\r\n * If `end` is not provided, it defaults to `array.length`.\r\n *\r\n * @param array  Source array\r\n * @param start  Start index\r\n * @param end    End index\r\n * @returns Part of the array\r\n */\r\nexport function slice(array, start, end) {\r\n    if (end === void 0) { end = array.length; }\r\n    var output = new Array(end - start);\r\n    for (var i = start; i < end; ++i) {\r\n        output[i - start] = array[i];\r\n    }\r\n    return output;\r\n}\r\n/**\r\n * Inserts a value into array at specific index.\r\n *\r\n * @param array  Source array\r\n * @param index  Index\r\n * @param value  Value to insert\r\n */\r\nexport function insertIndex(array, index, value) {\r\n    array.splice(index, 0, value);\r\n}\r\n/**\r\n * Removes a value from array at specific index.\r\n *\r\n * @param array  Source array\r\n * @param index  Index\r\n */\r\nexport function removeIndex(array, index) {\r\n    array.splice(index, 1);\r\n}\r\n/**\r\n * Orders an array using specific `ordering` function and returns index of\r\n * the `value`.\r\n *\r\n * @ignore Exclude from docs\r\n * @param array     Source array\r\n * @param ordering  An ordering function\r\n * @param value     Value to search for\r\n * @returns Result of the search\r\n */\r\nexport function getSortedIndex(array, ordering, value) {\r\n    var start = 0;\r\n    var end = array.length;\r\n    var found = false;\r\n    while (start < end) {\r\n        // TODO is this faster/slower than using Math.floor ?\r\n        var pivot = (start + end) >> 1;\r\n        var order = ordering(value, array[pivot]);\r\n        // less\r\n        if (order < 0) {\r\n            end = pivot;\r\n            // equal\r\n        }\r\n        else if (order === 0) {\r\n            found = true;\r\n            start = pivot + 1;\r\n            // more\r\n        }\r\n        else {\r\n            start = pivot + 1;\r\n        }\r\n    }\r\n    return {\r\n        found: found,\r\n        index: (found ? start - 1 : start)\r\n    };\r\n}\r\n/**\r\n * Searches the array using custom function and returns index of the item if\r\n * found.\r\n *\r\n * Will call `matches` function on all items of the array. If return value\r\n * evaluates to `true`, index is returned.\r\n *\r\n * Otherwise returns -1.\r\n *\r\n * @param array    Source array\r\n * @param matches  Search function\r\n * @returns Index of the item if found\r\n */\r\nexport function findIndex(array, matches) {\r\n    var length = array.length;\r\n    for (var i = 0; i < length; ++i) {\r\n        if (matches(array[i], i)) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n/**\r\n * Searches the array using custom function and returns item if found.\r\n *\r\n * Will call `matches` function on all items of the array. If return value\r\n * evaluates to `true`, index is returned.\r\n *\r\n * Otherwise returns `undefined`.\r\n *\r\n * @param array    Source array\r\n * @param matches  Search function\r\n * @returns Item if found\r\n */\r\nexport function find(array, matches) {\r\n    var index = findIndex(array, matches);\r\n    if (index !== -1) {\r\n        return array[index];\r\n    }\r\n}\r\n/**\r\n * Iterates through all items in array and calls `fn` function for each of\r\n * them.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\r\nexport function shuffle(array) {\r\n    // https://stackoverflow.com/a/2450976/449477\r\n    var currentIndex = array.length, temporaryValue, randomIndex;\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n        // Pick a remaining element...\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex -= 1;\r\n        // And swap it with the current element.\r\n        temporaryValue = array[currentIndex];\r\n        array[currentIndex] = array[randomIndex];\r\n        array[randomIndex] = temporaryValue;\r\n    }\r\n}\r\nexport function keepIf(array, keep) {\r\n    var length = array.length;\r\n    var i = 0;\r\n    while (i < length) {\r\n        if (keep(array[i])) {\r\n            ++i;\r\n        }\r\n        else {\r\n            array.splice(i, 1);\r\n            --length;\r\n        }\r\n    }\r\n}\r\n", "import { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport * as $array from \"./Array\";\r\nimport * as $type from \"./Type\";\r\n/**\r\n * A base class for disposable objects.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nvar Disposer = /** @class */ (function () {\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param dispose  Function that disposes object\r\n     */\r\n    function Disposer(dispose) {\r\n        this._disposed = false;\r\n        this._dispose = dispose;\r\n    }\r\n    /**\r\n     * Checks if object is disposed.\r\n     *\r\n     * @return Disposed?\r\n     */\r\n    Disposer.prototype.isDisposed = function () {\r\n        return this._disposed;\r\n    };\r\n    /**\r\n     * Disposes the object.\r\n     */\r\n    Disposer.prototype.dispose = function () {\r\n        if (!this._disposed) {\r\n            this._disposed = true;\r\n            this._dispose();\r\n        }\r\n    };\r\n    return Disposer;\r\n}());\r\nexport { Disposer };\r\n/**\r\n * A collection of related disposers that can be disposed in one go.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nvar MultiDisposer = /** @class */ (function (_super) {\r\n    __extends(MultiDisposer, _super);\r\n    function MultiDisposer(disposers) {\r\n        return _super.call(this, function () {\r\n            $array.each(disposers, function (x) {\r\n                x.dispose();\r\n            });\r\n        }) || this;\r\n    }\r\n    return MultiDisposer;\r\n}(Disposer));\r\nexport { MultiDisposer };\r\n/**\r\n * A special kind of Disposer that has attached value set.\r\n *\r\n * If a new value is set using `set()` method, the old disposer value is\r\n * disposed.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nvar MutableValueDisposer = /** @class */ (function (_super) {\r\n    __extends(MutableValueDisposer, _super);\r\n    /**\r\n     * Constructor.\r\n     */\r\n    function MutableValueDisposer() {\r\n        var _this = _super.call(this, function () {\r\n            if ($type.hasValue(_this._disposer)) {\r\n                _this._disposer.dispose();\r\n                _this._disposer = undefined;\r\n            }\r\n        }) || this;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Returns current value.\r\n     *\r\n     * @return Value\r\n     */\r\n    MutableValueDisposer.prototype.get = function () {\r\n        return this._value;\r\n    };\r\n    /**\r\n     * Sets value and disposes previous disposer if it was set.\r\n     *\r\n     * @param value     New value\r\n     * @param disposer  Disposer\r\n     */\r\n    MutableValueDisposer.prototype.set = function (value, disposer) {\r\n        if ($type.hasValue(this._disposer)) {\r\n            this._disposer.dispose();\r\n        }\r\n        this._disposer = disposer;\r\n        this._value = value;\r\n    };\r\n    /**\r\n     * Resets the disposer value.\r\n     */\r\n    MutableValueDisposer.prototype.reset = function () {\r\n        this.set(undefined, undefined);\r\n    };\r\n    return MutableValueDisposer;\r\n}(Disposer));\r\nexport { MutableValueDisposer };\r\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nvar CounterDisposer = /** @class */ (function (_super) {\r\n    __extends(CounterDisposer, _super);\r\n    function CounterDisposer() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        /**\r\n         * [_counter description]\r\n         *\r\n         * @todo Description\r\n         */\r\n        _this._counter = 0;\r\n        return _this;\r\n    }\r\n    /**\r\n     * [increment description]\r\n     *\r\n     * @todo Description\r\n     */\r\n    CounterDisposer.prototype.increment = function () {\r\n        var _this = this;\r\n        // TODO throw an error if it is disposed\r\n        ++this._counter;\r\n        // TODO make this more efficient\r\n        return new Disposer(function () {\r\n            --_this._counter;\r\n            if (_this._counter === 0) {\r\n                _this.dispose();\r\n            }\r\n        });\r\n    };\r\n    return CounterDisposer;\r\n}(Disposer));\r\nexport { CounterDisposer };\r\n", "/**\r\n * A collection of low-level async operation stuff.\r\n */\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport * as $array from \"./Array\";\r\nvar pendingFrame = false;\r\nvar nextQueue = [];\r\nvar readQueue = [];\r\nvar writeQueue = [];\r\nvar idleQueue = [];\r\nvar fps = 1000 / 60;\r\n/**\r\n * [raf description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nexport var raf = (typeof requestAnimationFrame === \"function\"\r\n    ? function (fn) {\r\n        requestAnimationFrame(fn);\r\n    }\r\n    : function (fn) {\r\n        setTimeout(fn, fps);\r\n    });\r\n/**\r\n * [frameLoop description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nfunction frameLoop() {\r\n    var now = Date.now();\r\n    var length = nextQueue.length;\r\n    for (var i = 0; i < length; ++i) {\r\n        nextQueue[i](now);\r\n    }\r\n    $array.shiftLeft(nextQueue, length);\r\n    for (var i = 0; i < readQueue.length; ++i) {\r\n        readQueue[i](now);\r\n    }\r\n    readQueue.length = 0;\r\n    for (var i = 0; i < writeQueue.length; ++i) {\r\n        writeQueue[i](now);\r\n    }\r\n    writeQueue.length = 0;\r\n    if (nextQueue.length === 0 && readQueue.length === 0) {\r\n        pendingFrame = false;\r\n    }\r\n    else {\r\n        raf(frameLoop);\r\n    }\r\n}\r\n/**\r\n * [pendFrame description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nfunction pendFrame() {\r\n    if (!pendingFrame) {\r\n        pendingFrame = true;\r\n        raf(frameLoop);\r\n    }\r\n}\r\n/**\r\n * [nextFrame description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param fn [description]\r\n */\r\nexport function nextFrame(fn) {\r\n    nextQueue.push(fn);\r\n    pendFrame();\r\n}\r\n/**\r\n * [readFrame description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param fn [description]\r\n */\r\nexport function readFrame(fn) {\r\n    readQueue.push(fn);\r\n    pendFrame();\r\n}\r\n/**\r\n * [writeFrame description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param fn [description]\r\n */\r\nexport function writeFrame(fn) {\r\n    writeQueue.push(fn);\r\n    pendFrame();\r\n}\r\n/**\r\n * [whenIdle description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param fn [description]\r\n */\r\nexport function whenIdle(fn) {\r\n    idleQueue.push(fn);\r\n}\r\n/**\r\n * [triggerIdle description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @todo Maybe don't trigger a callback which was added while in the middle of triggering?\r\n */\r\nexport function triggerIdle() {\r\n    var now = Date.now();\r\n    var length = idleQueue.length;\r\n    for (var i = 0; i < length; ++i) {\r\n        idleQueue.shift()(now);\r\n    }\r\n}\r\n", "/**\r\n * Event Dispatcher module is used for registering listeners and dispatching\r\n * events across amCharts system.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Disposer } from \"./Disposer\";\r\nimport * as $array from \"./Array\";\r\nimport * as $async from \"./AsyncPending\";\r\nimport * as $type from \"./Type\";\r\n/*export interface IEventDispatcher<T> {\r\n    isDisposed(): boolean;\r\n    dispose(): void;\r\n    hasListeners(): boolean;\r\n    enable(): void;\r\n    disable(): void;\r\n    enableType<Key extends keyof T>(type: Key): void;\r\n    disableType<Key extends keyof T>(type: Key, amount?: number): void;\r\n    isEnabled<Key extends keyof T>(type: Key): boolean;\r\n    has<C, Key extends keyof T>(type: Key, callback?: (this: C, event: T[Key]) => void, context?: C): boolean;\r\n    dispatchImmediately<Key extends keyof T>(type: Key, event: T[Key]): void;\r\n    dispatch<Key extends keyof T>(type: Key, event: T[Key]): void;\r\n    onAll<C, Key extends keyof T>(callback: (this: C, type: Key, event: T[Key]) => void, context?: C): IDisposer;\r\n    on<C, Key extends keyof T>(type: Key, callback: (this: C, event: T[Key]) => void, context?: C): IDisposer;\r\n    once<C, Key extends keyof T>(type: Key, callback: (this: C, event: T[Key]) => void, context?: C): IDisposer;\r\n    off<C, Key extends keyof T>(type: Key, callback: (this: C, event: T[Key]) => void, context?: C): void;\r\n    off<C, Key extends keyof T>(type: Key, callback: (this: C, event: T[Key]) => void, context?: C): void;\r\n    copyFrom(source: this): void;\r\n}*/\r\n/**\r\n * Universal Event Dispatcher.\r\n *\r\n * @important\r\n */\r\nvar EventDispatcher = /** @class */ (function () {\r\n    /**\r\n     * Constructor\r\n     */\r\n    function EventDispatcher() {\r\n        this._listeners = [];\r\n        this._killed = [];\r\n        this._disabled = {};\r\n        this._iterating = 0;\r\n        this._enabled = true;\r\n        this._disposed = false;\r\n    }\r\n    /**\r\n     * Returns if this object has been already disposed.\r\n     *\r\n     * @return Disposed?\r\n     */\r\n    EventDispatcher.prototype.isDisposed = function () {\r\n        return this._disposed;\r\n    };\r\n    /**\r\n     * Dispose (destroy) this object.\r\n     */\r\n    EventDispatcher.prototype.dispose = function () {\r\n        if (!this._disposed) {\r\n            this._disposed = true;\r\n            var a = this._listeners;\r\n            this._iterating = 1;\r\n            this._listeners = null;\r\n            this._disabled = null;\r\n            try {\r\n                $array.each(a, function (x) {\r\n                    x.disposer.dispose();\r\n                });\r\n            }\r\n            finally {\r\n                this._killed = null;\r\n                this._iterating = null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Checks if this particular event dispatcher has any listeners set.\r\n     *\r\n     * @return Has listeners?\r\n     */\r\n    EventDispatcher.prototype.hasListeners = function () {\r\n        return this._listeners.length !== 0;\r\n    };\r\n    /**\r\n     * Checks if this particular event dispatcher has any particular listeners set.\r\n     *\r\n     * @return Has particular event listeners?\r\n     */\r\n    EventDispatcher.prototype.hasListenersByType = function (type) {\r\n        return $array.any(this._listeners, function (x) { return (x.type === null || x.type === type) && !x.killed; });\r\n    };\r\n    /**\r\n     * Enable dispatching of events if they were previously disabled by\r\n     * `disable()`.\r\n     */\r\n    EventDispatcher.prototype.enable = function () {\r\n        this._enabled = true;\r\n    };\r\n    /**\r\n     * Disable dispatching of events until re-enabled by `enable()`.\r\n     */\r\n    EventDispatcher.prototype.disable = function () {\r\n        this._enabled = false;\r\n    };\r\n    /**\r\n     * Enable dispatching particular event, if it was disabled before by\r\n     * `disableType()`.\r\n     *\r\n     * @param type Event type\r\n     */\r\n    EventDispatcher.prototype.enableType = function (type) {\r\n        delete this._disabled[type];\r\n    };\r\n    /**\r\n     * Disable dispatching of events for a certain event type.\r\n     *\r\n     * Optionally, can set how many dispatches to skip before automatically\r\n     * re-enabling the dispatching.\r\n     *\r\n     * @param type    Event type\r\n     * @param amount  Number of event dispatches to skip\r\n     */\r\n    EventDispatcher.prototype.disableType = function (type, amount) {\r\n        if (amount === void 0) { amount = Infinity; }\r\n        this._disabled[type] = amount;\r\n    };\r\n    /**\r\n     * Removes listener from dispatcher.\r\n     *\r\n     * Will throw an exception if such listener does not exists.\r\n     *\r\n     * @param listener Listener to remove\r\n     */\r\n    EventDispatcher.prototype._removeListener = function (listener) {\r\n        if (this._iterating === 0) {\r\n            var index = this._listeners.indexOf(listener);\r\n            if (index === -1) {\r\n                throw new Error(\"Invalid state: could not remove listener\");\r\n            }\r\n            this._listeners.splice(index, 1);\r\n        }\r\n        else {\r\n            this._killed.push(listener);\r\n        }\r\n    };\r\n    /**\r\n     * Removes existing listener by certain parameters.\r\n     *\r\n     * @param once         Listener's once setting\r\n     * @param type         Listener's type\r\n     * @param callback     Callback function\r\n     * @param context      Callback context\r\n     */\r\n    EventDispatcher.prototype._removeExistingListener = function (once, type, callback, context) {\r\n        if (this._disposed) {\r\n            throw new Error(\"EventDispatcher is disposed\");\r\n        }\r\n        this._eachListener(function (info) {\r\n            if (info.once === once && // TODO is this correct ?\r\n                info.type === type &&\r\n                (callback == null || info.callback === callback) &&\r\n                info.context === context) {\r\n                info.disposer.dispose();\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Checks if dispatching for particular event type is enabled.\r\n     *\r\n     * @param type  Event type\r\n     * @return Enabled?\r\n     */\r\n    EventDispatcher.prototype.isEnabled = function (type) {\r\n        if (this._disposed) {\r\n            throw new Error(\"EventDispatcher is disposed\");\r\n        }\r\n        // TODO is this check correct ?\r\n        return this._enabled && this._listeners.length > 0 && this.hasListenersByType(type) && this._disabled[type] == null;\r\n    };\r\n    /**\r\n     * Checks if there's already a listener with specific parameters.\r\n     *\r\n     * @param type      Listener's type\r\n     * @param callback  Callback function\r\n     * @param context   Callback context\r\n     * @return Has listener?\r\n     */\r\n    EventDispatcher.prototype.has = function (type, callback, context) {\r\n        var index = $array.findIndex(this._listeners, function (info) {\r\n            return info.once !== true && // Ignoring \"once\" listeners\r\n                info.type === type &&\r\n                (callback == null || info.callback === callback) &&\r\n                info.context === context;\r\n        });\r\n        return index !== -1;\r\n    };\r\n    /**\r\n     * Checks whether event of the particular type should be dispatched.\r\n     *\r\n     * @param type  Event type\r\n     * @return Dispatch?\r\n     */\r\n    EventDispatcher.prototype._shouldDispatch = function (type) {\r\n        if (this._disposed) {\r\n            throw new Error(\"EventDispatcher is disposed\");\r\n        }\r\n        var count = this._disabled[type];\r\n        if (!$type.isNumber(count)) {\r\n            return this._enabled;\r\n        }\r\n        else {\r\n            if (count <= 1) {\r\n                delete this._disabled[type];\r\n            }\r\n            else {\r\n                --this._disabled[type];\r\n            }\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * [_eachListener description]\r\n     *\r\n     * All of this extra code is needed when a listener is removed while iterating\r\n     *\r\n     * @todo Description\r\n     * @param fn [description]\r\n     */\r\n    EventDispatcher.prototype._eachListener = function (fn) {\r\n        var _this = this;\r\n        ++this._iterating;\r\n        try {\r\n            $array.each(this._listeners, fn);\r\n        }\r\n        finally {\r\n            --this._iterating;\r\n            // TODO should this be inside or outside the finally ?\r\n            if (this._iterating === 0 && this._killed.length !== 0) {\r\n                // Remove killed listeners\r\n                $array.each(this._killed, function (killed) {\r\n                    _this._removeListener(killed);\r\n                });\r\n                this._killed.length = 0;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Dispatches an event immediately without waiting for next cycle.\r\n     *\r\n     * @param type   Event type\r\n     * @param event  Event object\r\n     * @todo automatically add in type and target properties if they are missing\r\n     */\r\n    EventDispatcher.prototype.dispatchImmediately = function (type, event) {\r\n        if (this._shouldDispatch(type)) {\r\n            // TODO check if it's faster to use an object of listeners rather than a single big array\r\n            // TODO if the function throws, maybe it should keep going ?\r\n            this._eachListener(function (listener) {\r\n                if (!listener.killed && (listener.type === null || listener.type === type)) {\r\n                    listener.dispatch(type, event);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Shelves the event to be dispatched within next update cycle.\r\n     *\r\n     * @param type   Event type\r\n     * @param event  Event object\r\n     * @todo automatically add in type and target properties if they are missing\r\n     */\r\n    EventDispatcher.prototype.dispatch = function (type, event) {\r\n        if (this._shouldDispatch(type)) {\r\n            this._eachListener(function (listener) {\r\n                // TODO check if it's faster to use an object of listeners rather than a single big array\r\n                if (!listener.killed && (listener.type === null || listener.type === type)) {\r\n                    // TODO if the function throws, maybe it should keep going ?\r\n                    // TODO dispatch during the update cycle, rather than using whenIdle\r\n                    $async.whenIdle(function () {\r\n                        if (!listener.killed) {\r\n                            listener.dispatch(type, event);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Creates, catalogs and returns an [[EventListener]].\r\n     *\r\n     * Event listener can be disposed.\r\n     *\r\n     * @param once         Listener's once setting\r\n     * @param type         Listener's type\r\n     * @param callback     Callback function\r\n     * @param context      Callback context\r\n     * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied\r\n     * @param dispatch\r\n     * @returns An event listener\r\n     */\r\n    EventDispatcher.prototype._on = function (once, type, callback, context, shouldClone, dispatch) {\r\n        var _this = this;\r\n        if (this._disposed) {\r\n            throw new Error(\"EventDispatcher is disposed\");\r\n        }\r\n        this._removeExistingListener(once, type, callback, context);\r\n        var info = {\r\n            type: type,\r\n            callback: callback,\r\n            context: context,\r\n            shouldClone: shouldClone,\r\n            dispatch: dispatch,\r\n            killed: false,\r\n            once: once,\r\n            disposer: new Disposer(function () {\r\n                info.killed = true;\r\n                _this._removeListener(info);\r\n            })\r\n        };\r\n        this._listeners.push(info);\r\n        return info;\r\n    };\r\n    /**\r\n     * Creates an event listener to be invoked on **any** event.\r\n     *\r\n     * @param callback     Callback function\r\n     * @param context      Callback context\r\n     * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied\r\n     * @returns A disposable event listener\r\n     * @todo what if `listen` is called on the same function twice ?\r\n     */\r\n    EventDispatcher.prototype.onAll = function (callback, context, shouldClone) {\r\n        if (shouldClone === void 0) { shouldClone = true; }\r\n        return this._on(false, null, callback, context, shouldClone, function (type, event) { return callback.call(context, type, event); }).disposer;\r\n    };\r\n    /**\r\n     * Creates an event listener to be invoked on a specific event type.\r\n     *\r\n     * ```TypeScript\r\n     * series.events.on(\"hidden\", (ev) => {\r\n     *   console.log(\"Series hidden: \" + ev.target.name);\r\n     * }, this);\r\n     * ```\r\n     * ```JavaScript\r\n     * series.events.on(\"hidden\", function(ev) {\r\n     *   console.log(\"Series hidden: \" + ev.target.name);\r\n     * }, this);\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": [{\r\n     *     // ...\r\n     *     \"events\": {\r\n     *     \t\"hidden\": function(ev) {\r\n     *     \t  console.log(\"Series hidden: \" + ev.target.name);\r\n     *     \t}\r\n     *     }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * The above will invoke our custom event handler whenever series we put\r\n     * event on is hidden.\r\n     *\r\n     * @param type         Listener's type\r\n     * @param callback     Callback function\r\n     * @param context      Callback context\r\n     * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied\r\n     * @returns A disposable event listener\r\n     * @todo what if `listen` is called on the same function twice ?\r\n     */\r\n    EventDispatcher.prototype.on = function (type, callback, context, shouldClone) {\r\n        if (shouldClone === void 0) { shouldClone = true; }\r\n        return this._on(false, type, callback, context, shouldClone, function (type, event) { return callback.call(context, event); }).disposer;\r\n    };\r\n    /**\r\n     * Creates an event listener to be invoked on a specific event type once.\r\n     *\r\n     * Once the event listener is invoked, it is automatically disposed.\r\n     *\r\n     * ```TypeScript\r\n     * series.events.on(\"hidden\", (ev) => {\r\n     *   console.log(\"Series hidden: \" + ev.target.name);\r\n     * }, this);\r\n     * ```\r\n     * ```JavaScript\r\n     * series.events.on(\"hidden\", function(ev) {\r\n     *   console.log(\"Series hidden: \" + ev.target.name);\r\n     * }, this);\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": [{\r\n     *     // ...\r\n     *     \"events\": {\r\n     *     \t\"hidden\": function(ev) {\r\n     *     \t  console.log(\"Series hidden: \" + ev.target.name);\r\n     *     \t}\r\n     *     }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * The above will invoke our custom event handler the first time series we\r\n     * put event on is hidden.\r\n     *\r\n     * @param type         Listener's type\r\n     * @param callback     Callback function\r\n     * @param context      Callback context\r\n     * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied\r\n     * @returns A disposable event listener\r\n     * @todo what if `listen` is called on the same function twice ?\r\n     */\r\n    EventDispatcher.prototype.once = function (type, callback, context, shouldClone) {\r\n        if (shouldClone === void 0) { shouldClone = true; }\r\n        var x = this._on(true, type, callback, context, shouldClone, function (type, event) {\r\n            x.disposer.dispose();\r\n            callback.call(context, event);\r\n        });\r\n        // TODO maybe this should return a different Disposer ?\r\n        return x.disposer;\r\n    };\r\n    /**\r\n     * Removes the event listener with specific parameters.\r\n     *\r\n     * @param type         Listener's type\r\n     * @param callback     Callback function\r\n     * @param context      Callback context\r\n     */\r\n    EventDispatcher.prototype.off = function (type, callback, context) {\r\n        this._removeExistingListener(false, type, callback, context);\r\n    };\r\n    /**\r\n     * Copies all dispatcher parameters, including listeners, from another event\r\n     * dispatcher.\r\n     *\r\n     * @param source Source event dispatcher\r\n     */\r\n    EventDispatcher.prototype.copyFrom = function (source) {\r\n        var _this = this;\r\n        if (this._disposed) {\r\n            throw new Error(\"EventDispatcher is disposed\");\r\n        }\r\n        if (source === this) {\r\n            throw new Error(\"Cannot copyFrom the same TargetedEventDispatcher\");\r\n        }\r\n        $array.each(source._listeners, function (x) {\r\n            // TODO is this correct ?\r\n            if (!x.killed && x.shouldClone) {\r\n                if (x.type === null) {\r\n                    _this.onAll(x.callback, x.context);\r\n                }\r\n                else if (x.once) {\r\n                    _this.once(x.type, x.callback, x.context);\r\n                }\r\n                else {\r\n                    _this.on(x.type, x.callback, x.context);\r\n                }\r\n            }\r\n        });\r\n    };\r\n    return EventDispatcher;\r\n}());\r\nexport { EventDispatcher };\r\n/**\r\n * A version of the [[EventDispatcher]] that dispatches events for a specific\r\n * target object.\r\n *\r\n * @important\r\n */\r\nvar TargetedEventDispatcher = /** @class */ (function (_super) {\r\n    __extends(TargetedEventDispatcher, _super);\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param target Event dispatcher target\r\n     */\r\n    function TargetedEventDispatcher(target) {\r\n        var _this = _super.call(this) || this;\r\n        _this.target = target;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Copies all dispatcher parameters, including listeners, from another event\r\n     * dispatcher.\r\n     *\r\n     * @param source Source event dispatcher\r\n     */\r\n    TargetedEventDispatcher.prototype.copyFrom = function (source) {\r\n        var _this = this;\r\n        if (this._disposed) {\r\n            throw new Error(\"EventDispatcher is disposed\");\r\n        }\r\n        if (source === this) {\r\n            throw new Error(\"Cannot copyFrom the same TargetedEventDispatcher\");\r\n        }\r\n        $array.each(source._listeners, function (x) {\r\n            // TODO very hacky\r\n            if (x.context === source.target) {\r\n                return;\r\n            }\r\n            // TODO is this correct ?\r\n            if (!x.killed && x.shouldClone) {\r\n                if (x.type === null) {\r\n                    _this.onAll(x.callback, x.context);\r\n                }\r\n                else if (x.once) {\r\n                    _this.once(x.type, x.callback, x.context);\r\n                }\r\n                else {\r\n                    _this.on(x.type, x.callback, x.context);\r\n                }\r\n            }\r\n        });\r\n    };\r\n    return TargetedEventDispatcher;\r\n}(EventDispatcher));\r\nexport { TargetedEventDispatcher };\r\n", "/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport * as $array from \"./Array\";\r\nimport * as $type from \"./Type\";\r\n/**\r\n * ============================================================================\r\n * UTILITY FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Returns an iterator for all entries in object.\r\n *\r\n * Can be used to safely iterate through all properties of the object.\r\n *\r\n * @param object  Source object\r\n * @returns Iterator\r\n */\r\nexport function entries(object) {\r\n    return function (push) {\r\n        // TODO make this more efficient ?\r\n        for (var key in object) {\r\n            if (hasKey(object, key)) {\r\n                if (!push([key, object[key]])) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    };\r\n}\r\n/**\r\n * Returns an array of object's property names.\r\n *\r\n * @param object  Source object\r\n * @returns Object property names\r\n */\r\nexport function keys(object) {\r\n    var output = [];\r\n    for (var key in object) {\r\n        if (hasKey(object, key)) {\r\n            output.push(key);\r\n        }\r\n    }\r\n    return output;\r\n}\r\n/**\r\n * Returns an array of object's property names ordered using specific ordering\r\n * function.\r\n *\r\n * @param object  Source object\r\n * @param order   Ordering function\r\n * @returns Object property names\r\n */\r\nexport function keysOrdered(object, order) {\r\n    return keys(object).sort(order);\r\n}\r\n/**\r\n * Checks if `object` has a specific `key`.\r\n *\r\n * @param object  Source object\r\n * @param key     Property name\r\n * @returns Has key?\r\n */\r\nexport function hasKey(object, key) {\r\n    return {}.hasOwnProperty.call(object, key);\r\n}\r\n/**\r\n * Returns value of the specific `key`.\r\n *\r\n * @param object  Source object\r\n * @param key     Property name\r\n * @returns Key value\r\n */\r\nexport function getKey(object, key) {\r\n    return object[key];\r\n}\r\n/**\r\n * Iterates through all properties of the object calling `fn` for each of them.\r\n *\r\n * If return value of the function evaluates to `false` further iteration is\r\n * cancelled.\r\n *\r\n * @param object  Source object\r\n * @param fn      Callback function\r\n */\r\nexport function eachContinue(object, fn) {\r\n    for (var key in object) {\r\n        if (hasKey(object, key)) {\r\n            if (!fn(key, object[key])) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * Iterates through all properties of the object calling `fn` for each of them.\r\n *\r\n * @param object  Source object\r\n * @param fn      Callback function\r\n */\r\nexport function each(object, fn) {\r\n    eachContinue(object, function (key, value) {\r\n        fn(key, value);\r\n        return true;\r\n    });\r\n}\r\n/**\r\n * Orders object properties using custom `ord` function and iterates through\r\n * them calling `fn` for each of them.\r\n *\r\n * @param object  Source object\r\n * @param fn      Callback function\r\n * @param order   Ordering function\r\n */\r\nexport function eachOrdered(object, fn, ord) {\r\n    $array.each(keysOrdered(object, ord), function (key) {\r\n        fn(key, object[key]);\r\n    });\r\n}\r\n/**\r\n * Returns a copy of the object.\r\n *\r\n * @param object  Source object\r\n * @returns Copy of the object\r\n */\r\nexport function copy(object) {\r\n    return Object.assign({}, object);\r\n}\r\n/**\r\n * Merges two objects and returns a new object that contains properties from\r\n * both source objects.\r\n *\r\n * @param object1  Source object #1\r\n * @param object2  Source object #2\r\n * @returns Combined object\r\n */\r\nexport function merge(object1, object2) {\r\n    return Object.assign({}, object1, object2);\r\n}\r\n/**\r\n * Returns object clone.\r\n *\r\n * @param object  Source object\r\n * @returns       Clone\r\n */\r\nexport function clone(object) {\r\n    return JSON.parse(JSON.stringify(object));\r\n}\r\n/**\r\n * Copies a list of properties from one object to another.\r\n *\r\n * Will not copy empty properties.\r\n *\r\n * @param source  Source object\r\n * @param target    Target object\r\n * @param keys  List of keys to copy\r\n */\r\nexport function copyProperties(source, target, keys) {\r\n    $array.each(keys, function (key) {\r\n        if ($type.hasValue(source[key])) {\r\n            target[key] = source[key];\r\n        }\r\n    });\r\n}\r\n/**\r\n * Copies a list of properties from one object to another only if target does't have value of the property set.\r\n *\r\n * Will not copy empty properties.\r\n *\r\n * @param source  Source object\r\n * @param target    Target object\r\n * @param keys  List of keys to copy\r\n */\r\nexport function softCopyProperties(source, target, keys) {\r\n    $array.each(keys, function (key) {\r\n        if ($type.hasValue(source[key]) && !($type.hasValue(target[key]))) {\r\n            target[key] = source[key];\r\n        }\r\n    });\r\n}\r\n/**\r\n * Copies a list of properties from one object to another.\r\n *\r\n * Will copy empty properties.\r\n *\r\n * @param source  Source object\r\n * @param target    Target object\r\n * @param keys  List of keys to copy\r\n */\r\nexport function forceCopyProperties(source, target, keys) {\r\n    $array.each(keys, function (key) {\r\n        target[key] = source[key];\r\n    });\r\n}\r\n/**\r\n * Copies all properties from one object to another.\r\n *\r\n * @param from  Source object\r\n * @param to    Target object\r\n */\r\nexport function copyAllProperties(from, to) {\r\n    copyProperties(from, to, keys(from));\r\n}\r\n", "import * as $array from \"./Array\";\r\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nexport function fromArray(array) {\r\n    return function (push) {\r\n        var length = array.length;\r\n        for (var i = 0; i < length; ++i) {\r\n            if (!push(array[i])) {\r\n                break;\r\n            }\r\n        }\r\n    };\r\n}\r\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nexport function length(iter) {\r\n    var sum = 0;\r\n    iter(function (_) {\r\n        ++sum;\r\n        return true;\r\n    });\r\n    return sum;\r\n}\r\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nexport function toArray(iter) {\r\n    var output = [];\r\n    iter(function (value) {\r\n        output.push(value);\r\n        return true;\r\n    });\r\n    return output;\r\n}\r\n/**\r\n * [iter description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nexport function eachContinue(iter, fn) {\r\n    iter(fn);\r\n}\r\n/**\r\n * [iter description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nexport function each(iter, fn) {\r\n    iter(function (value) {\r\n        fn(value);\r\n        return true;\r\n    });\r\n}\r\n/**\r\n * [iter description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nexport function sort(iter, fn) {\r\n    return fromArray(toArray(iter).sort(fn));\r\n}\r\n/**\r\n * [A description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nexport function map(iter, fn) {\r\n    return function (push) { return iter(function (value) { return push(fn(value)); }); };\r\n}\r\n/**\r\n * [iter description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nexport function filter(iter, fn) {\r\n    return function (push) { return iter(function (value) {\r\n        if (fn(value)) {\r\n            return push(value);\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }); };\r\n}\r\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nexport function concat() {\r\n    var args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        args[_i] = arguments[_i];\r\n    }\r\n    return function (push) {\r\n        var go = true;\r\n        var push2 = function (value) { return (go = push(value)); };\r\n        var length = args.length;\r\n        for (var i = 0; i < length; ++i) {\r\n            args[i](push2);\r\n            if (!go) {\r\n                break;\r\n            }\r\n        }\r\n    };\r\n}\r\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nexport function flatten(iter) {\r\n    return function (push) {\r\n        var go = true;\r\n        var push2 = function (value) { return (go = push(value)); };\r\n        iter(function (value) {\r\n            value(push2);\r\n            return go;\r\n        });\r\n    };\r\n}\r\n/**\r\n * [number description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nexport function indexed(iter) {\r\n    return function (push) {\r\n        var index = 0;\r\n        iter(function (value) { return push([index++, value]); });\r\n    };\r\n}\r\n/**\r\n * [iter description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nexport function findIndex(iter, matches) {\r\n    var found = false;\r\n    var i = 0;\r\n    iter(function (value) {\r\n        if (matches(value)) {\r\n            found = true;\r\n            return false;\r\n        }\r\n        else {\r\n            ++i;\r\n            return true;\r\n        }\r\n    });\r\n    return (found ? i : -1);\r\n}\r\n/**\r\n * [iter description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nexport function find(iter, matches) {\r\n    var output;\r\n    iter(function (value) {\r\n        if (matches(value)) {\r\n            output = value;\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    });\r\n    return output;\r\n}\r\n/**\r\n * [A description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nexport function findMap(iter, matches) {\r\n    var output;\r\n    iter(function (value) {\r\n        var v = matches(value);\r\n        if (v !== null) {\r\n            output = v;\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    });\r\n    return output;\r\n}\r\n/**\r\n * [iter description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nexport function contains(iter, matches) {\r\n    var output = false;\r\n    iter(function (value) {\r\n        if (matches(value)) {\r\n            output = true;\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    });\r\n    return output;\r\n}\r\n/**\r\n * [A description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nexport function foldl(iter, init, fn) {\r\n    iter(function (value) {\r\n        init = fn(init, value);\r\n        return true;\r\n    });\r\n    return init;\r\n}\r\n/**\r\n * [min2 description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param left [description]\r\n * @param right [description]\r\n * @return [description]\r\n */\r\nfunction min2(left, right) {\r\n    if (left == null || right < left) {\r\n        return right;\r\n    }\r\n    else {\r\n        return left;\r\n    }\r\n}\r\n/**\r\n * [min description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Verify that this works correctly\r\n * @todo Description\r\n * @param a [description]\r\n * @return [description]\r\n */\r\nexport function min(a) {\r\n    return foldl(a, null, min2);\r\n}\r\n/**\r\n * [max2 description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param left [description]\r\n * @param right [description]\r\n * @return [description]\r\n */\r\nfunction max2(left, right) {\r\n    if (left == null || right > left) {\r\n        return right;\r\n    }\r\n    else {\r\n        return left;\r\n    }\r\n}\r\n/**\r\n * [max description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Verify that this works correctly\r\n * @todo Description\r\n * @param a [description]\r\n * @return [description]\r\n */\r\nexport function max(a) {\r\n    return foldl(a, null, max2);\r\n}\r\n/**\r\n * [join description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param iter [description]\r\n * @param separator [description]\r\n * @return [description]\r\n */\r\nexport function join(iter, separator) {\r\n    if (separator === void 0) { separator = \"\"; }\r\n    var first = true;\r\n    var init = \"\";\r\n    iter(function (value) {\r\n        if (first) {\r\n            first = false;\r\n        }\r\n        else {\r\n            init += separator;\r\n        }\r\n        init += value;\r\n        return true;\r\n    });\r\n    return init;\r\n}\r\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nvar ListIterator = /** @class */ (function () {\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param list [description]\r\n     * @param create [description]\r\n     */\r\n    function ListIterator(list, create) {\r\n        // flag specifies if iterator should create new list item if it is reqested for a nextItem but there is no more left in the list\r\n        this.createNewItems = false;\r\n        this.list = list;\r\n        this._create = create;\r\n        this.reset();\r\n    }\r\n    ListIterator.prototype.reset = function () {\r\n        this._listCopy = toArray(this.list.iterator());\r\n    };\r\n    ListIterator.prototype.clear = function () {\r\n        this._listCopy.length = 0;\r\n    };\r\n    ListIterator.prototype.getFirst = function () {\r\n        return this.returnItem(0);\r\n    };\r\n    ListIterator.prototype.getLast = function () {\r\n        return this.returnItem(this._listCopy.length - 1);\r\n    };\r\n    ListIterator.prototype.find = function (fn) {\r\n        var index = $array.findIndex(this._listCopy, fn);\r\n        if (index !== -1) {\r\n            var item = this._listCopy[index];\r\n            // TODO use removeIndex instead ?\r\n            $array.remove(this._listCopy, item);\r\n            return item;\r\n        }\r\n        else {\r\n            return this.getLast();\r\n        }\r\n    };\r\n    ListIterator.prototype.removeItem = function (item) {\r\n        return $array.remove(this._listCopy, item);\r\n    };\r\n    ListIterator.prototype.returnItem = function (index) {\r\n        if (index >= 0 && index < this._listCopy.length) {\r\n            var item = this._listCopy[index];\r\n            // TODO use removeIndex instead ?\r\n            $array.remove(this._listCopy, item);\r\n            return item;\r\n        }\r\n        else if (this.createNewItems) {\r\n            return this._create();\r\n        }\r\n    };\r\n    ListIterator.prototype.iterator = function () {\r\n        return fromArray(this._listCopy);\r\n    };\r\n    return ListIterator;\r\n}());\r\nexport { ListIterator };\r\n", "/**\r\n * ============================================================================\r\n * COMPARING FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Comparing function used for ordering.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Use localeCompare\r\n * @param a  Item 1\r\n * @param b  Item 2\r\n * @return Result\r\n */\r\nexport function order(a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a < b) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return 1;\r\n    }\r\n}\r\n/**\r\n * ============================================================================\r\n * OTHER FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Repeats a `string` number of times as set in `amount`.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Make this faster\r\n * @param string  Source string\r\n * @param amount  Number of times to repeat string\r\n * @return New string\r\n */\r\nexport function repeat(string, amount) {\r\n    return new Array(amount + 1).join(string);\r\n}\r\n/**\r\n * Generates a random string `characters` length.\r\n *\r\n * @param chars  Number of characters\r\n * @return Random string\r\n */\r\nexport function random(chars) {\r\n    var res = \"\";\r\n    var choice = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n    for (var i = 0; i < chars; i++) {\r\n        res += choice.charAt(Math.floor(Math.random() * choice.length));\r\n    }\r\n    return res;\r\n}\r\n", "import { __extends, __generator, __read } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Disposer } from \"./Disposer\";\r\nimport { EventDispatcher } from \"./EventDispatcher\";\r\nimport * as $object from \"./Object\";\r\nimport * as $iter from \"./Iterator\";\r\nimport * as $string from \"./String\";\r\n/**\r\n * A disposable dictionary, which when disposed itself will call `dispose()`\r\n * method on all its items.\r\n */\r\nvar DictionaryDisposer = /** @class */ (function (_super) {\r\n    __extends(DictionaryDisposer, _super);\r\n    function DictionaryDisposer(dict) {\r\n        var _this = this;\r\n        var disposer = dict.events.on(\"removed\", function (x) {\r\n            x.oldValue.dispose();\r\n        }, undefined, false);\r\n        _this = _super.call(this, function () {\r\n            disposer.dispose();\r\n            // TODO clear the dictionary ?\r\n            $iter.each(dict.iterator(), function (a) {\r\n                var v = a[1];\r\n                v.dispose();\r\n            });\r\n        }) || this;\r\n        return _this;\r\n    }\r\n    return DictionaryDisposer;\r\n}(Disposer));\r\nexport { DictionaryDisposer };\r\n/**\r\n * A Dictionary is collection where values of some type can be mapped to\r\n * string keys.\r\n *\r\n * You might call it an \"associative list\" or \"associative array\".\r\n */\r\nvar Dictionary = /** @class */ (function () {\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Dictionary() {\r\n        /**\r\n         * Event dispatcher.\r\n         */\r\n        this.events = new EventDispatcher();\r\n        this._dictionary = {};\r\n    }\r\n    /**\r\n     * Returns `true` if key exists in Dictionary.\r\n     *\r\n     * @param key  The key to search for\r\n     * @return `true` if key exists, `false` if it doesn't\r\n     */\r\n    Dictionary.prototype.hasKey = function (key) {\r\n        return $object.hasKey(this._dictionary, key);\r\n    };\r\n    /**\r\n     * Returns the value for a specific key.\r\n     *\r\n     * @param key  The key to search for\r\n     * @return Value for the key, or `undefined` if it doesn't exist\r\n     */\r\n    Dictionary.prototype.getKey = function (key) {\r\n        return this._dictionary[key];\r\n    };\r\n    /**\r\n     * Inserts value at specific key.\r\n     *\r\n     * Will thrown an exception if the key already exists in the dictionary.\r\n     *\r\n     * @param key    Key\r\n     * @param value  Value\r\n     */\r\n    Dictionary.prototype.insertKey = function (key, value) {\r\n        if ($object.hasKey(this._dictionary, key)) {\r\n            throw new Error(\"Key \" + key + \" already exists in dictionary\");\r\n        }\r\n        else {\r\n            this._dictionary[key] = value;\r\n            if (this.events.isEnabled(\"insertKey\")) {\r\n                this.events.dispatchImmediately(\"insertKey\", {\r\n                    type: \"insertKey\",\r\n                    target: this,\r\n                    key: key,\r\n                    newValue: value\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Adds or updates key/value into dictionary.\r\n     *\r\n     * If the key already exists, the old value will be overwritten.\r\n     *\r\n     * If the new value is exactly the same as the old value (using ===), it won't do anything.\r\n     *\r\n     * @param key    Key\r\n     * @param value  Value\r\n     */\r\n    Dictionary.prototype.setKey = function (key, value) {\r\n        if ($object.hasKey(this._dictionary, key)) {\r\n            var oldValue = this._dictionary[key];\r\n            if (oldValue !== value) {\r\n                this._dictionary[key] = value;\r\n                if (this.events.isEnabled(\"setKey\")) {\r\n                    this.events.dispatchImmediately(\"setKey\", {\r\n                        type: \"setKey\",\r\n                        target: this,\r\n                        key: key,\r\n                        oldValue: oldValue,\r\n                        newValue: value\r\n                    });\r\n                }\r\n                if (this.events.isEnabled(\"removed\")) {\r\n                    this.events.dispatchImmediately(\"removed\", {\r\n                        type: \"removed\",\r\n                        target: this,\r\n                        oldValue: oldValue\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._dictionary[key] = value;\r\n            if (this.events.isEnabled(\"insertKey\")) {\r\n                this.events.dispatchImmediately(\"insertKey\", {\r\n                    type: \"insertKey\",\r\n                    target: this,\r\n                    key: key,\r\n                    newValue: value\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Updates the value at specific `key` using custom function.\r\n     *\r\n     * Passes in current value into the function, and uses its output as a new\r\n     * value.\r\n     *\r\n     * If the new value is exactly the same as the old value (using ===), it won't do anything.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param key  Key\r\n     * @param fn   Function to transform the value\r\n     */\r\n    Dictionary.prototype.updateKey = function (key, fn) {\r\n        if ($object.hasKey(this._dictionary, key)) {\r\n            var oldValue = this._dictionary[key];\r\n            var newValue = fn(oldValue);\r\n            if (oldValue !== newValue) {\r\n                this._dictionary[key] = newValue;\r\n                if (this.events.isEnabled(\"setKey\")) {\r\n                    this.events.dispatchImmediately(\"setKey\", {\r\n                        type: \"setKey\",\r\n                        target: this,\r\n                        key: key,\r\n                        oldValue: oldValue,\r\n                        newValue: newValue\r\n                    });\r\n                }\r\n                if (this.events.isEnabled(\"removed\")) {\r\n                    this.events.dispatchImmediately(\"removed\", {\r\n                        type: \"removed\",\r\n                        target: this,\r\n                        oldValue: oldValue\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            throw new Error(\"Key \" + key + \" doesn't exist in dictionary\");\r\n        }\r\n    };\r\n    /**\r\n     * Removes value at specific `key` from dictionary.\r\n     *\r\n     * @param key  Key to remove\r\n     */\r\n    Dictionary.prototype.removeKey = function (key) {\r\n        if ($object.hasKey(this._dictionary, key)) {\r\n            var oldValue = this._dictionary[key];\r\n            delete this._dictionary[key];\r\n            if (this.events.isEnabled(\"removeKey\")) {\r\n                this.events.dispatchImmediately(\"removeKey\", {\r\n                    type: \"removeKey\",\r\n                    target: this,\r\n                    key: key,\r\n                    oldValue: oldValue\r\n                });\r\n            }\r\n            if (this.events.isEnabled(\"removed\")) {\r\n                this.events.dispatchImmediately(\"removed\", {\r\n                    type: \"removed\",\r\n                    target: this,\r\n                    oldValue: oldValue\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * [insertKeyIfEmpty description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo description\r\n     * @param key      [description]\r\n     * @param ifEmpty  [description]\r\n     * @return [description]\r\n     */\r\n    Dictionary.prototype.insertKeyIfEmpty = function (key, ifEmpty) {\r\n        if (!this.hasKey(key)) {\r\n            this.insertKey(key, ifEmpty());\r\n        }\r\n        return this.getKey(key);\r\n    };\r\n    /**\r\n     * Removes all items from the dictionary.\r\n     */\r\n    Dictionary.prototype.clear = function () {\r\n        var _this = this;\r\n        // TODO dispatch this after clear\r\n        if (this.events.isEnabled(\"removed\")) {\r\n            $object.each(this._dictionary, function (key, value) {\r\n                _this.events.dispatchImmediately(\"removed\", {\r\n                    type: \"removed\",\r\n                    target: _this,\r\n                    oldValue: value\r\n                });\r\n            });\r\n        }\r\n        this._dictionary = {};\r\n        if (this.events.isEnabled(\"cleared\")) {\r\n            this.events.dispatchImmediately(\"cleared\", {\r\n                type: \"cleared\",\r\n                target: this\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Copies items from another Dictionary.\r\n     *\r\n     * @param source  A Dictionary to copy items from\r\n     */\r\n    Dictionary.prototype.copyFrom = function (source) {\r\n        var _this = this;\r\n        $iter.each(source.iterator(), function (a) {\r\n            // TODO fix this type cast\r\n            _this.setKey(a[0], a[1]);\r\n        });\r\n    };\r\n    /**\r\n     * Returns an interator that can be used to iterate through all items in\r\n     * the dictionary.\r\n     *\r\n     * @return Iterator\r\n     */\r\n    Dictionary.prototype.iterator = function () {\r\n        // @todo fix this type after the Iterator bug is fixed\r\n        // https://github.com/Microsoft/TypeScript/issues/16730\r\n        return $object.entries(this._dictionary);\r\n    };\r\n    /**\r\n     * Returns an ES6 iterator for the keys/values of the dictionary.\r\n     */\r\n    Dictionary.prototype[Symbol.iterator] = function () {\r\n        var _a, _b, _i, key;\r\n        return __generator(this, function (_c) {\r\n            switch (_c.label) {\r\n                case 0:\r\n                    _a = [];\r\n                    for (_b in this._dictionary)\r\n                        _a.push(_b);\r\n                    _i = 0;\r\n                    _c.label = 1;\r\n                case 1:\r\n                    if (!(_i < _a.length)) return [3 /*break*/, 4];\r\n                    key = _a[_i];\r\n                    if (!$object.hasKey(this._dictionary, key)) return [3 /*break*/, 3];\r\n                    return [4 /*yield*/, [key, this._dictionary[key]]];\r\n                case 2:\r\n                    _c.sent();\r\n                    _c.label = 3;\r\n                case 3:\r\n                    _i++;\r\n                    return [3 /*break*/, 1];\r\n                case 4: return [2 /*return*/];\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Calls `f` for each key/value in the dictionary.\r\n     */\r\n    Dictionary.prototype.each = function (f) {\r\n        $iter.each(this.iterator(), function (_a) {\r\n            var _b = __read(_a, 2), key = _b[0], value = _b[1];\r\n            return f(key, value);\r\n        });\r\n    };\r\n    /**\r\n     * Returns an iterator that can be used to iterate through all items in\r\n     * the dictionary, ordered by key.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Iterator\r\n     */\r\n    Dictionary.prototype.sortedIterator = function () {\r\n        return $iter.sort(this.iterator(), function (x, y) { return $string.order(x[0], y[0]); });\r\n    };\r\n    return Dictionary;\r\n}());\r\nexport { Dictionary };\r\n/**\r\n * A version of a [[Dictionary]] that has a \"template\".\r\n *\r\n * A template is an instance of an object, that can be used to create new\r\n * elements in the list without actually needing to create instances for those.\r\n *\r\n * When new element is created in the list, e.g. by calling its `create()`\r\n * method, an exact copy of the element is created (including properties and\r\n * other attributes), inserted into the list and returned.\r\n */\r\nvar DictionaryTemplate = /** @class */ (function (_super) {\r\n    __extends(DictionaryTemplate, _super);\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param t Template object\r\n     */\r\n    function DictionaryTemplate(t) {\r\n        var _this = _super.call(this) || this;\r\n        _this.template = t;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(DictionaryTemplate.prototype, \"template\", {\r\n        /**\r\n         * @return Template object\r\n         */\r\n        get: function () {\r\n            return this._template;\r\n        },\r\n        /**\r\n         * A \"template\" object to copy all properties from when creating new list\r\n         * items.\r\n         *\r\n         * @param v  Template object\r\n         */\r\n        set: function (v) {\r\n            v.isTemplate = true;\r\n            this._template = v;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies all elements from other dictionary.\r\n     *\r\n     * @param source  Source dictionary\r\n     */\r\n    DictionaryTemplate.prototype.copyFrom = function (source) {\r\n        var _this = this;\r\n        $iter.each(source.iterator(), function (a) {\r\n            // TODO fix this type cast\r\n            // TODO why does this need to clone ?\r\n            _this.setKey(a[0], a[1].clone());\r\n        });\r\n    };\r\n    /**\r\n     * Instantiates a new object of the specified type, adds it to specified\r\n     * `key` in the dictionary, and returns it.\r\n     *\r\n     * @param make  Item type to use. Will use the default type for the dictionary if not specified.\r\n     * @return      Newly created item\r\n     */\r\n    DictionaryTemplate.prototype.create = function (key) {\r\n        var _this = this;\r\n        return this.insertKeyIfEmpty(key, function () { return _this.template.clone(); });\r\n    };\r\n    return DictionaryTemplate;\r\n}(Dictionary));\r\nexport { DictionaryTemplate };\r\n", "/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Dictionary } from \"./Dictionary\";\r\nimport * as $type from \"./Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Represents object cache.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Better storage\r\n * @todo TTL logging\r\n * @todo Garbage collector\r\n */\r\nvar Cache = /** @class */ (function () {\r\n    function Cache() {\r\n        /**\r\n         * Storage for cache items.\r\n         */\r\n        this._storage = new Dictionary();\r\n        /**\r\n         * Default TTL in milliseconds.\r\n         */\r\n        this.ttl = 1000;\r\n    }\r\n    /**\r\n     * Caches or updates cached value, resets TTL.\r\n     *\r\n     * If `ttl` is set to zero, item will never expire.\r\n     *\r\n     * @param owner  An id of the object that owns this cache\r\n     * @param key    Index key\r\n     * @param value  Value\r\n     * @param ttl    TTL of the cache to live in milliseconds\r\n     */\r\n    Cache.prototype.set = function (owner, key, value, ttl) {\r\n        // Create if storage does not exist for this owner\r\n        var ownerStorage = this._storage.insertKeyIfEmpty(owner, function () { return new Dictionary(); });\r\n        // Create cache item\r\n        var item = {\r\n            \"touched\": new Date().getTime(),\r\n            \"ttl\": $type.isNumber(ttl) ? ttl : this.ttl,\r\n            \"value\": value\r\n        };\r\n        // Set\r\n        ownerStorage.setKey(key, item);\r\n    };\r\n    /**\r\n     * Rerturns cached item, respecting TTL.\r\n     *\r\n     * @param owner  An id of the object that owns this cache\r\n     * @param key    Index key\r\n     * @param value  Value to return if cache not available\r\n     * @return Value, or `undefined` if not set\r\n     */\r\n    Cache.prototype.get = function (owner, key, value) {\r\n        if (value === void 0) { value = undefined; }\r\n        // \t\t || ypeof this._storage[owner][key] === \"undefined\" || this._storage[owner][key].expired === true) {\r\n        if (this._storage.hasKey(owner)) {\r\n            var ownerStorage = this._storage.getKey(owner);\r\n            if (ownerStorage.hasKey(key)) {\r\n                var cacheItem = ownerStorage.getKey(key);\r\n                if (cacheItem.ttl && ((cacheItem.touched + cacheItem.ttl) < new Date().getTime())) {\r\n                    cacheItem.expired = true;\r\n                }\r\n                if (cacheItem.expired) {\r\n                    ownerStorage.removeKey(key);\r\n                    return value;\r\n                }\r\n                return cacheItem.value;\r\n            }\r\n            else {\r\n                return value;\r\n            }\r\n        }\r\n        else {\r\n            return value;\r\n        }\r\n    };\r\n    /**\r\n     * Clears cache for specific owner or everything.\r\n     *\r\n     * @param owner Owner to clear cache for\r\n     */\r\n    Cache.prototype.clear = function (owner) {\r\n        if (owner) {\r\n            this._storage.removeKey(owner);\r\n        }\r\n        else {\r\n            this._storage.clear();\r\n        }\r\n    };\r\n    return Cache;\r\n}());\r\nexport { Cache };\r\n/**\r\n * ============================================================================\r\n * GLOBAL INSTANCE\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * A global instance of cache. Use this instance to cache any values.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport var cache = new Cache();\r\n", "import { EventDispatcher } from \"./utils/EventDispatcher\";\r\nimport { Dictionary } from \"./utils/Dictionary\";\r\nimport { cache } from \"./utils/Cache\";\r\nimport * as $type from \"./utils/Type\";\r\nimport * as $string from \"./utils/String\";\r\nimport * as $array from \"./utils/Array\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Registry is used to store miscellaneous system-wide information, like ids,\r\n * maps, themes, and registered classes.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nvar Registry = /** @class */ (function () {\r\n    function Registry() {\r\n        var _this = this;\r\n        /**\r\n         * Event dispacther.\r\n         */\r\n        this.events = new EventDispatcher();\r\n        /**\r\n         * All currently applied themes. All new chart instances created will\r\n         * automatically inherit and retain System's themes.\r\n         */\r\n        this.themes = [];\r\n        /**\r\n         * List of all loaded available themes.\r\n         *\r\n         * Whenever a theme loads, it registers itself in System's `loadedThemes`\r\n         * collection.\r\n         */\r\n        this.loadedThemes = {};\r\n        /**\r\n         * An indeternal counter used to generate unique IDs.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        this._uidCount = 0;\r\n        /**\r\n         * Keeps register of class references so that they can be instnatiated using\r\n         * string key.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        this.registeredClasses = {};\r\n        /**\r\n         * Holds all generated placeholders.\r\n         */\r\n        this._placeholders = {};\r\n        /**\r\n         * A list of invalid(ated) [[Sprite]] objects that need to be re-validated\r\n         * during next cycle.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        this.invalidSprites = {};\r\n        /**\r\n         * Components are added to this list when their data provider changes to\r\n         * a new one or data is added/removed from their data provider.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        this.invalidDatas = {};\r\n        /**\r\n         * Components are added to this list when values of their raw data change.\r\n         * Used when we want a smooth animation from one set of values to another.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        this.invalidRawDatas = [];\r\n        /**\r\n         * Components are added to this list when values of their data changes\r\n         * (but not data provider itself).\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        this.invalidDataItems = [];\r\n        /**\r\n         * Components are added to this list when their data range (selection) is\r\n         * changed, e.g. zoomed.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        this.invalidDataRange = [];\r\n        /**\r\n         * A list of [[Sprite]] objects that have invalid(ated) positions, that need\r\n         * to be recalculated.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        this.invalidPositions = {};\r\n        /**\r\n         * A list of [[Container]] objects with invalid(ated) layouts.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        this.invalidLayouts = {};\r\n        /**\r\n         * An array holding all active (non-disposed) top level elemens.\r\n         *\r\n         * When, for example, a new chart is created, its instance will be added to\r\n         * this array, and will be removed when the chart is disposed.\r\n         */\r\n        this.baseSprites = [];\r\n        /**\r\n         * An UID-based map of base sprites (top-level charts).\r\n         */\r\n        this.baseSpritesByUid = {};\r\n        /**\r\n         * Queued charts (waiting for their turn) to initialize.\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/performance/#Daisy_chaining_multiple_charts} for more information\r\n         */\r\n        this.queue = [];\r\n        /**\r\n         * An array of deferred charts that haven't been created yet.\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/performance/#Deferred_daisy_chained_instantiation} for more information\r\n         * @since 4.10.0\r\n         */\r\n        this.deferred = [];\r\n        this.uid = this.getUniqueId();\r\n        this.invalidSprites.noBase = [];\r\n        this.invalidDatas.noBase = [];\r\n        this.invalidLayouts.noBase = [];\r\n        this.invalidPositions.noBase = [];\r\n        // This is needed for Angular Universal SSR\r\n        if (typeof addEventListener !== \"undefined\") {\r\n            // This is needed to prevent charts from being cut off when printing\r\n            addEventListener(\"beforeprint\", function () {\r\n                $array.each(_this.baseSprites, function (sprite) {\r\n                    var svg = sprite.paper.svg;\r\n                    svg.setAttribute(\"viewBox\", \"0 0 \" + svg.clientWidth + \" \" + svg.clientHeight);\r\n                });\r\n            });\r\n            addEventListener(\"afterprint\", function () {\r\n                $array.each(_this.baseSprites, function (sprite) {\r\n                    var svg = sprite.paper.svg;\r\n                    svg.removeAttribute(\"viewBox\");\r\n                });\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Generates a unique chart system-wide ID.\r\n     *\r\n     * @return Generated ID\r\n     */\r\n    Registry.prototype.getUniqueId = function () {\r\n        var uid = this._uidCount;\r\n        this._uidCount += 1;\r\n        return \"id-\" + uid;\r\n    };\r\n    Object.defineProperty(Registry.prototype, \"map\", {\r\n        /**\r\n         * Returns a universal collection for mapping ids with objects.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return Map collection\r\n         */\r\n        get: function () {\r\n            if (!this._map) {\r\n                this._map = new Dictionary();\r\n            }\r\n            return this._map;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Caches value in object's cache.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param key    Key\r\n     * @param value  Value\r\n     * @param ttl    TTL in seconds\r\n     */\r\n    Registry.prototype.setCache = function (key, value, ttl) {\r\n        cache.set(this.uid, key, value, ttl);\r\n    };\r\n    /**\r\n     * Retrieves cached value.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param key    Key\r\n     * @param value  Value to return if cache is not available\r\n     * @return Value\r\n     */\r\n    Registry.prototype.getCache = function (key, value) {\r\n        if (value === void 0) { value = undefined; }\r\n        return cache.get(this.uid, key, value);\r\n    };\r\n    /**\r\n     * Dispatches an event using own event dispatcher. Will automatically\r\n     * populate event data object with event type and target (this element).\r\n     * It also checks if there are any handlers registered for this sepecific\r\n     * event.\r\n     *\r\n     * @param eventType Event type (name)\r\n     * @param data      Data to pass into event handler(s)\r\n     */\r\n    Registry.prototype.dispatch = function (eventType, data) {\r\n        // @todo Implement proper type check\r\n        if (this.events.isEnabled(eventType)) {\r\n            if (data) {\r\n                data.type = eventType;\r\n                data.target = data.target || this;\r\n                this.events.dispatch(eventType, {\r\n                    type: eventType,\r\n                    target: this\r\n                });\r\n            }\r\n            else {\r\n                this.events.dispatch(eventType, {\r\n                    type: eventType,\r\n                    target: this\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Works like `dispatch`, except event is triggered immediately, without\r\n     * waiting for the next frame cycle.\r\n     *\r\n     * @param eventType Event type (name)\r\n     * @param data      Data to pass into event handler(s)\r\n     */\r\n    Registry.prototype.dispatchImmediately = function (eventType, data) {\r\n        // @todo Implement proper type check\r\n        if (this.events.isEnabled(eventType)) {\r\n            if (data) {\r\n                data.type = eventType;\r\n                data.target = data.target || this;\r\n                this.events.dispatchImmediately(eventType, data);\r\n            }\r\n            else {\r\n                this.events.dispatchImmediately(eventType, {\r\n                    type: eventType,\r\n                    target: this\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns a unique placeholder suitable for the key.\r\n     *\r\n     * @param key  Key\r\n     * @return Random string to be used as placeholder\r\n     */\r\n    Registry.prototype.getPlaceholder = function (key) {\r\n        if ($type.hasValue(this._placeholders[key])) {\r\n            return this._placeholders[key];\r\n        }\r\n        this._placeholders[key] = \"__amcharts_\" + key + \"_\" + $string.random(8) + \"__\";\r\n        return this._placeholders[key];\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Registry.prototype.addToInvalidComponents = function (component) {\r\n        if (component.baseId) {\r\n            $array.move(this.invalidDatas[component.baseId], component);\r\n        }\r\n        else {\r\n            $array.move(this.invalidDatas[\"noBase\"], component);\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Registry.prototype.removeFromInvalidComponents = function (component) {\r\n        if (component.baseId) {\r\n            $array.remove(this.invalidDatas[component.baseId], component);\r\n        }\r\n        $array.remove(this.invalidDatas[\"noBase\"], component);\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Registry.prototype.addToInvalidSprites = function (sprite) {\r\n        if (sprite.baseId) {\r\n            $array.add(this.invalidSprites[sprite.baseId], sprite);\r\n        }\r\n        else {\r\n            $array.add(this.invalidSprites[\"noBase\"], sprite);\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Registry.prototype.removeFromInvalidSprites = function (sprite) {\r\n        if (sprite.baseId) {\r\n            $array.remove(this.invalidSprites[sprite.baseId], sprite);\r\n        }\r\n        $array.remove(this.invalidSprites[\"noBase\"], sprite);\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Registry.prototype.addToInvalidPositions = function (sprite) {\r\n        if (sprite.baseId) {\r\n            $array.add(this.invalidPositions[sprite.baseId], sprite);\r\n        }\r\n        else {\r\n            $array.add(this.invalidPositions[\"noBase\"], sprite);\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Registry.prototype.removeFromInvalidPositions = function (sprite) {\r\n        if (sprite.baseId) {\r\n            $array.remove(this.invalidPositions[sprite.baseId], sprite);\r\n        }\r\n        $array.remove(this.invalidPositions[\"noBase\"], sprite);\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Registry.prototype.addToInvalidLayouts = function (sprite) {\r\n        if (sprite.baseId) {\r\n            $array.add(this.invalidLayouts[sprite.baseId], sprite);\r\n        }\r\n        else {\r\n            $array.add(this.invalidLayouts[\"noBase\"], sprite);\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Registry.prototype.removeFromInvalidLayouts = function (sprite) {\r\n        if (sprite.baseId) {\r\n            $array.remove(this.invalidLayouts[sprite.baseId], sprite);\r\n        }\r\n        $array.remove(this.invalidLayouts[\"noBase\"], sprite);\r\n    };\r\n    return Registry;\r\n}());\r\nexport { Registry };\r\n/**\r\n * A singleton global instance of [[Registry]].\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport var registry = new Registry();\r\n/**\r\n * Returns `true` if object is an instance of the class. It's the same as `instanceof` except it doesn't need to import the class.\r\n *\r\n * @param object Object\r\n * @param name Class name\r\n * @return Is instance of class\r\n */\r\nexport function is(object, name) {\r\n    var x = registry.registeredClasses[name];\r\n    return x != null && object instanceof x;\r\n}\r\n"],
  "mappings": "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",
  "names": ["Percent", "percent", "min", "max", "length", "length", "order", "Disposer", "MultiDisposer", "MutableValueDisposer", "CounterDisposer", "length", "EventDispatcher", "type", "TargetedEventDispatcher", "copy", "each", "eachContinue", "order", "eachContinue", "each", "copy", "keys", "each", "eachContinue", "find", "findIndex", "map", "max", "min", "toArray", "length", "toArray", "eachContinue", "each", "map", "findIndex", "find", "min", "max", "first", "ListIterator", "DictionaryDisposer", "each", "Dictionary", "each", "DictionaryTemplate", "each", "Cache", "Registry"]
}
